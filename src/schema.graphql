# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin_accessesCount {
  admin_role_accesses: Int!
}

input Admin_accessesRelationFilter {
  is: admin_accessesWhereInput
  isNot: admin_accessesWhereInput
}

type Admin_bank_accountsCount {
  deposit_transactions: Int!
}

input Admin_bank_accountsRelationFilter {
  is: admin_bank_accountsWhereInput
  isNot: admin_bank_accountsWhereInput
}

input Admin_login_logsListRelationFilter {
  every: admin_login_logsWhereInput
  none: admin_login_logsWhereInput
  some: admin_login_logsWhereInput
}

input Admin_role_accessesListRelationFilter {
  every: admin_role_accessesWhereInput
  none: admin_role_accessesWhereInput
  some: admin_role_accessesWhereInput
}

type Admin_rolesCount {
  admin_role_accesses: Int!
  admins: Int!
}

input Admin_rolesRelationFilter {
  is: admin_rolesWhereInput
  isNot: admin_rolesWhereInput
}

type AdminsCount {
  admin_login_logs: Int!
  deposit_transactions: Int!
  manual_adjustments: Int!
  transfer_in_transactions: Int!
  transfer_out_transactions: Int!
  withdrawal_transactions: Int!
}

input AdminsListRelationFilter {
  every: adminsWhereInput
  none: adminsWhereInput
  some: adminsWhereInput
}

input AdminsNullableRelationFilter {
  is: adminsWhereInput
  isNot: adminsWhereInput
}

input AdminsRelationFilter {
  is: adminsWhereInput
  isNot: adminsWhereInput
}

type AgentGameRebateEntity {
  agent: agents
  agentRebates: [agent_rebate_rates!]
  categories: [fl_categories!]
  defaultPlayerRebates: [player_default_rebate_rates!]
  parentRebates: [agent_rebate_rates!]
}

type AgentShareEntity {
  shares: Float!
}

input Agent_rebate_ratesListRelationFilter {
  every: agent_rebate_ratesWhereInput
  none: agent_rebate_ratesWhereInput
  some: agent_rebate_ratesWhereInput
}

input Agent_records_by_dayListRelationFilter {
  every: agent_records_by_dayWhereInput
  none: agent_records_by_dayWhereInput
  some: agent_records_by_dayWhereInput
}

input Agent_sharesListRelationFilter {
  every: agent_sharesWhereInput
  none: agent_sharesWhereInput
  some: agent_sharesWhereInput
}

type AgentsCount {
  agent_rebate_rates: Int!
  agent_records_by_day: Int!
  agent_shares: Int!
  children: Int!
  players: Int!
}

input AgentsListRelationFilter {
  every: agentsWhereInput
  none: agentsWhereInput
  some: agentsWhereInput
}

input AgentsNullableRelationFilter {
  is: agentsWhereInput
  isNot: agentsWhereInput
}

input AgentsRelationFilter {
  is: agentsWhereInput
  isNot: agentsWhereInput
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}

type Auth {
  """JWT access token"""
  access_token: JWT!

  """JWT refresh token"""
  refresh_token: JWT!
  user: admins!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type CountDto {
  counts: Int!
}

input CreateAdminInput {
  admin_name: String!
  admin_password: String!
  admin_roles_id: String!
}

input CreateAgentInput {
  agent_name: String!
  agent_password: String!
  parent_agent_id: String
}

input CreateBankAccountInput {
  account_number: String!
  bank_name: String!
  enabled: Boolean
  holder_name: String!
  method: String!
}

input CreateManualAdjustment {
  amount: Float!
  cdate: DateTime
  player_id: String!
  reason: String!
}

input CreateRoleInput {
  admin_role_name: String!
}

input DateFilter {
  gte: DateTime
  lte: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input Deposit_transactionsListRelationFilter {
  every: deposit_transactionsWhereInput
  none: deposit_transactionsWhereInput
  some: deposit_transactionsWhereInput
}

input Enumbank_methodFilter {
  equals: bank_method
  in: [bank_method!]
  not: NestedEnumbank_methodFilter
  notIn: [bank_method!]
}

input Enumgame_currencyFilter {
  equals: game_currency
  in: [game_currency!]
  not: NestedEnumgame_currencyFilter
  notIn: [game_currency!]
}

input Enumreal_currencyFilter {
  equals: real_currency
  in: [real_currency!]
  not: NestedEnumreal_currencyFilter
  notIn: [real_currency!]
}

input Enumwallet_transaction_statusFilter {
  equals: wallet_transaction_status
  in: [wallet_transaction_status!]
  not: NestedEnumwallet_transaction_statusFilter
  notIn: [wallet_transaction_status!]
}

type FinancialStatementDepositEntity {
  agent_name: String!
  deposit_amount: Int!
  deposit_number: Int!
  player_id: String!
  tg_id: String!
}

type FinancialStatementEntity {
  deposits: [FinancialStatementDepositEntity!]
  pnl: [FinancialStatementPnlEntity!]
  withdrawals: [FinancialStatementWithdrawEntity!]
}

type FinancialStatementPnlEntity {
  player_id: String!
  sum: String!
}

input FinancialStatementWhereInput {
  agentName: String
  fromDate: String!
  playerName: String
  toDate: String!
}

type FinancialStatementWithdrawEntity {
  player_id: String!
  withdrawal_amount: Int!
  withdrawal_number: Int!
}

type Fl_categoriesCount {
  game_record_rounds: Int!
}

input Fl_categoriesRelationFilter {
  is: fl_categoriesWhereInput
  isNot: fl_categoriesWhereInput
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input GameRebateInput {
  categoryId: Int!
  newRate: Float!
  previousRebateId: String
}

input GameRecordRoundsWhereInput {
  cdate: DateFilter
  game_category: String
  game_name: String
  game_round_info_id: String
  merchant_name: String
  tg_id: String
}

input Game_record_roundsListRelationFilter {
  every: game_record_roundsWhereInput
  none: game_record_roundsWhereInput
  some: game_record_roundsWhereInput
}

type Game_round_infosCount {
  game_record_rounds: Int!
}

input Game_round_infosRelationFilter {
  is: game_round_infosWhereInput
  isNot: game_round_infosWhereInput
}

input GetAgentShareInput {
  agentId: String!
}

input GetGameRebateInput {
  id: String!
}

type IncomeStatementAgentEntity {
  agent_id: String!
  agent_name: String!
  effective_bet: Float!
  net_income: Float!
  parent_agent_id: String!
  pnl: Float!
  pnl_expense: Float!
  rebate_expense: Float!
  rebate_income: Float!
}

type IncomeStatementEntity {
  agents: [IncomeStatementAgentEntity!]
  players: [IncomeStatementPlayerEntity!]
}

type IncomeStatementPlayerEntity {
  agent_id: String!
  effective_bet: Float!
  name: String
  player_id: String!
  pnl: Float!
  rebate: Float!
}

input IncomeStatementWhereInput {
  fromDate: String!
  parentId: String!
  toDate: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  admin_name: String!
  password: String!
}

input Manual_adjustmentsListRelationFilter {
  every: manual_adjustmentsWhereInput
  none: manual_adjustmentsWhereInput
  some: manual_adjustmentsWhereInput
}

type Mutation {
  createAdmin(data: CreateAdminInput!): admins!
  createAdminRole(data: CreateRoleInput!): admin_roles!
  createAgent(data: CreateAgentInput!): agents!
  createBankAccount(data: CreateBankAccountInput!): admin_bank_accounts!
  createManualAdjustment(data: CreateManualAdjustment!): OkResponse!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  transactionAction(data: TransactionActionDto!): OkResponse!
  updateAdmin(data: UpdateAdminInput!): admins!
  updateAdminRole(data: UpdateRoleInput!): admin_roles!
  updateAgent(data: UpdateAgentInput!): agents!
  updateAgentGameRebates(data: UpdateGameRebateInput!): OkResponse!
  updateAgentShare(data: UpdateAgentShareInput!): OkResponse!
  updateAllPlayerGameRebates(data: UpdateGameRebateInput!): OkResponse!
  updateBankAccount(data: UpdateBankAccountInput!): admin_bank_accounts!
  updateDefaultPlayerGameRebates(data: UpdateGameRebateInput!): OkResponse!
  updateDeposit(data: UpdateFinanceInput!): deposit_transactions!
  updatePlayerGameRebates(data: UpdateGameRebateInput!): OkResponse!
  updateUser(data: UpdatePlayerInput!): players!
  updateWithdrawal(data: UpdateFinanceInput!): withdrawal_transactions!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumbank_methodFilter {
  equals: bank_method
  in: [bank_method!]
  not: NestedEnumbank_methodFilter
  notIn: [bank_method!]
}

input NestedEnumgame_currencyFilter {
  equals: game_currency
  in: [game_currency!]
  not: NestedEnumgame_currencyFilter
  notIn: [game_currency!]
}

input NestedEnumreal_currencyFilter {
  equals: real_currency
  in: [real_currency!]
  not: NestedEnumreal_currencyFilter
  notIn: [real_currency!]
}

input NestedEnumwallet_transaction_statusFilter {
  equals: wallet_transaction_status
  in: [wallet_transaction_status!]
  not: NestedEnumwallet_transaction_statusFilter
  notIn: [wallet_transaction_status!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String!]
}

enum NullsOrder {
  first
  last
}

type OkResponse {
  message: String!
}

type PlayerGameRebateEntity {
  categories: [fl_categories!]
  parentRebates: [agent_rebate_rates!]
  player: players
  player_rebate: [player_rebate_rates!]
}

type Player_bank_accountsCount {
  withdrawal_transactions: Int!
}

input Player_bank_accountsRelationFilter {
  is: player_bank_accountsWhereInput
  isNot: player_bank_accountsWhereInput
}

input Player_login_logsListRelationFilter {
  every: player_login_logsWhereInput
  none: player_login_logsWhereInput
  some: player_login_logsWhereInput
}

input Player_walletsNullableRelationFilter {
  is: player_walletsWhereInput
  isNot: player_walletsWhereInput
}

type PlayersCount {
  deposit_transactions: Int!
  game_record_rounds: Int!
  manual_adjustments: Int!
  player_login_logs: Int!
  rebate_transactions: Int!
  transfer_in_transactions: Int!
  transfer_out_transactions: Int!
  withdrawal_transactions: Int!
}

input PlayersListRelationFilter {
  every: playersWhereInput
  none: playersWhereInput
  some: playersWhereInput
}

input PlayersRelationFilter {
  is: playersWhereInput
  isNot: playersWhereInput
}

type Query {
  adminBankAccounts(order: admin_bank_accountsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: admin_bank_accountsWhereInput! = {}): [admin_bank_accounts!]!
  adminCount(where: adminsWhereInput! = {}): CountDto!
  adminLoginCount(where: admin_login_logsWhereInput! = {}): CountDto!
  adminRolesCount(where: admin_rolesWhereInput! = {}): CountDto!
  admins(order: adminsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: adminsWhereInput! = {}): [admins!]!
  agents(order: agentsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: agentsWhereInput! = {}): [agents!]!
  agentsCount(where: agentsWhereInput! = {}): CountDto!
  agentsPlayersCount(where: GetAgentShareInput! = {}): CountDto!
  bankAccountCount(where: admin_bank_accountsWhereInput! = {}): CountDto!
  deposits(order: deposit_transactionsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: deposit_transactionsWhereInput! = {}): [deposit_transactions!]!
  depositsCount(where: deposit_transactionsWhereInput! = {}): CountDto!
  getAccesses(order: admin_accessesOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: admin_accessesWhereInput! = {}): [admin_accesses!]!
  getAdminsLoginHistory(order: admin_login_logsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: admin_login_logsWhereInput! = {}): [admin_login_logs!]!
  getAdminsRoles(order: admin_rolesOrderByWithRelationInput! = {}, skip: Int! = 0, take: Int! = 10, where: admin_rolesWhereInput! = {}): [admin_roles!]!
  getAgentGameRebate(where: GetGameRebateInput! = {}): AgentGameRebateEntity!
  getAgentShare(where: GetAgentShareInput! = {}): AgentShareEntity!
  getAgentsPlayers(where: GetAgentShareInput! = {}): [players!]!
  getBanks: [banks!]!
  getBonusAmount(where: statsWhereInput! = {}): [statsAmount!]!
  getBonusStats(where: statsWhereInput! = {}): [statsAmount!]!
  getDepositAmount(where: statsWhereInput! = {}): [statsAmount!]!
  getDepositStats(where: statsWhereInput! = {}): [statsAmount!]!
  getFinancialStatement(where: FinancialStatementWhereInput! = {}): FinancialStatementEntity!
  getIncomeStatement(where: IncomeStatementWhereInput! = {}): IncomeStatementEntity!
  getMe: admins!
  getPlayerGameRebate(where: GetGameRebateInput! = {}): PlayerGameRebateEntity!
  getTransferIn(order: transfer_in_transactionsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: transfer_in_transactionsWhereInput! = {}): [transfer_in_transactions!]!
  getTransferOut(order: transfer_out_transactionsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: transfer_out_transactionsWhereInput! = {}): [transfer_out_transactions!]!
  getUserLoginHistory(order: player_login_logsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: player_login_logsWhereInput! = {}): [player_login_logs!]!
  getUsersBonusHistory(order: rebate_transactionsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: rebate_transactionsWhereInput! = {}): [rebate_transactions!]!
  getUsersGameHistory(skip: Int! = 0, take: Int! = 10, where: GameRecordRoundsWhereInput! = {}): [UserGameHistory!]!
  getUsersStats(where: statsWhereInput! = {}): CountDto!
  getWithdrawalAmount(where: statsWhereInput! = {}): [statsAmount!]!
  getWithdrawalStats(where: statsWhereInput! = {}): [statsAmount!]!
  manualAdjustmentCount(where: manual_adjustmentsWhereInput! = {}): CountDto!
  manualadjustments(order: manual_adjustmentsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: manual_adjustmentsWhereInput! = {}): [manual_adjustments!]!
  players(order: playersOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: playersWhereInput! = {}): [players!]!
  transferInCount(where: transfer_in_transactionsWhereInput! = {}): CountDto!
  transferOutCount(where: transfer_out_transactionsWhereInput! = {}): CountDto!
  usersBonusHistoryCount(where: rebate_transactionsWhereInput! = {}): CountDto!
  usersCount(where: playersWhereInput! = {}): CountDto!
  usersGameHistoryCount(where: GameRecordRoundsWhereInput! = {}): CountDto!
  usersLoginCount(where: player_login_logsWhereInput! = {}): CountDto!
  withdrawalCount(where: withdrawal_transactionsWhereInput! = {}): CountDto!
  withdrawals(order: withdrawal_transactionsOrderByWithAggregationInput! = {}, skip: Int! = 0, take: Int! = 10, where: withdrawal_transactionsWhereInput! = {}): [withdrawal_transactions!]!
}

enum QueryMode {
  default
  insensitive
}

input Rebate_transactionsListRelationFilter {
  every: rebate_transactionsWhereInput
  none: rebate_transactionsWhereInput
  some: rebate_transactionsWhereInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Token {
  """JWT access token"""
  access_token: JWT!

  """JWT refresh token"""
  refresh_token: JWT!
}

input TransactionActionDto {
  approvalStatus: ApprovalStatus!
  comment: String!
  transactionId: String!
  transactionType: transactionType!
}

input Transfer_in_transactionsListRelationFilter {
  every: transfer_in_transactionsWhereInput
  none: transfer_in_transactionsWhereInput
  some: transfer_in_transactionsWhereInput
}

input Transfer_out_transactionsListRelationFilter {
  every: transfer_out_transactionsWhereInput
  none: transfer_out_transactionsWhereInput
  some: transfer_out_transactionsWhereInput
}

input UpdateAdminInput {
  admin_id: String!
  admin_name: String
  admin_password: String
  admin_role_id: String
  enabled: Boolean
}

input UpdateAgentInput {
  agent_id: String!
  agent_name: String
  agent_password: String
  enabled: Boolean
}

input UpdateAgentShareInput {
  agentId: String!
  share: Float!
}

input UpdateBankAccountInput {
  account_number: String
  admin_bank_account_id: String!
  bank_name: String
  enabled: Boolean
  holder_name: String
  method: String
}

input UpdateFinanceInput {
  id: String!
  is_enabled: Boolean!
}

input UpdateGameRebateInput {
  id: String!
  rabates: [GameRebateInput!]!
}

input UpdatePlayerInput {
  enabled: Boolean
  user_id: String!
}

input UpdateRoleInput {
  added_access_names: [String!]
  admin_role_id: String!
  admin_role_name: String
  enabled: Boolean
  remove_access_names: [String!]
}

type UserGameHistory {
  bet_amount: Float!
  category_name: String!
  cdate: DateTime!
  effective_bet_amount: Float!
  game_name: String!
  game_round_info_id: ID!
  is_processed: Boolean
  merchant_name: String!
  payout: Float
  player_id: String!
  tg_id: String!
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String!]
}

input Withdrawal_transactionsListRelationFilter {
  every: withdrawal_transactionsWhereInput
  none: withdrawal_transactionsWhereInput
  some: withdrawal_transactionsWhereInput
}

type admin_accesses {
  _count: Admin_accessesCount!
  access_name: String!
  admin_access_id: ID!
  admin_role_accesses: [admin_role_accesses!]
}

input admin_accessesCountOrderByAggregateInput {
  access_name: SortOrder
  admin_access_id: SortOrder
}

input admin_accessesMaxOrderByAggregateInput {
  access_name: SortOrder
  admin_access_id: SortOrder
}

input admin_accessesMinOrderByAggregateInput {
  access_name: SortOrder
  admin_access_id: SortOrder
}

input admin_accessesOrderByWithAggregationInput {
  _count: admin_accessesCountOrderByAggregateInput
  _max: admin_accessesMaxOrderByAggregateInput
  _min: admin_accessesMinOrderByAggregateInput
  access_name: SortOrder
  admin_access_id: SortOrder
}

input admin_accessesWhereInput {
  AND: [admin_accessesWhereInput!]
  NOT: [admin_accessesWhereInput!]
  OR: [admin_accessesWhereInput!]
  access_name: StringFilter
  admin_access_id: UuidFilter
  admin_role_accesses: Admin_role_accessesListRelationFilter
}

type admin_bank_accounts {
  _count: Admin_bank_accountsCount!
  account_number: String!
  admin_bank_account_id: ID!
  bank_name: String!
  cdate: DateTime!
  deposit_transactions: [deposit_transactions!]
  enabled: Boolean!
  holder_name: String!
  method: bank_method!
  udate: DateTime!
}

input admin_bank_accountsCountOrderByAggregateInput {
  account_number: SortOrder
  admin_bank_account_id: SortOrder
  bank_name: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  holder_name: SortOrder
  method: SortOrder
  udate: SortOrder
}

input admin_bank_accountsMaxOrderByAggregateInput {
  account_number: SortOrder
  admin_bank_account_id: SortOrder
  bank_name: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  holder_name: SortOrder
  method: SortOrder
  udate: SortOrder
}

input admin_bank_accountsMinOrderByAggregateInput {
  account_number: SortOrder
  admin_bank_account_id: SortOrder
  bank_name: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  holder_name: SortOrder
  method: SortOrder
  udate: SortOrder
}

input admin_bank_accountsOrderByWithAggregationInput {
  _count: admin_bank_accountsCountOrderByAggregateInput
  _max: admin_bank_accountsMaxOrderByAggregateInput
  _min: admin_bank_accountsMinOrderByAggregateInput
  account_number: SortOrder
  admin_bank_account_id: SortOrder
  bank_name: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  holder_name: SortOrder
  method: SortOrder
  udate: SortOrder
}

input admin_bank_accountsWhereInput {
  AND: [admin_bank_accountsWhereInput!]
  NOT: [admin_bank_accountsWhereInput!]
  OR: [admin_bank_accountsWhereInput!]
  account_number: StringFilter
  admin_bank_account_id: UuidFilter
  bank_name: StringFilter
  cdate: DateTimeFilter
  deposit_transactions: Deposit_transactionsListRelationFilter
  enabled: BoolFilter
  holder_name: StringFilter
  method: Enumbank_methodFilter
  udate: DateTimeFilter
}

type admin_login_logs {
  admin_id: String!
  admin_login_log_id: ID!
  admins: admins!
  ip: String!
  login_time: DateTime!
}

input admin_login_logsCountOrderByAggregateInput {
  admin_id: SortOrder
  admin_login_log_id: SortOrder
  ip: SortOrder
  login_time: SortOrder
}

input admin_login_logsMaxOrderByAggregateInput {
  admin_id: SortOrder
  admin_login_log_id: SortOrder
  ip: SortOrder
  login_time: SortOrder
}

input admin_login_logsMinOrderByAggregateInput {
  admin_id: SortOrder
  admin_login_log_id: SortOrder
  ip: SortOrder
  login_time: SortOrder
}

input admin_login_logsOrderByWithAggregationInput {
  _count: admin_login_logsCountOrderByAggregateInput
  _max: admin_login_logsMaxOrderByAggregateInput
  _min: admin_login_logsMinOrderByAggregateInput
  admin_id: SortOrder
  admin_login_log_id: SortOrder
  ip: SortOrder
  login_time: SortOrder
}

input admin_login_logsWhereInput {
  AND: [admin_login_logsWhereInput!]
  NOT: [admin_login_logsWhereInput!]
  OR: [admin_login_logsWhereInput!]
  admin_id: StringFilter
  admin_login_log_id: UuidFilter
  admins: AdminsRelationFilter
  ip: StringFilter
  login_time: DateTimeFilter
}

type admin_role_accesses {
  admin_access_id: String!
  admin_accesses: admin_accesses!
  admin_role_access_id: ID!
  admin_role_id: String!
  admin_roles: admin_roles!
  cdate: DateTime!
  created_by: String!
  enabled: Boolean!
  udate: DateTime!
  updated_by: String!
}

input admin_role_accessesOrderByRelationAggregateInput {
  _count: SortOrder
}

input admin_role_accessesWhereInput {
  AND: [admin_role_accessesWhereInput!]
  NOT: [admin_role_accessesWhereInput!]
  OR: [admin_role_accessesWhereInput!]
  admin_access_id: StringFilter
  admin_accesses: Admin_accessesRelationFilter
  admin_role_access_id: UuidFilter
  admin_role_id: UuidFilter
  admin_roles: Admin_rolesRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  enabled: BoolFilter
  udate: DateTimeFilter
  updated_by: StringFilter
}

type admin_roles {
  _count: Admin_rolesCount!
  admin_role_accesses: [admin_role_accesses!]
  admin_role_id: ID!
  admin_role_name: String!
  admins: [admins!]
  cdate: DateTime!
  created_by: String!
  enabled: Boolean!
  udate: DateTime!
}

input admin_rolesOrderByWithRelationInput {
  admin_role_accesses: admin_role_accessesOrderByRelationAggregateInput
  admin_role_id: SortOrder
  admin_role_name: SortOrder
  admins: adminsOrderByRelationAggregateInput
  cdate: SortOrder
  created_by: SortOrder
  enabled: SortOrder
  udate: SortOrder
}

input admin_rolesWhereInput {
  AND: [admin_rolesWhereInput!]
  NOT: [admin_rolesWhereInput!]
  OR: [admin_rolesWhereInput!]
  admin_role_accesses: Admin_role_accessesListRelationFilter
  admin_role_id: UuidFilter
  admin_role_name: StringFilter
  admins: AdminsListRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  enabled: BoolFilter
  udate: DateTimeFilter
}

type admins {
  _count: AdminsCount!
  admin_id: ID!
  admin_login_logs: [admin_login_logs!]
  admin_name: String!
  admin_password: String!
  admin_role_id: String!
  admin_roles: admin_roles!
  cdate: DateTime!
  created_by: String!
  deposit_transactions: [deposit_transactions!]
  enabled: Boolean!
  manual_adjustments: [manual_adjustments!]
  transfer_in_transactions: [transfer_in_transactions!]
  transfer_out_transactions: [transfer_out_transactions!]
  udate: DateTime!
  withdrawal_transactions: [withdrawal_transactions!]
}

input adminsCountOrderByAggregateInput {
  admin_id: SortOrder
  admin_name: SortOrder
  admin_password: SortOrder
  admin_role_id: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  enabled: SortOrder
  udate: SortOrder
}

input adminsMaxOrderByAggregateInput {
  admin_id: SortOrder
  admin_name: SortOrder
  admin_password: SortOrder
  admin_role_id: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  enabled: SortOrder
  udate: SortOrder
}

input adminsMinOrderByAggregateInput {
  admin_id: SortOrder
  admin_name: SortOrder
  admin_password: SortOrder
  admin_role_id: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  enabled: SortOrder
  udate: SortOrder
}

input adminsOrderByRelationAggregateInput {
  _count: SortOrder
}

input adminsOrderByWithAggregationInput {
  _count: adminsCountOrderByAggregateInput
  _max: adminsMaxOrderByAggregateInput
  _min: adminsMinOrderByAggregateInput
  admin_id: SortOrder
  admin_name: SortOrder
  admin_password: SortOrder
  admin_role_id: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  enabled: SortOrder
  udate: SortOrder
}

input adminsWhereInput {
  AND: [adminsWhereInput!]
  NOT: [adminsWhereInput!]
  OR: [adminsWhereInput!]
  admin_id: UuidFilter
  admin_login_logs: Admin_login_logsListRelationFilter
  admin_name: StringFilter
  admin_password: StringFilter
  admin_role_id: UuidFilter
  admin_roles: Admin_rolesRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  deposit_transactions: Deposit_transactionsListRelationFilter
  enabled: BoolFilter
  manual_adjustments: Manual_adjustmentsListRelationFilter
  transfer_in_transactions: Transfer_in_transactionsListRelationFilter
  transfer_out_transactions: Transfer_out_transactionsListRelationFilter
  udate: DateTimeFilter
  withdrawal_transactions: Withdrawal_transactionsListRelationFilter
}

type agent_rebate_rates {
  agent_id: String!
  agent_rebate_rate_id: ID!
  agents: agents!
  cdate: DateTime!
  created_by: String!
  is_active: Boolean!
  rebate: Float!
  rebate_category_id: Int!
}

input agent_rebate_ratesWhereInput {
  AND: [agent_rebate_ratesWhereInput!]
  NOT: [agent_rebate_ratesWhereInput!]
  OR: [agent_rebate_ratesWhereInput!]
  agent_id: StringFilter
  agent_rebate_rate_id: UuidFilter
  agents: AgentsRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  is_active: BoolFilter
  rebate: FloatFilter
  rebate_category_id: IntFilter
}

type agent_records_by_day {
  agent_id: String!
  agent_records_by_day_id: ID!
  agents: agents!
  cdate: DateTime!
  child_agent_id: String
  effective_bet_amount: Float!
  game_date: DateTime!
  game_pnl_expense: Float!
  game_pnl_income: Float!
  game_records_by_day_id: String!
  is_active: Boolean!
  player_id: String!
  rebate_category_id: Int!
  rebate_expense: Float!
  rebate_income: Float!
  udate: DateTime!
}

input agent_records_by_dayWhereInput {
  AND: [agent_records_by_dayWhereInput!]
  NOT: [agent_records_by_dayWhereInput!]
  OR: [agent_records_by_dayWhereInput!]
  agent_id: StringFilter
  agent_records_by_day_id: UuidFilter
  agents: AgentsRelationFilter
  cdate: DateTimeFilter
  child_agent_id: StringNullableFilter
  effective_bet_amount: FloatFilter
  game_date: DateTimeFilter
  game_pnl_expense: FloatFilter
  game_pnl_income: FloatFilter
  game_records_by_day_id: StringFilter
  is_active: BoolFilter
  player_id: StringFilter
  rebate_category_id: IntFilter
  rebate_expense: FloatFilter
  rebate_income: FloatFilter
  udate: DateTimeFilter
}

type agent_shares {
  agent_id: String!
  agent_share_id: ID!
  agents: agents!
  cdate: DateTime!
  created_by: String!
  is_active: Boolean!
  shares: Float!
}

input agent_sharesWhereInput {
  AND: [agent_sharesWhereInput!]
  NOT: [agent_sharesWhereInput!]
  OR: [agent_sharesWhereInput!]
  agent_id: StringFilter
  agent_share_id: UuidFilter
  agents: AgentsRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  is_active: BoolFilter
  shares: FloatFilter
}

type agents {
  _count: AgentsCount!
  agent_id: ID!
  agent_name: String!
  agent_password: String!
  agent_rebate_rates: [agent_rebate_rates!]
  agent_records_by_day: [agent_records_by_day!]
  agent_shares: [agent_shares!]
  cdate: DateTime!
  children: [agents!]
  created_by: String!
  domain: String
  enabled: Boolean!
  parent: agents
  parent_agent_id: String
  players: [players!]
  udate: DateTime!
}

input agentsCountOrderByAggregateInput {
  agent_id: SortOrder
  agent_name: SortOrder
  agent_password: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  domain: SortOrder
  enabled: SortOrder
  parent_agent_id: SortOrder
  udate: SortOrder
}

input agentsMaxOrderByAggregateInput {
  agent_id: SortOrder
  agent_name: SortOrder
  agent_password: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  domain: SortOrder
  enabled: SortOrder
  parent_agent_id: SortOrder
  udate: SortOrder
}

input agentsMinOrderByAggregateInput {
  agent_id: SortOrder
  agent_name: SortOrder
  agent_password: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  domain: SortOrder
  enabled: SortOrder
  parent_agent_id: SortOrder
  udate: SortOrder
}

input agentsOrderByWithAggregationInput {
  _count: agentsCountOrderByAggregateInput
  _max: agentsMaxOrderByAggregateInput
  _min: agentsMinOrderByAggregateInput
  agent_id: SortOrder
  agent_name: SortOrder
  agent_password: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  domain: SortOrderInput
  enabled: SortOrder
  parent_agent_id: SortOrderInput
  udate: SortOrder
}

input agentsWhereInput {
  AND: [agentsWhereInput!]
  NOT: [agentsWhereInput!]
  OR: [agentsWhereInput!]
  agent_id: UuidFilter
  agent_name: StringFilter
  agent_password: StringFilter
  agent_rebate_rates: Agent_rebate_ratesListRelationFilter
  agent_records_by_day: Agent_records_by_dayListRelationFilter
  agent_shares: Agent_sharesListRelationFilter
  cdate: DateTimeFilter
  children: AgentsListRelationFilter
  created_by: StringFilter
  domain: StringNullableFilter
  enabled: BoolFilter
  parent: AgentsNullableRelationFilter
  parent_agent_id: StringNullableFilter
  players: PlayersListRelationFilter
  udate: DateTimeFilter
}

enum bank_method {
  BANK
  FPS
  USDT
}

type banks {
  bank_code: String!
  bank_id: ID!
  bank_name: String!
}

type deposit_transactions {
  admin_bank_account: admin_bank_accounts!
  admin_bank_account_id: String!
  cdate: DateTime!
  comment: String
  deposit_transaction_id: ID!
  game_amount: Float!
  game_currency: game_currency!
  player_id: String!
  player_remarks: String!
  players: players!
  process_time: DateTime
  processed_by: String
  processed_by_admin: admins
  status: wallet_transaction_status!
  trans_date: DateTime!
  transaction_amount: Float!
  transaction_currency: real_currency!
  udate: DateTime!
}

input deposit_transactionsAvgOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input deposit_transactionsCountOrderByAggregateInput {
  admin_bank_account_id: SortOrder
  cdate: SortOrder
  comment: SortOrder
  deposit_transaction_id: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
}

input deposit_transactionsMaxOrderByAggregateInput {
  admin_bank_account_id: SortOrder
  cdate: SortOrder
  comment: SortOrder
  deposit_transaction_id: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
}

input deposit_transactionsMinOrderByAggregateInput {
  admin_bank_account_id: SortOrder
  cdate: SortOrder
  comment: SortOrder
  deposit_transaction_id: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
}

input deposit_transactionsOrderByWithAggregationInput {
  _avg: deposit_transactionsAvgOrderByAggregateInput
  _count: deposit_transactionsCountOrderByAggregateInput
  _max: deposit_transactionsMaxOrderByAggregateInput
  _min: deposit_transactionsMinOrderByAggregateInput
  _sum: deposit_transactionsSumOrderByAggregateInput
  admin_bank_account_id: SortOrder
  cdate: SortOrder
  comment: SortOrderInput
  deposit_transaction_id: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrderInput
  processed_by: SortOrderInput
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
}

input deposit_transactionsSumOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input deposit_transactionsWhereInput {
  AND: [deposit_transactionsWhereInput!]
  NOT: [deposit_transactionsWhereInput!]
  OR: [deposit_transactionsWhereInput!]
  admin_bank_account: Admin_bank_accountsRelationFilter
  admin_bank_account_id: StringFilter
  cdate: DateTimeFilter
  comment: StringNullableFilter
  deposit_transaction_id: UuidFilter
  game_amount: FloatFilter
  game_currency: Enumgame_currencyFilter
  player_id: StringFilter
  player_remarks: StringFilter
  players: PlayersRelationFilter
  process_time: DateTimeNullableFilter
  processed_by: StringNullableFilter
  processed_by_admin: AdminsNullableRelationFilter
  status: Enumwallet_transaction_statusFilter
  trans_date: DateTimeFilter
  transaction_amount: FloatFilter
  transaction_currency: Enumreal_currencyFilter
  udate: DateTimeFilter
}

type fl_categories {
  _count: Fl_categoriesCount!
  category_id: Int!
  category_name: String!
  cdate: DateTime!
  csort: Int!
  enabled: Boolean!
  fl_categories_id: ID!
  game_record_rounds: [game_record_rounds!]
  rebate_priority: Int
  udate: DateTime!
}

input fl_categoriesWhereInput {
  AND: [fl_categoriesWhereInput!]
  NOT: [fl_categoriesWhereInput!]
  OR: [fl_categoriesWhereInput!]
  category_id: IntFilter
  category_name: StringFilter
  cdate: DateTimeFilter
  csort: IntFilter
  enabled: BoolFilter
  fl_categories_id: UuidFilter
  game_record_rounds: Game_record_roundsListRelationFilter
  rebate_priority: IntNullableFilter
  udate: DateTimeFilter
}

enum game_currency {
  fHKD
}

type game_record_rounds {
  bet_amount: Float
  category: fl_categories!
  effective_bet_amount: Float
  game_date: DateTime!
  game_records_by_period_id: String!
  game_round: game_round_infos!
  game_round_info_id: String!
  game_url: String!
  is_processed: Boolean!
  payout: Float!
  player: players!
  player_id: String!
  rebate_category_id: Int!
}

input game_record_roundsWhereInput {
  AND: [game_record_roundsWhereInput!]
  NOT: [game_record_roundsWhereInput!]
  OR: [game_record_roundsWhereInput!]
  bet_amount: FloatNullableFilter
  category: Fl_categoriesRelationFilter
  effective_bet_amount: FloatNullableFilter
  game_date: DateTimeFilter
  game_records_by_period_id: StringFilter
  game_round: Game_round_infosRelationFilter
  game_round_info_id: StringFilter
  game_url: StringFilter
  is_processed: BoolFilter
  payout: FloatFilter
  player: PlayersRelationFilter
  player_id: StringFilter
  rebate_category_id: IntFilter
}

type game_round_infos {
  _count: Game_round_infosCount!
  cdate: DateTime!
  game_extra: String
  game_id: String!
  game_record_rounds: [game_record_rounds!]
  game_round_info_id: ID!
  i_extparam: String
  i_gamedesc: String!
  player_id: String!
}

input game_round_infosWhereInput {
  AND: [game_round_infosWhereInput!]
  NOT: [game_round_infosWhereInput!]
  OR: [game_round_infosWhereInput!]
  cdate: DateTimeFilter
  game_extra: StringNullableFilter
  game_id: StringFilter
  game_record_rounds: Game_record_roundsListRelationFilter
  game_round_info_id: UuidFilter
  i_extparam: StringNullableFilter
  i_gamedesc: StringFilter
  player_id: StringFilter
}

type manual_adjustments {
  admins: admins!
  amount: Float!
  cdate: DateTime!
  created_by: String!
  manual_adjustment_id: ID!
  player_id: String!
  players: players!
  reason: String!
}

input manual_adjustmentsAvgOrderByAggregateInput {
  amount: SortOrder
}

input manual_adjustmentsCountOrderByAggregateInput {
  amount: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  manual_adjustment_id: SortOrder
  player_id: SortOrder
  reason: SortOrder
}

input manual_adjustmentsMaxOrderByAggregateInput {
  amount: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  manual_adjustment_id: SortOrder
  player_id: SortOrder
  reason: SortOrder
}

input manual_adjustmentsMinOrderByAggregateInput {
  amount: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  manual_adjustment_id: SortOrder
  player_id: SortOrder
  reason: SortOrder
}

input manual_adjustmentsOrderByWithAggregationInput {
  _avg: manual_adjustmentsAvgOrderByAggregateInput
  _count: manual_adjustmentsCountOrderByAggregateInput
  _max: manual_adjustmentsMaxOrderByAggregateInput
  _min: manual_adjustmentsMinOrderByAggregateInput
  _sum: manual_adjustmentsSumOrderByAggregateInput
  amount: SortOrder
  cdate: SortOrder
  created_by: SortOrder
  manual_adjustment_id: SortOrder
  player_id: SortOrder
  reason: SortOrder
}

input manual_adjustmentsSumOrderByAggregateInput {
  amount: SortOrder
}

input manual_adjustmentsWhereInput {
  AND: [manual_adjustmentsWhereInput!]
  NOT: [manual_adjustmentsWhereInput!]
  OR: [manual_adjustmentsWhereInput!]
  admins: AdminsRelationFilter
  amount: FloatFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  manual_adjustment_id: UuidFilter
  player_id: StringFilter
  players: PlayersRelationFilter
  reason: StringFilter
}

type player_bank_accounts {
  _count: Player_bank_accountsCount!
  account_number: String!
  bank_name: String!
  cdate: DateTime!
  enabled: Boolean!
  holder_name: String!
  method: bank_method!
  player_bank_account_id: ID!
  player_id: String!
  udate: DateTime!
  withdrawal_transactions: [withdrawal_transactions!]
}

input player_bank_accountsWhereInput {
  AND: [player_bank_accountsWhereInput!]
  NOT: [player_bank_accountsWhereInput!]
  OR: [player_bank_accountsWhereInput!]
  account_number: StringFilter
  bank_name: StringFilter
  cdate: DateTimeFilter
  enabled: BoolFilter
  holder_name: StringFilter
  method: Enumbank_methodFilter
  player_bank_account_id: UuidFilter
  player_id: StringFilter
  udate: DateTimeFilter
  withdrawal_transactions: Withdrawal_transactionsListRelationFilter
}

type player_default_rebate_rates {
  agent_id: String!
  cdate: DateTime!
  created_by: String!
  is_active: Boolean!
  player_default_rebate_rate_id: ID!
  rebate: Float!
  rebate_category_id: Int!
}

type player_login_logs {
  ip: String!
  login_time: DateTime!
  player_id: String!
  player_login_log_id: ID!
  players: players!
}

input player_login_logsCountOrderByAggregateInput {
  ip: SortOrder
  login_time: SortOrder
  player_id: SortOrder
  player_login_log_id: SortOrder
}

input player_login_logsMaxOrderByAggregateInput {
  ip: SortOrder
  login_time: SortOrder
  player_id: SortOrder
  player_login_log_id: SortOrder
}

input player_login_logsMinOrderByAggregateInput {
  ip: SortOrder
  login_time: SortOrder
  player_id: SortOrder
  player_login_log_id: SortOrder
}

input player_login_logsOrderByWithAggregationInput {
  _count: player_login_logsCountOrderByAggregateInput
  _max: player_login_logsMaxOrderByAggregateInput
  _min: player_login_logsMinOrderByAggregateInput
  ip: SortOrder
  login_time: SortOrder
  player_id: SortOrder
  player_login_log_id: SortOrder
}

input player_login_logsWhereInput {
  AND: [player_login_logsWhereInput!]
  NOT: [player_login_logsWhereInput!]
  OR: [player_login_logsWhereInput!]
  ip: StringFilter
  login_time: DateTimeFilter
  player_id: StringFilter
  player_login_log_id: UuidFilter
  players: PlayersRelationFilter
}

type player_rebate_rates {
  cdate: DateTime!
  created_by: String!
  is_active: Boolean!
  player_id: String!
  player_rebate_rate_id: ID!
  rebate: Float!
  rebate_category_id: Int!
}

type player_wallets {
  amount: Float!
  cdate: DateTime
  currency: game_currency!
  frozen_amount: Float!
  player: players!
  player_id: String!
  player_wallet_id: ID!
  udate: DateTime
}

input player_walletsWhereInput {
  AND: [player_walletsWhereInput!]
  NOT: [player_walletsWhereInput!]
  OR: [player_walletsWhereInput!]
  amount: FloatFilter
  cdate: DateTimeNullableFilter
  currency: Enumgame_currencyFilter
  frozen_amount: FloatFilter
  player: PlayersRelationFilter
  player_id: StringFilter
  player_wallet_id: UuidFilter
  udate: DateTimeNullableFilter
}

type players {
  _count: PlayersCount!
  agent: agents!
  agent_id: String!
  cdate: DateTime!
  deposit_transactions: [deposit_transactions!]
  enabled: Boolean!
  fundist_password: String!
  game_record_rounds: [game_record_rounds!]
  manual_adjustments: [manual_adjustments!]
  name: String
  password: String!
  player_id: ID!
  player_login_logs: [player_login_logs!]
  rebate_transactions: [rebate_transactions!]
  reg_date: DateTime!
  registration_ip: String!
  tg_first_name: String!
  tg_id: String!
  tg_last_name: String!
  tg_photo_url: String
  tg_username: String
  transfer_in_transactions: [transfer_in_transactions!]
  transfer_out_transactions: [transfer_out_transactions!]
  udate: DateTime!
  user_language: String!
  wallet: player_wallets
  withdrawal_transactions: [withdrawal_transactions!]
}

input playersCountOrderByAggregateInput {
  agent_id: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  fundist_password: SortOrder
  name: SortOrder
  password: SortOrder
  player_id: SortOrder
  reg_date: SortOrder
  registration_ip: SortOrder
  tg_first_name: SortOrder
  tg_id: SortOrder
  tg_last_name: SortOrder
  tg_photo_url: SortOrder
  tg_username: SortOrder
  udate: SortOrder
  user_language: SortOrder
}

input playersMaxOrderByAggregateInput {
  agent_id: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  fundist_password: SortOrder
  name: SortOrder
  password: SortOrder
  player_id: SortOrder
  reg_date: SortOrder
  registration_ip: SortOrder
  tg_first_name: SortOrder
  tg_id: SortOrder
  tg_last_name: SortOrder
  tg_photo_url: SortOrder
  tg_username: SortOrder
  udate: SortOrder
  user_language: SortOrder
}

input playersMinOrderByAggregateInput {
  agent_id: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  fundist_password: SortOrder
  name: SortOrder
  password: SortOrder
  player_id: SortOrder
  reg_date: SortOrder
  registration_ip: SortOrder
  tg_first_name: SortOrder
  tg_id: SortOrder
  tg_last_name: SortOrder
  tg_photo_url: SortOrder
  tg_username: SortOrder
  udate: SortOrder
  user_language: SortOrder
}

input playersOrderByWithAggregationInput {
  _count: playersCountOrderByAggregateInput
  _max: playersMaxOrderByAggregateInput
  _min: playersMinOrderByAggregateInput
  agent_id: SortOrder
  cdate: SortOrder
  enabled: SortOrder
  fundist_password: SortOrder
  name: SortOrderInput
  password: SortOrder
  player_id: SortOrder
  reg_date: SortOrder
  registration_ip: SortOrder
  tg_first_name: SortOrder
  tg_id: SortOrder
  tg_last_name: SortOrder
  tg_photo_url: SortOrderInput
  tg_username: SortOrderInput
  udate: SortOrder
  user_language: SortOrder
}

input playersWhereInput {
  AND: [playersWhereInput!]
  NOT: [playersWhereInput!]
  OR: [playersWhereInput!]
  agent: AgentsRelationFilter
  agent_id: StringFilter
  cdate: DateTimeFilter
  deposit_transactions: Deposit_transactionsListRelationFilter
  enabled: BoolFilter
  fundist_password: StringFilter
  game_record_rounds: Game_record_roundsListRelationFilter
  manual_adjustments: Manual_adjustmentsListRelationFilter
  name: StringNullableFilter
  password: StringFilter
  player_id: UuidFilter
  player_login_logs: Player_login_logsListRelationFilter
  rebate_transactions: Rebate_transactionsListRelationFilter
  reg_date: DateTimeFilter
  registration_ip: StringFilter
  tg_first_name: StringFilter
  tg_id: StringFilter
  tg_last_name: StringFilter
  tg_photo_url: StringNullableFilter
  tg_username: StringNullableFilter
  transfer_in_transactions: Transfer_in_transactionsListRelationFilter
  transfer_out_transactions: Transfer_out_transactionsListRelationFilter
  udate: DateTimeFilter
  user_language: StringFilter
  wallet: Player_walletsNullableRelationFilter
  withdrawal_transactions: Withdrawal_transactionsListRelationFilter
}

enum real_currency {
  HKD
  USDT
}

type rebate_transactions {
  amount: Int!
  bonus_type: String
  cdate: DateTime!
  description: String
  player: players!
  player_id: String!
  rebate_transaction_id: ID!
  trans_date: DateTime!
}

input rebate_transactionsAvgOrderByAggregateInput {
  amount: SortOrder
}

input rebate_transactionsCountOrderByAggregateInput {
  amount: SortOrder
  bonus_type: SortOrder
  cdate: SortOrder
  description: SortOrder
  player_id: SortOrder
  rebate_transaction_id: SortOrder
  trans_date: SortOrder
}

input rebate_transactionsMaxOrderByAggregateInput {
  amount: SortOrder
  bonus_type: SortOrder
  cdate: SortOrder
  description: SortOrder
  player_id: SortOrder
  rebate_transaction_id: SortOrder
  trans_date: SortOrder
}

input rebate_transactionsMinOrderByAggregateInput {
  amount: SortOrder
  bonus_type: SortOrder
  cdate: SortOrder
  description: SortOrder
  player_id: SortOrder
  rebate_transaction_id: SortOrder
  trans_date: SortOrder
}

input rebate_transactionsOrderByWithAggregationInput {
  _avg: rebate_transactionsAvgOrderByAggregateInput
  _count: rebate_transactionsCountOrderByAggregateInput
  _max: rebate_transactionsMaxOrderByAggregateInput
  _min: rebate_transactionsMinOrderByAggregateInput
  _sum: rebate_transactionsSumOrderByAggregateInput
  amount: SortOrder
  bonus_type: SortOrderInput
  cdate: SortOrder
  description: SortOrderInput
  player_id: SortOrder
  rebate_transaction_id: SortOrder
  trans_date: SortOrder
}

input rebate_transactionsSumOrderByAggregateInput {
  amount: SortOrder
}

input rebate_transactionsWhereInput {
  AND: [rebate_transactionsWhereInput!]
  NOT: [rebate_transactionsWhereInput!]
  OR: [rebate_transactionsWhereInput!]
  amount: IntFilter
  bonus_type: StringNullableFilter
  cdate: DateTimeFilter
  description: StringNullableFilter
  player: PlayersRelationFilter
  player_id: StringFilter
  rebate_transaction_id: UuidFilter
  trans_date: DateTimeFilter
}

type statsAmount {
  reg_date: DateTime
  sum: Float
  trans_date: DateTime
  transaction_count: Float
}

input statsWhereInput {
  reg_date: DateTimeFilter
  trans_date: DateTimeFilter
}

enum transactionType {
  DEPOSIT
  TRANSFER_IN
  TRANSFER_OUT
  WITHDRAWAL
}

type transfer_in_transactions {
  cdate: DateTime!
  comment: String
  counterpart_platform: String!
  counterpart_username: String!
  game_amount: Float!
  game_currency: game_currency!
  player: players!
  player_id: String!
  player_remarks: String!
  process_time: DateTime
  processed_by: String
  processed_by_admin: admins
  status: wallet_transaction_status!
  trans_date: DateTime!
  transaction_amount: Float!
  transaction_currency: real_currency!
  transfer_in_transaction_id: ID!
  udate: DateTime!
}

input transfer_in_transactionsAvgOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input transfer_in_transactionsCountOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_in_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_in_transactionsMaxOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_in_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_in_transactionsMinOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_in_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_in_transactionsOrderByWithAggregationInput {
  _avg: transfer_in_transactionsAvgOrderByAggregateInput
  _count: transfer_in_transactionsCountOrderByAggregateInput
  _max: transfer_in_transactionsMaxOrderByAggregateInput
  _min: transfer_in_transactionsMinOrderByAggregateInput
  _sum: transfer_in_transactionsSumOrderByAggregateInput
  cdate: SortOrder
  comment: SortOrderInput
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrderInput
  processed_by: SortOrderInput
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_in_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_in_transactionsSumOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input transfer_in_transactionsWhereInput {
  AND: [transfer_in_transactionsWhereInput!]
  NOT: [transfer_in_transactionsWhereInput!]
  OR: [transfer_in_transactionsWhereInput!]
  cdate: DateTimeFilter
  comment: StringNullableFilter
  counterpart_platform: StringFilter
  counterpart_username: StringFilter
  game_amount: FloatFilter
  game_currency: Enumgame_currencyFilter
  player: PlayersRelationFilter
  player_id: StringFilter
  player_remarks: StringFilter
  process_time: DateTimeNullableFilter
  processed_by: StringNullableFilter
  processed_by_admin: AdminsNullableRelationFilter
  status: Enumwallet_transaction_statusFilter
  trans_date: DateTimeFilter
  transaction_amount: FloatFilter
  transaction_currency: Enumreal_currencyFilter
  transfer_in_transaction_id: UuidFilter
  udate: DateTimeFilter
}

type transfer_out_transactions {
  cdate: DateTime!
  comment: String
  counterpart_platform: String!
  counterpart_username: String!
  game_amount: Float!
  game_currency: game_currency!
  player: players!
  player_id: String!
  player_remarks: String!
  process_time: DateTime
  processed_by: String
  processed_by_admin: admins
  status: wallet_transaction_status!
  trans_date: DateTime!
  transaction_amount: Float!
  transaction_currency: real_currency!
  transfer_out_transaction_id: ID!
  udate: DateTime!
}

input transfer_out_transactionsAvgOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input transfer_out_transactionsCountOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_out_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_out_transactionsMaxOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_out_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_out_transactionsMinOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_out_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_out_transactionsOrderByWithAggregationInput {
  _avg: transfer_out_transactionsAvgOrderByAggregateInput
  _count: transfer_out_transactionsCountOrderByAggregateInput
  _max: transfer_out_transactionsMaxOrderByAggregateInput
  _min: transfer_out_transactionsMinOrderByAggregateInput
  _sum: transfer_out_transactionsSumOrderByAggregateInput
  cdate: SortOrder
  comment: SortOrderInput
  counterpart_platform: SortOrder
  counterpart_username: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrderInput
  processed_by: SortOrderInput
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  transfer_out_transaction_id: SortOrder
  udate: SortOrder
}

input transfer_out_transactionsSumOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input transfer_out_transactionsWhereInput {
  AND: [transfer_out_transactionsWhereInput!]
  NOT: [transfer_out_transactionsWhereInput!]
  OR: [transfer_out_transactionsWhereInput!]
  cdate: DateTimeFilter
  comment: StringNullableFilter
  counterpart_platform: StringFilter
  counterpart_username: StringFilter
  game_amount: FloatFilter
  game_currency: Enumgame_currencyFilter
  player: PlayersRelationFilter
  player_id: StringFilter
  player_remarks: StringFilter
  process_time: DateTimeNullableFilter
  processed_by: StringNullableFilter
  processed_by_admin: AdminsNullableRelationFilter
  status: Enumwallet_transaction_statusFilter
  trans_date: DateTimeFilter
  transaction_amount: FloatFilter
  transaction_currency: Enumreal_currencyFilter
  transfer_out_transaction_id: UuidFilter
  udate: DateTimeFilter
}

enum wallet_transaction_status {
  CANCELLED
  PENDING
  REJECTED
  SUCCESS
}

type withdrawal_transactions {
  cdate: DateTime!
  comment: String
  game_amount: Float!
  game_currency: game_currency!
  player_bank_account: player_bank_accounts!
  player_bank_account_id: String!
  player_id: String!
  player_remarks: String!
  players: players!
  process_time: DateTime
  processed_by: String
  processed_by_admin: admins
  status: wallet_transaction_status!
  trans_date: DateTime!
  transaction_amount: Float!
  transaction_currency: real_currency!
  udate: DateTime!
  withdrawal_transaction_id: ID!
}

input withdrawal_transactionsAvgOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input withdrawal_transactionsCountOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_bank_account_id: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
  withdrawal_transaction_id: SortOrder
}

input withdrawal_transactionsMaxOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_bank_account_id: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
  withdrawal_transaction_id: SortOrder
}

input withdrawal_transactionsMinOrderByAggregateInput {
  cdate: SortOrder
  comment: SortOrder
  game_amount: SortOrder
  game_currency: SortOrder
  player_bank_account_id: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrder
  processed_by: SortOrder
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
  withdrawal_transaction_id: SortOrder
}

input withdrawal_transactionsOrderByWithAggregationInput {
  _avg: withdrawal_transactionsAvgOrderByAggregateInput
  _count: withdrawal_transactionsCountOrderByAggregateInput
  _max: withdrawal_transactionsMaxOrderByAggregateInput
  _min: withdrawal_transactionsMinOrderByAggregateInput
  _sum: withdrawal_transactionsSumOrderByAggregateInput
  cdate: SortOrder
  comment: SortOrderInput
  game_amount: SortOrder
  game_currency: SortOrder
  player_bank_account_id: SortOrder
  player_id: SortOrder
  player_remarks: SortOrder
  process_time: SortOrderInput
  processed_by: SortOrderInput
  status: SortOrder
  trans_date: SortOrder
  transaction_amount: SortOrder
  transaction_currency: SortOrder
  udate: SortOrder
  withdrawal_transaction_id: SortOrder
}

input withdrawal_transactionsSumOrderByAggregateInput {
  game_amount: SortOrder
  transaction_amount: SortOrder
}

input withdrawal_transactionsWhereInput {
  AND: [withdrawal_transactionsWhereInput!]
  NOT: [withdrawal_transactionsWhereInput!]
  OR: [withdrawal_transactionsWhereInput!]
  cdate: DateTimeFilter
  comment: StringNullableFilter
  game_amount: FloatFilter
  game_currency: Enumgame_currencyFilter
  player_bank_account: Player_bank_accountsRelationFilter
  player_bank_account_id: StringFilter
  player_id: StringFilter
  player_remarks: StringFilter
  players: PlayersRelationFilter
  process_time: DateTimeNullableFilter
  processed_by: StringNullableFilter
  processed_by_admin: AdminsNullableRelationFilter
  status: Enumwallet_transaction_statusFilter
  trans_date: DateTimeFilter
  transaction_amount: FloatFilter
  transaction_currency: Enumreal_currencyFilter
  udate: DateTimeFilter
  withdrawal_transaction_id: UuidFilter
}