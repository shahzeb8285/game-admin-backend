# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin_accessesCount {
  admin_role_accesses: Int!
}

input Admin_accessesRelationFilter {
  is: admin_accessesWhereInput
  isNot: admin_accessesWhereInput
}

type Admin_bank_accountsCount {
  deposit_transactions: Int!
}

input Admin_bank_accountsRelationFilter {
  is: admin_bank_accountsWhereInput
  isNot: admin_bank_accountsWhereInput
}

input Admin_login_logsListRelationFilter {
  every: admin_login_logsWhereInput
  none: admin_login_logsWhereInput
  some: admin_login_logsWhereInput
}

input Admin_role_accessesListRelationFilter {
  every: admin_role_accessesWhereInput
  none: admin_role_accessesWhereInput
  some: admin_role_accessesWhereInput
}

type Admin_rolesCount {
  admin_role_accesses: Int!
  admins: Int!
}

input Admin_rolesRelationFilter {
  is: admin_rolesWhereInput
  isNot: admin_rolesWhereInput
}

type AdminsCount {
  admin_login_logs: Int!
  manual_adjustments: Int!
}

input AdminsListRelationFilter {
  every: adminsWhereInput
  none: adminsWhereInput
  some: adminsWhereInput
}

input AdminsRelationFilter {
  is: adminsWhereInput
  isNot: adminsWhereInput
}

input Agent_rebate_ratesListRelationFilter {
  every: agent_rebate_ratesWhereInput
  none: agent_rebate_ratesWhereInput
  some: agent_rebate_ratesWhereInput
}

input Agent_records_by_dayListRelationFilter {
  every: agent_records_by_dayWhereInput
  none: agent_records_by_dayWhereInput
  some: agent_records_by_dayWhereInput
}

input Agent_sharesListRelationFilter {
  every: agent_sharesWhereInput
  none: agent_sharesWhereInput
  some: agent_sharesWhereInput
}

type AgentsCount {
  agent_rebate_rates: Int!
  agent_records_by_day: Int!
  agent_shares: Int!
  children: Int!
  players: Int!
}

input AgentsListRelationFilter {
  every: agentsWhereInput
  none: agentsWhereInput
  some: agentsWhereInput
}

input AgentsNullableRelationFilter {
  is: agentsWhereInput
  isNot: agentsWhereInput
}

input AgentsRelationFilter {
  is: agentsWhereInput
  isNot: agentsWhereInput
}

type Auth {
  """JWT access token"""
  access_token: JWT!

  """JWT refresh token"""
  refresh_token: JWT!
  user: admins!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type CountDto {
  counts: Int!
}

input CreateAdminInput {
  admin_name: String!
  admin_password: String!
  admin_roles_id: String!
}

input CreateAgentInput {
  agent_name: String!
  agent_password: String!
  parent_agent_id: String
}

input CreateBankAccountInput {
  account_number: String!
  bank_name: String!
  enabled: Boolean
  holder_name: String!
  method: String!
}

input CreateManualAdjustment {
  amount: Float!
  cdate: DateTime
  player_id: String!
  reason: String!
}

input CreateRoleInput {
  admin_role_name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input Deposit_transactionsListRelationFilter {
  every: deposit_transactionsWhereInput
  none: deposit_transactionsWhereInput
  some: deposit_transactionsWhereInput
}

input Enumbank_methodFilter {
  equals: bank_method
  in: [bank_method!]
  not: NestedEnumbank_methodFilter
  notIn: [bank_method!]
}

input Enumgame_currencyFilter {
  equals: game_currency
  in: [game_currency!]
  not: NestedEnumgame_currencyFilter
  notIn: [game_currency!]
}

input Enumreal_currencyFilter {
  equals: real_currency
  in: [real_currency!]
  not: NestedEnumreal_currencyFilter
  notIn: [real_currency!]
}

input Enumwallet_transaction_statusFilter {
  equals: wallet_transaction_status
  in: [wallet_transaction_status!]
  not: NestedEnumwallet_transaction_statusFilter
  notIn: [wallet_transaction_status!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  admin_name: String!
  password: String!
}

input Manual_adjustmentsListRelationFilter {
  every: manual_adjustmentsWhereInput
  none: manual_adjustmentsWhereInput
  some: manual_adjustmentsWhereInput
}

type Mutation {
  createAdmin(data: CreateAdminInput!): admins!
  createAdminRole(data: CreateRoleInput!): admin_roles!
  createAgent(data: CreateAgentInput!): agents!
  createBankAccount(data: CreateBankAccountInput!): admin_bank_accounts!
  createManualAdjustment(data: CreateManualAdjustment!): manual_adjustments!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  updateAdmin(data: UpdateAdminInput!): admins!
  updateAdminRole(data: UpdateRoleInput!): admin_roles!
  updateAgent(data: UpdateAgentInput!): agents!
  updateBankAccount(data: UpdateBankAccountInput!): admin_bank_accounts!
  updateDeposit(data: UpdateFinanceInput!): deposit_transactions!
  updateUser(data: UpdatePlayerInput!): players!
  updateWithdrawal(data: UpdateFinanceInput!): withdrawal_transactions!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumbank_methodFilter {
  equals: bank_method
  in: [bank_method!]
  not: NestedEnumbank_methodFilter
  notIn: [bank_method!]
}

input NestedEnumgame_currencyFilter {
  equals: game_currency
  in: [game_currency!]
  not: NestedEnumgame_currencyFilter
  notIn: [game_currency!]
}

input NestedEnumreal_currencyFilter {
  equals: real_currency
  in: [real_currency!]
  not: NestedEnumreal_currencyFilter
  notIn: [real_currency!]
}

input NestedEnumwallet_transaction_statusFilter {
  equals: wallet_transaction_status
  in: [wallet_transaction_status!]
  not: NestedEnumwallet_transaction_statusFilter
  notIn: [wallet_transaction_status!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String!]
}

type Player_bank_accountsCount {
  withdrawal_transactions: Int!
}

input Player_bank_accountsRelationFilter {
  is: player_bank_accountsWhereInput
  isNot: player_bank_accountsWhereInput
}

input Player_login_logsListRelationFilter {
  every: player_login_logsWhereInput
  none: player_login_logsWhereInput
  some: player_login_logsWhereInput
}

type PlayersCount {
  deposit_transactions: Int!
  player_login_logs: Int!
  withdrawal_transactions: Int!
}

input PlayersListRelationFilter {
  every: playersWhereInput
  none: playersWhereInput
  some: playersWhereInput
}

input PlayersRelationFilter {
  is: playersWhereInput
  isNot: playersWhereInput
}

type Query {
  adminBankAccounts(skip: Int! = 0, take: Int! = 10, where: admin_bank_accountsWhereInput! = {}): [admin_bank_accounts!]!
  adminCount: CountDto!
  adminLoginCount: CountDto!
  adminRolesCount: CountDto!
  admins(skip: Int! = 0, take: Int! = 10, where: adminsWhereInput! = {}): [admins!]!
  agents(skip: Int! = 0, take: Int! = 10, where: agentsWhereInput! = {}): [agents!]!
  agentsCount: CountDto!
  bankAccountCount: CountDto!
  deposits(skip: Int! = 0, take: Int! = 10, where: deposit_transactionsWhereInput! = {}): [deposit_transactions!]!
  depositsCount: CountDto!
  gamerebates: [admin_bank_accounts!]!
  getAccesses(skip: Int! = 0, take: Int! = 10, where: admin_accessesWhereInput! = {}): [admin_accesses!]!
  getAdminsLoginHistory(skip: Int! = 0, take: Int! = 10, where: admin_login_logsWhereInput! = {}): [admin_login_logs!]!
  getAdminsRoles(skip: Int! = 0, take: Int! = 10, where: admin_rolesWhereInput! = {}): [admin_roles!]!
  getMe: admins!
  getUserLoginHistory(skip: Int! = 0, take: Int! = 10, where: player_login_logsWhereInput! = {}): [player_login_logs!]!
  getUsersBonusHistory(skip: Int! = 0, take: Int! = 10, where: manual_adjustmentsWhereInput! = {}): [players!]!
  manualAdjustmentCount: CountDto!
  manualadjustments(skip: Int! = 0, take: Int! = 10, where: manual_adjustmentsWhereInput! = {}): [manual_adjustments!]!
  players(skip: Int! = 0, take: Int! = 10, where: playersWhereInput! = {}): [players!]!
  usersCount: CountDto!
  usersLoginCount: CountDto!
  withdrawalCount: CountDto!
  withdrawals(skip: Int! = 0, take: Int! = 10, where: withdrawal_transactionsWhereInput! = {}): [withdrawal_transactions!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Token {
  """JWT access token"""
  access_token: JWT!

  """JWT refresh token"""
  refresh_token: JWT!
}

input UpdateAdminInput {
  admin_id: String!
  admin_name: String
  admin_password: String
  admin_role_id: String
  enabled: Boolean
}

input UpdateAgentInput {
  agent_id: String!
  agent_name: String
  agent_password: String
  enabled: Boolean
}

input UpdateBankAccountInput {
  account_number: String
  admin_bank_account_id: String!
  bank_name: String
  enabled: Boolean
  holder_name: String
  method: String
}

input UpdateFinanceInput {
  id: String!
  is_enabled: Boolean!
}

input UpdatePlayerInput {
  enabled: Boolean
  user_id: String!
}

input UpdateRoleInput {
  added_access_names: [String!]
  admin_role_id: String!
  admin_role_name: String
  enabled: Boolean
  remove_access_names: [String!]
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String!]
}

input Withdrawal_transactionsListRelationFilter {
  every: withdrawal_transactionsWhereInput
  none: withdrawal_transactionsWhereInput
  some: withdrawal_transactionsWhereInput
}

type admin_accesses {
  _count: Admin_accessesCount!
  access_name: String!
  admin_access_id: ID!
  admin_role_accesses: [admin_role_accesses!]
}

input admin_accessesWhereInput {
  AND: [admin_accessesWhereInput!]
  NOT: [admin_accessesWhereInput!]
  OR: [admin_accessesWhereInput!]
  access_name: StringFilter
  admin_access_id: UuidFilter
  admin_role_accesses: Admin_role_accessesListRelationFilter
}

type admin_bank_accounts {
  _count: Admin_bank_accountsCount!
  account_number: String!
  admin_bank_account_id: ID!
  bank_name: String!
  cdate: DateTime!
  deposit_transactions: [deposit_transactions!]
  enabled: Boolean!
  holder_name: String!
  method: bank_method!
  udate: DateTime!
}

input admin_bank_accountsWhereInput {
  AND: [admin_bank_accountsWhereInput!]
  NOT: [admin_bank_accountsWhereInput!]
  OR: [admin_bank_accountsWhereInput!]
  account_number: StringFilter
  admin_bank_account_id: UuidFilter
  bank_name: StringFilter
  cdate: DateTimeFilter
  deposit_transactions: Deposit_transactionsListRelationFilter
  enabled: BoolFilter
  holder_name: StringFilter
  method: Enumbank_methodFilter
  udate: DateTimeFilter
}

type admin_login_logs {
  admin_id: String!
  admin_login_log_id: ID!
  admins: admins!
  ip: String!
  login_time: DateTime!
}

input admin_login_logsWhereInput {
  AND: [admin_login_logsWhereInput!]
  NOT: [admin_login_logsWhereInput!]
  OR: [admin_login_logsWhereInput!]
  admin_id: StringFilter
  admin_login_log_id: UuidFilter
  admins: AdminsRelationFilter
  ip: StringFilter
  login_time: DateTimeFilter
}

type admin_role_accesses {
  admin_access_id: String!
  admin_accesses: admin_accesses!
  admin_role_access_id: ID!
  admin_role_id: String!
  admin_roles: admin_roles!
  cdate: DateTime!
  created_by: String!
  enabled: Boolean!
  udate: DateTime!
  updated_by: String!
}

input admin_role_accessesWhereInput {
  AND: [admin_role_accessesWhereInput!]
  NOT: [admin_role_accessesWhereInput!]
  OR: [admin_role_accessesWhereInput!]
  admin_access_id: StringFilter
  admin_accesses: Admin_accessesRelationFilter
  admin_role_access_id: UuidFilter
  admin_role_id: StringFilter
  admin_roles: Admin_rolesRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  enabled: BoolFilter
  udate: DateTimeFilter
  updated_by: StringFilter
}

type admin_roles {
  _count: Admin_rolesCount!
  admin_role_accesses: [admin_role_accesses!]
  admin_role_id: ID!
  admin_role_name: String!
  admins: [admins!]
  cdate: DateTime!
  created_by: String!
  enabled: Boolean!
  udate: DateTime!
}

input admin_rolesWhereInput {
  AND: [admin_rolesWhereInput!]
  NOT: [admin_rolesWhereInput!]
  OR: [admin_rolesWhereInput!]
  admin_role_accesses: Admin_role_accessesListRelationFilter
  admin_role_id: UuidFilter
  admin_role_name: StringFilter
  admins: AdminsListRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  enabled: BoolFilter
  udate: DateTimeFilter
}

type admins {
  _count: AdminsCount!
  admin_id: ID!
  admin_login_logs: [admin_login_logs!]
  admin_name: String!
  admin_password: String!
  admin_role_id: String!
  admin_roles: admin_roles!
  cdate: DateTime!
  created_by: String!
  enabled: Boolean!
  manual_adjustments: [manual_adjustments!]
  udate: DateTime!
}

input adminsWhereInput {
  AND: [adminsWhereInput!]
  NOT: [adminsWhereInput!]
  OR: [adminsWhereInput!]
  admin_id: UuidFilter
  admin_login_logs: Admin_login_logsListRelationFilter
  admin_name: StringFilter
  admin_password: StringFilter
  admin_role_id: StringFilter
  admin_roles: Admin_rolesRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  enabled: BoolFilter
  manual_adjustments: Manual_adjustmentsListRelationFilter
  udate: DateTimeFilter
}

type agent_rebate_rates {
  agent_id: String!
  agent_rebate_rate_id: ID!
  agents: agents!
  cdate: DateTime!
  created_by: String!
  is_active: Boolean!
  rebate: Float!
  rebate_category_id: Int!
}

input agent_rebate_ratesWhereInput {
  AND: [agent_rebate_ratesWhereInput!]
  NOT: [agent_rebate_ratesWhereInput!]
  OR: [agent_rebate_ratesWhereInput!]
  agent_id: StringFilter
  agent_rebate_rate_id: UuidFilter
  agents: AgentsRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  is_active: BoolFilter
  rebate: FloatFilter
  rebate_category_id: IntFilter
}

type agent_records_by_day {
  agent_id: String!
  agent_records_by_day_id: ID!
  agents: agents!
  cdate: DateTime!
  child_agent_id: String
  effective_bet_amount: Float!
  game_date: DateTime!
  game_pnl_expense: Float!
  game_pnl_income: Float!
  game_records_by_day_id: String!
  is_active: Boolean!
  player_id: String!
  rebate_category_id: Int!
  rebate_expense: Float!
  rebate_income: Float!
  udate: DateTime!
}

input agent_records_by_dayWhereInput {
  AND: [agent_records_by_dayWhereInput!]
  NOT: [agent_records_by_dayWhereInput!]
  OR: [agent_records_by_dayWhereInput!]
  agent_id: StringFilter
  agent_records_by_day_id: UuidFilter
  agents: AgentsRelationFilter
  cdate: DateTimeFilter
  child_agent_id: StringNullableFilter
  effective_bet_amount: FloatFilter
  game_date: DateTimeFilter
  game_pnl_expense: FloatFilter
  game_pnl_income: FloatFilter
  game_records_by_day_id: StringFilter
  is_active: BoolFilter
  player_id: StringFilter
  rebate_category_id: IntFilter
  rebate_expense: FloatFilter
  rebate_income: FloatFilter
  udate: DateTimeFilter
}

type agent_shares {
  agent_id: String!
  agent_share_id: ID!
  agents: agents!
  cdate: DateTime!
  created_by: String!
  is_active: Boolean!
  shares: Float!
}

input agent_sharesWhereInput {
  AND: [agent_sharesWhereInput!]
  NOT: [agent_sharesWhereInput!]
  OR: [agent_sharesWhereInput!]
  agent_id: StringFilter
  agent_share_id: UuidFilter
  agents: AgentsRelationFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  is_active: BoolFilter
  shares: FloatFilter
}

type agents {
  _count: AgentsCount!
  agent_id: ID!
  agent_name: String!
  agent_password: String!
  agent_rebate_rates: [agent_rebate_rates!]
  agent_records_by_day: [agent_records_by_day!]
  agent_shares: [agent_shares!]
  cdate: DateTime!
  children: [agents!]
  created_by: String!
  enabled: Boolean!
  parent: agents
  parent_agent_id: String
  players: [players!]
  udate: DateTime!
}

input agentsWhereInput {
  AND: [agentsWhereInput!]
  NOT: [agentsWhereInput!]
  OR: [agentsWhereInput!]
  agent_id: UuidFilter
  agent_name: StringFilter
  agent_password: StringFilter
  agent_rebate_rates: Agent_rebate_ratesListRelationFilter
  agent_records_by_day: Agent_records_by_dayListRelationFilter
  agent_shares: Agent_sharesListRelationFilter
  cdate: DateTimeFilter
  children: AgentsListRelationFilter
  created_by: StringFilter
  enabled: BoolFilter
  parent: AgentsNullableRelationFilter
  parent_agent_id: StringNullableFilter
  players: PlayersListRelationFilter
  udate: DateTimeFilter
}

enum bank_method {
  BANK
  FPS
}

type deposit_transactions {
  admin_bank_account: admin_bank_accounts!
  admin_bank_account_id: String!
  cdate: DateTime!
  comment: String
  deposit_transaction_id: ID!
  game_amount: Float!
  game_currency: game_currency!
  player_id: String!
  player_remarks: String!
  players: players!
  process_time: DateTime
  processed_by: String
  status: wallet_transaction_status!
  transaction_amount: Float!
  transaction_currency: real_currency!
  transaction_date: String!
  udate: DateTime!
}

input deposit_transactionsWhereInput {
  AND: [deposit_transactionsWhereInput!]
  NOT: [deposit_transactionsWhereInput!]
  OR: [deposit_transactionsWhereInput!]
  admin_bank_account: Admin_bank_accountsRelationFilter
  admin_bank_account_id: StringFilter
  cdate: DateTimeFilter
  comment: StringNullableFilter
  deposit_transaction_id: UuidFilter
  game_amount: FloatFilter
  game_currency: Enumgame_currencyFilter
  player_id: StringFilter
  player_remarks: StringFilter
  players: PlayersRelationFilter
  process_time: DateTimeNullableFilter
  processed_by: StringNullableFilter
  status: Enumwallet_transaction_statusFilter
  transaction_amount: FloatFilter
  transaction_currency: Enumreal_currencyFilter
  transaction_date: StringFilter
  udate: DateTimeFilter
}

enum game_currency {
  fHKD
}

type manual_adjustments {
  admins: admins!
  amount: Float!
  cdate: DateTime!
  created_by: String!
  manual_adjustment_id: ID!
  player_id: String!
  reason: String!
}

input manual_adjustmentsWhereInput {
  AND: [manual_adjustmentsWhereInput!]
  NOT: [manual_adjustmentsWhereInput!]
  OR: [manual_adjustmentsWhereInput!]
  admins: AdminsRelationFilter
  amount: FloatFilter
  cdate: DateTimeFilter
  created_by: StringFilter
  manual_adjustment_id: UuidFilter
  player_id: StringFilter
  reason: StringFilter
}

type player_bank_accounts {
  _count: Player_bank_accountsCount!
  account_number: String!
  bank_name: String!
  cdate: DateTime!
  enabled: Boolean!
  holder_name: String!
  method: bank_method!
  player_bank_account_id: ID!
  player_id: String!
  udate: DateTime!
  withdrawal_transactions: [withdrawal_transactions!]
}

input player_bank_accountsWhereInput {
  AND: [player_bank_accountsWhereInput!]
  NOT: [player_bank_accountsWhereInput!]
  OR: [player_bank_accountsWhereInput!]
  account_number: StringFilter
  bank_name: StringFilter
  cdate: DateTimeFilter
  enabled: BoolFilter
  holder_name: StringFilter
  method: Enumbank_methodFilter
  player_bank_account_id: UuidFilter
  player_id: StringFilter
  udate: DateTimeFilter
  withdrawal_transactions: Withdrawal_transactionsListRelationFilter
}

type player_login_logs {
  ip: String!
  login_time: DateTime!
  player_id: String!
  player_login_log_id: ID!
  players: players!
}

input player_login_logsWhereInput {
  AND: [player_login_logsWhereInput!]
  NOT: [player_login_logsWhereInput!]
  OR: [player_login_logsWhereInput!]
  ip: StringFilter
  login_time: DateTimeFilter
  player_id: StringFilter
  player_login_log_id: UuidFilter
  players: PlayersRelationFilter
}

type players {
  _count: PlayersCount!
  agent: agents!
  agent_id: String!
  cdate: DateTime!
  deposit_transactions: [deposit_transactions!]
  enabled: Boolean!
  fundist_password: String!
  name: String
  password: String!
  player_id: ID!
  player_login_logs: [player_login_logs!]
  registration_date: String!
  registration_ip: String!
  tg_first_name: String!
  tg_id: String!
  tg_last_name: String!
  tg_photo_url: String
  tg_username: String!
  udate: DateTime!
  user_language: String!
  withdrawal_transactions: [withdrawal_transactions!]
}

input playersWhereInput {
  AND: [playersWhereInput!]
  NOT: [playersWhereInput!]
  OR: [playersWhereInput!]
  agent: AgentsRelationFilter
  agent_id: StringFilter
  cdate: DateTimeFilter
  deposit_transactions: Deposit_transactionsListRelationFilter
  enabled: BoolFilter
  fundist_password: StringFilter
  name: StringNullableFilter
  password: StringFilter
  player_id: UuidFilter
  player_login_logs: Player_login_logsListRelationFilter
  registration_date: StringFilter
  registration_ip: StringFilter
  tg_first_name: StringFilter
  tg_id: StringFilter
  tg_last_name: StringFilter
  tg_photo_url: StringNullableFilter
  tg_username: StringFilter
  udate: DateTimeFilter
  user_language: StringFilter
  withdrawal_transactions: Withdrawal_transactionsListRelationFilter
}

enum real_currency {
  HKD
  USDT
}

enum wallet_transaction_status {
  FAILED
  PENDING
  SUCCESS
}

type withdrawal_transactions {
  cdate: DateTime!
  comment: String
  game_amount: Float!
  game_currency: game_currency!
  player_bank_account: player_bank_accounts!
  player_bank_account_id: String!
  player_id: String!
  player_remarks: String!
  players: players!
  process_time: DateTime
  processed_by: String
  status: wallet_transaction_status!
  transaction_amount: Float!
  transaction_currency: real_currency!
  transaction_date: String!
  udate: DateTime!
  withdrawal_transaction_id: ID!
}

input withdrawal_transactionsWhereInput {
  AND: [withdrawal_transactionsWhereInput!]
  NOT: [withdrawal_transactionsWhereInput!]
  OR: [withdrawal_transactionsWhereInput!]
  cdate: DateTimeFilter
  comment: StringNullableFilter
  game_amount: FloatFilter
  game_currency: Enumgame_currencyFilter
  player_bank_account: Player_bank_accountsRelationFilter
  player_bank_account_id: StringFilter
  player_id: StringFilter
  player_remarks: StringFilter
  players: PlayersRelationFilter
  process_time: DateTimeNullableFilter
  processed_by: StringNullableFilter
  status: Enumwallet_transaction_statusFilter
  transaction_amount: FloatFilter
  transaction_currency: Enumreal_currencyFilter
  transaction_date: StringFilter
  udate: DateTimeFilter
  withdrawal_transaction_id: UuidFilter
}