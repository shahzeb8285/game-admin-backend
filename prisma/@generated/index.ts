import { Field } from '@nestjs/graphql';
import { InputType } from '@nestjs/graphql';
import { Type } from 'class-transformer';
import { Prisma } from '@prisma/client';
import { ObjectType } from '@nestjs/graphql';
import { ID } from '@nestjs/graphql';
import { ArgsType } from '@nestjs/graphql';
import { Int } from '@nestjs/graphql';
import { Float } from '@nestjs/graphql';
import { registerEnumType } from '@nestjs/graphql';

export enum Withdrawal_transactionsScalarFieldEnum {
    withdrawalTransactionID = "withdrawalTransactionID",
    playerID = "playerID",
    amount = "amount",
    currency = "currency",
    requestTime = "requestTime",
    processTime = "processTime",
    processedBy = "processedBy",
    transactionDate = "transactionDate",
    status = "status",
    adminBankAccountID = "adminBankAccountID"
}

export enum Wallet_requestsScalarFieldEnum {
    walletRequestID = "walletRequestID",
    tID = "tID",
    type = "type",
    playerID = "playerID",
    currency = "currency",
    amount = "amount",
    iGameID = "iGameID",
    iExtparam = "iExtparam",
    iRollback = "iRollback",
    iGamedesc = "iGamedesc",
    iActionID = "iActionID",
    iReferenceActionID = "iReferenceActionID",
    roundStart = "roundStart",
    roundEnded = "roundEnded",
    gameExtra = "gameExtra",
    subtype = "subtype",
    jackpotWin = "jackpotWin",
    hmac = "hmac",
    response = "response"
}

export enum Transfer_out_transactionsScalarFieldEnum {
    transferOutTransactionID = "transferOutTransactionID",
    playerID = "playerID",
    amount = "amount",
    currency = "currency",
    requestTime = "requestTime",
    processTime = "processTime",
    processedBy = "processedBy",
    transactionDate = "transactionDate",
    status = "status",
    counterpartPlatform = "counterpartPlatform",
    counterpartUsername = "counterpartUsername"
}

export enum Transfer_in_transactionsScalarFieldEnum {
    transferInTransactionID = "transferInTransactionID",
    playerID = "playerID",
    amount = "amount",
    currency = "currency",
    requestTime = "requestTime",
    processTime = "processTime",
    processedBy = "processedBy",
    transactionDate = "transactionDate",
    status = "status",
    counterpartPlatform = "counterpartPlatform",
    counterpartUsername = "counterpartUsername"
}

export enum TransactionType {
    PENDING = "PENDING",
    REJECTED = "REJECTED",
    subtype = "subtype"
}

export enum TransactionIsolationLevel {
    Serializable = "Serializable"
}

export enum SortOrder {
    asc = "asc",
    desc = "desc"
}

export enum QueryMode {
    'default' = "default",
    insensitive = "insensitive"
}

export enum PlayersScalarFieldEnum {
    playerID = "playerID",
    name = "name",
    tgID = "tgID",
    tgFirstName = "tgFirstName",
    tgLastName = "tgLastName",
    tgUsername = "tgUsername",
    tgPhotoUrl = "tgPhotoUrl",
    userLanguage = "userLanguage",
    registrationIp = "registrationIp",
    agentID = "agentID",
    cdate = "cdate",
    udate = "udate",
    enabled = "enabled",
    registrationDate = "registrationDate"
}

export enum Player_walletsScalarFieldEnum {
    playerWalletID = "playerWalletID",
    playerID = "playerID",
    currency = "currency",
    amount = "amount",
    frozenAmount = "frozenAmount",
    cdate = "cdate",
    udate = "udate"
}

export enum Player_login_logsScalarFieldEnum {
    playerID = "playerID",
    ip = "ip",
    loginTime = "loginTime"
}

export enum NullsOrder {
    first = "first",
    last = "last"
}

export enum Manual_adjustmentsScalarFieldEnum {
    manualAdjustmentID = "manualAdjustmentID",
    playerID = "playerID",
    reason = "reason",
    amount = "amount",
    createdBy = "createdBy",
    cdate = "cdate"
}

export enum Game_rebatesScalarFieldEnum {
    game_rebatesID = "game_rebatesID",
    gameHistoryID = "gameHistoryID",
    merchantID = "merchantID",
    gameID = "gameID",
    category = "category",
    effectiveBetAmount = "effectiveBetAmount",
    rebateAmount = "rebateAmount",
    status = "status",
    cdate = "cdate"
}

export enum Game_historyScalarFieldEnum {
    gameHistoryID = "gameHistoryID",
    gameID = "gameID",
    playerID = "playerID",
    iGamedesc = "iGamedesc",
    betAmount = "betAmount",
    winAmount = "winAmount",
    transactionDate = "transactionDate",
    cdate = "cdate"
}

export enum Deposit_transactionsScalarFieldEnum {
    depositTransactionID = "depositTransactionID",
    playerID = "playerID",
    amount = "amount",
    currency = "currency",
    requestTime = "requestTime",
    processTime = "processTime",
    processedBy = "processedBy",
    transactionDate = "transactionDate",
    status = "status",
    adminBankAccountID = "adminBankAccountID"
}

export enum Current_active_playersScalarFieldEnum {
    playerID = "playerID",
    lastActiveTime = "lastActiveTime"
}

export enum All_ow_requestsScalarFieldEnum {
    allOwRequestID = "allOwRequestID",
    request = "request",
    cdate = "cdate"
}

export enum AgentsScalarFieldEnum {
    agentID = "agentID",
    agentName = "agentName",
    agentPassword = "agentPassword",
    createdBy = "createdBy",
    cdate = "cdate",
    udate = "udate",
    enabled = "enabled",
    parentAgentID = "parentAgentID"
}

export enum Agent_rebatesScalarFieldEnum {
    agentRebateID = "agentRebateID",
    agentID = "agentID",
    gameID = "gameID",
    rebate = "rebate",
    createdBy = "createdBy",
    fromDate = "fromDate",
    thruDate = "thruDate",
    isActive = "isActive"
}

export enum AdminsScalarFieldEnum {
    adminID = "adminID",
    adminName = "adminName",
    adminPassword = "adminPassword",
    adminRoleID = "adminRoleID",
    createdBy = "createdBy",
    cdate = "cdate",
    udate = "udate",
    enabled = "enabled"
}

export enum Admin_rolesScalarFieldEnum {
    adminRoleID = "adminRoleID",
    adminRoleName = "adminRoleName",
    enabled = "enabled"
}

export enum Admin_role_accessesScalarFieldEnum {
    admin_roleID = "admin_roleID",
    admin_access_id = "admin_access_id"
}

export enum Admin_login_logsScalarFieldEnum {
    loginID = "loginID",
    adminID = "adminID",
    ip = "ip",
    loginTime = "loginTime"
}

export enum Admin_bank_accountsScalarFieldEnum {
    adminBankAccountID = "adminBankAccountID",
    bankName = "bankName",
    accountNumber = "accountNumber",
    holderName = "holderName",
    enabled = "enabled",
    method = "method"
}

export enum Admin_accessesScalarFieldEnum {
    adminAccessID = "adminAccessID",
    accessName = "accessName"
}

registerEnumType(Admin_accessesScalarFieldEnum, { name: 'Admin_accessesScalarFieldEnum', description: undefined })
registerEnumType(Admin_bank_accountsScalarFieldEnum, { name: 'Admin_bank_accountsScalarFieldEnum', description: undefined })
registerEnumType(Admin_login_logsScalarFieldEnum, { name: 'Admin_login_logsScalarFieldEnum', description: undefined })
registerEnumType(Admin_role_accessesScalarFieldEnum, { name: 'Admin_role_accessesScalarFieldEnum', description: undefined })
registerEnumType(Admin_rolesScalarFieldEnum, { name: 'Admin_rolesScalarFieldEnum', description: undefined })
registerEnumType(AdminsScalarFieldEnum, { name: 'AdminsScalarFieldEnum', description: undefined })
registerEnumType(Agent_rebatesScalarFieldEnum, { name: 'Agent_rebatesScalarFieldEnum', description: undefined })
registerEnumType(AgentsScalarFieldEnum, { name: 'AgentsScalarFieldEnum', description: undefined })
registerEnumType(All_ow_requestsScalarFieldEnum, { name: 'All_ow_requestsScalarFieldEnum', description: undefined })
registerEnumType(Current_active_playersScalarFieldEnum, { name: 'Current_active_playersScalarFieldEnum', description: undefined })
registerEnumType(Deposit_transactionsScalarFieldEnum, { name: 'Deposit_transactionsScalarFieldEnum', description: undefined })
registerEnumType(Game_historyScalarFieldEnum, { name: 'Game_historyScalarFieldEnum', description: undefined })
registerEnumType(Game_rebatesScalarFieldEnum, { name: 'Game_rebatesScalarFieldEnum', description: undefined })
registerEnumType(Manual_adjustmentsScalarFieldEnum, { name: 'Manual_adjustmentsScalarFieldEnum', description: undefined })
registerEnumType(NullsOrder, { name: 'NullsOrder', description: undefined })
registerEnumType(Player_login_logsScalarFieldEnum, { name: 'Player_login_logsScalarFieldEnum', description: undefined })
registerEnumType(Player_walletsScalarFieldEnum, { name: 'Player_walletsScalarFieldEnum', description: undefined })
registerEnumType(PlayersScalarFieldEnum, { name: 'PlayersScalarFieldEnum', description: undefined })
registerEnumType(QueryMode, { name: 'QueryMode', description: undefined })
registerEnumType(SortOrder, { name: 'SortOrder', description: undefined })
registerEnumType(TransactionIsolationLevel, { name: 'TransactionIsolationLevel', description: undefined })
registerEnumType(TransactionType, { name: 'TransactionType', description: undefined })
registerEnumType(Transfer_in_transactionsScalarFieldEnum, { name: 'Transfer_in_transactionsScalarFieldEnum', description: undefined })
registerEnumType(Transfer_out_transactionsScalarFieldEnum, { name: 'Transfer_out_transactionsScalarFieldEnum', description: undefined })
registerEnumType(Wallet_requestsScalarFieldEnum, { name: 'Wallet_requestsScalarFieldEnum', description: undefined })
registerEnumType(Withdrawal_transactionsScalarFieldEnum, { name: 'Withdrawal_transactionsScalarFieldEnum', description: undefined })

@InputType()
export class admin_accessesCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminAccessID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accessName?: keyof typeof SortOrder;
}

@InputType()
export class admin_accessesCreateManyInput {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
}

@InputType()
export class admin_accessesCreateNestedOneWithoutRole_accessesInput {
    @Field(() => admin_accessesCreateWithoutRole_accessesInput, {nullable:true})
    @Type(() => admin_accessesCreateWithoutRole_accessesInput)
    create?: InstanceType<typeof admin_accessesCreateWithoutRole_accessesInput>;
    @Field(() => admin_accessesCreateOrConnectWithoutRole_accessesInput, {nullable:true})
    @Type(() => admin_accessesCreateOrConnectWithoutRole_accessesInput)
    connectOrCreate?: InstanceType<typeof admin_accessesCreateOrConnectWithoutRole_accessesInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:true})
    @Type(() => admin_accessesWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_accessesWhereUniqueInput, 'adminAccessID' | 'accessName'>;
}

@InputType()
export class admin_accessesCreateOrConnectWithoutRole_accessesInput {
    @Field(() => admin_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_accessesWhereUniqueInput, 'adminAccessID' | 'accessName'>;
    @Field(() => admin_accessesCreateWithoutRole_accessesInput, {nullable:false})
    @Type(() => admin_accessesCreateWithoutRole_accessesInput)
    create!: InstanceType<typeof admin_accessesCreateWithoutRole_accessesInput>;
}

@InputType()
export class admin_accessesCreateWithoutRole_accessesInput {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
}

@InputType()
export class admin_accessesCreateInput {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
    @Field(() => admin_role_accessesCreateNestedManyWithoutAdmin_accessesInput, {nullable:true})
    role_accesses?: InstanceType<typeof admin_role_accessesCreateNestedManyWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_accessesMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminAccessID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accessName?: keyof typeof SortOrder;
}

@InputType()
export class admin_accessesMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminAccessID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accessName?: keyof typeof SortOrder;
}

@InputType()
export class admin_accessesOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    adminAccessID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accessName?: keyof typeof SortOrder;
    @Field(() => admin_accessesCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof admin_accessesCountOrderByAggregateInput>;
    @Field(() => admin_accessesMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof admin_accessesMaxOrderByAggregateInput>;
    @Field(() => admin_accessesMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof admin_accessesMinOrderByAggregateInput>;
}

@InputType()
export class admin_accessesOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    adminAccessID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accessName?: keyof typeof SortOrder;
    @Field(() => admin_role_accessesOrderByRelationAggregateInput, {nullable:true})
    role_accesses?: InstanceType<typeof admin_role_accessesOrderByRelationAggregateInput>;
}

@InputType()
export class admin_accessesScalarWhereWithAggregatesInput {
    @Field(() => [admin_accessesScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<admin_accessesScalarWhereWithAggregatesInput>;
    @Field(() => [admin_accessesScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<admin_accessesScalarWhereWithAggregatesInput>;
    @Field(() => [admin_accessesScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<admin_accessesScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminAccessID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    accessName?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class admin_accessesUncheckedCreateWithoutRole_accessesInput {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
}

@InputType()
export class admin_accessesUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
    @Field(() => admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_accessesInput, {nullable:true})
    role_accesses?: InstanceType<typeof admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_accessesUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accessName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_accessesUncheckedUpdateWithoutRole_accessesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accessName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_accessesUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accessName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesNestedInput, {nullable:true})
    role_accesses?: InstanceType<typeof admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesNestedInput>;
}

@InputType()
export class admin_accessesUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accessName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_accessesUpdateOneRequiredWithoutRole_accessesNestedInput {
    @Field(() => admin_accessesCreateWithoutRole_accessesInput, {nullable:true})
    @Type(() => admin_accessesCreateWithoutRole_accessesInput)
    create?: InstanceType<typeof admin_accessesCreateWithoutRole_accessesInput>;
    @Field(() => admin_accessesCreateOrConnectWithoutRole_accessesInput, {nullable:true})
    @Type(() => admin_accessesCreateOrConnectWithoutRole_accessesInput)
    connectOrCreate?: InstanceType<typeof admin_accessesCreateOrConnectWithoutRole_accessesInput>;
    @Field(() => admin_accessesUpsertWithoutRole_accessesInput, {nullable:true})
    @Type(() => admin_accessesUpsertWithoutRole_accessesInput)
    upsert?: InstanceType<typeof admin_accessesUpsertWithoutRole_accessesInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:true})
    @Type(() => admin_accessesWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_accessesWhereUniqueInput, 'adminAccessID' | 'accessName'>;
    @Field(() => admin_accessesUpdateToOneWithWhereWithoutRole_accessesInput, {nullable:true})
    @Type(() => admin_accessesUpdateToOneWithWhereWithoutRole_accessesInput)
    update?: InstanceType<typeof admin_accessesUpdateToOneWithWhereWithoutRole_accessesInput>;
}

@InputType()
export class admin_accessesUpdateToOneWithWhereWithoutRole_accessesInput {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => admin_accessesUpdateWithoutRole_accessesInput, {nullable:false})
    @Type(() => admin_accessesUpdateWithoutRole_accessesInput)
    data!: InstanceType<typeof admin_accessesUpdateWithoutRole_accessesInput>;
}

@InputType()
export class admin_accessesUpdateWithoutRole_accessesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accessName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_accessesUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accessName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => admin_role_accessesUpdateManyWithoutAdmin_accessesNestedInput, {nullable:true})
    role_accesses?: InstanceType<typeof admin_role_accessesUpdateManyWithoutAdmin_accessesNestedInput>;
}

@InputType()
export class admin_accessesUpsertWithoutRole_accessesInput {
    @Field(() => admin_accessesUpdateWithoutRole_accessesInput, {nullable:false})
    @Type(() => admin_accessesUpdateWithoutRole_accessesInput)
    update!: InstanceType<typeof admin_accessesUpdateWithoutRole_accessesInput>;
    @Field(() => admin_accessesCreateWithoutRole_accessesInput, {nullable:false})
    @Type(() => admin_accessesCreateWithoutRole_accessesInput)
    create!: InstanceType<typeof admin_accessesCreateWithoutRole_accessesInput>;
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
}

@InputType()
export class admin_accessesWhereUniqueInput {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:true})
    accessName?: string;
    @Field(() => [admin_accessesWhereInput], {nullable:true})
    AND?: Array<admin_accessesWhereInput>;
    @Field(() => [admin_accessesWhereInput], {nullable:true})
    OR?: Array<admin_accessesWhereInput>;
    @Field(() => [admin_accessesWhereInput], {nullable:true})
    NOT?: Array<admin_accessesWhereInput>;
    @Field(() => Admin_role_accessesListRelationFilter, {nullable:true})
    role_accesses?: InstanceType<typeof Admin_role_accessesListRelationFilter>;
}

@InputType()
export class admin_accessesWhereInput {
    @Field(() => [admin_accessesWhereInput], {nullable:true})
    AND?: Array<admin_accessesWhereInput>;
    @Field(() => [admin_accessesWhereInput], {nullable:true})
    OR?: Array<admin_accessesWhereInput>;
    @Field(() => [admin_accessesWhereInput], {nullable:true})
    NOT?: Array<admin_accessesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminAccessID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    accessName?: InstanceType<typeof StringFilter>;
    @Field(() => Admin_role_accessesListRelationFilter, {nullable:true})
    role_accesses?: InstanceType<typeof Admin_role_accessesListRelationFilter>;
}

@ObjectType()
export class admin_accesses {
    @Field(() => ID, {nullable:false})
    adminAccessID!: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
    @Field(() => [admin_role_accesses], {nullable:true})
    role_accesses?: Array<admin_role_accesses>;
    @Field(() => Admin_accessesCount, {nullable:false})
    _count?: InstanceType<typeof Admin_accessesCount>;
}

@InputType()
export class admin_bank_accountsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    bankName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accountNumber?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    holderName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    method?: keyof typeof SortOrder;
}

@InputType()
export class admin_bank_accountsCreateManyInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
}

@InputType()
export class admin_bank_accountsCreateNestedOneWithoutDepositTransactionsInput {
    @Field(() => admin_bank_accountsCreateWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateWithoutDepositTransactionsInput)
    create?: InstanceType<typeof admin_bank_accountsCreateWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput)
    connectOrCreate?: InstanceType<typeof admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_bank_accountsWhereUniqueInput, 'adminBankAccountID'>;
}

@InputType()
export class admin_bank_accountsCreateNestedOneWithoutWithdrawalTransactionsInput {
    @Field(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput)
    create?: InstanceType<typeof admin_bank_accountsCreateWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput)
    connectOrCreate?: InstanceType<typeof admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_bank_accountsWhereUniqueInput, 'adminBankAccountID'>;
}

@InputType()
export class admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput {
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: Prisma.AtLeast<admin_bank_accountsWhereUniqueInput, 'adminBankAccountID'>;
    @Field(() => admin_bank_accountsCreateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsCreateWithoutDepositTransactionsInput)
    create!: InstanceType<typeof admin_bank_accountsCreateWithoutDepositTransactionsInput>;
}

@InputType()
export class admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput {
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: Prisma.AtLeast<admin_bank_accountsWhereUniqueInput, 'adminBankAccountID'>;
    @Field(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput)
    create!: InstanceType<typeof admin_bank_accountsCreateWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class admin_bank_accountsCreateWithoutDepositTransactionsInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutAdminBankAccountsInput>;
}

@InputType()
export class admin_bank_accountsCreateWithoutWithdrawalTransactionsInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => deposit_transactionsCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutAdminBankAccountsInput>;
}

@InputType()
export class admin_bank_accountsCreateInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => deposit_transactionsCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutAdminBankAccountsInput>;
}

@InputType()
export class admin_bank_accountsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    bankName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accountNumber?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    holderName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    method?: keyof typeof SortOrder;
}

@InputType()
export class admin_bank_accountsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    bankName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accountNumber?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    holderName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    method?: keyof typeof SortOrder;
}

@InputType()
export class admin_bank_accountsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    bankName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accountNumber?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    holderName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    method?: keyof typeof SortOrder;
    @Field(() => admin_bank_accountsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof admin_bank_accountsCountOrderByAggregateInput>;
    @Field(() => admin_bank_accountsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof admin_bank_accountsMaxOrderByAggregateInput>;
    @Field(() => admin_bank_accountsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof admin_bank_accountsMinOrderByAggregateInput>;
}

@InputType()
export class admin_bank_accountsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    bankName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    accountNumber?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    holderName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    method?: keyof typeof SortOrder;
    @Field(() => deposit_transactionsOrderByRelationAggregateInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsOrderByRelationAggregateInput>;
    @Field(() => withdrawal_transactionsOrderByRelationAggregateInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsOrderByRelationAggregateInput>;
}

@InputType()
export class admin_bank_accountsScalarWhereWithAggregatesInput {
    @Field(() => [admin_bank_accountsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<admin_bank_accountsScalarWhereWithAggregatesInput>;
    @Field(() => [admin_bank_accountsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<admin_bank_accountsScalarWhereWithAggregatesInput>;
    @Field(() => [admin_bank_accountsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<admin_bank_accountsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    bankName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    accountNumber?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    holderName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    method?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class admin_bank_accountsUncheckedCreateWithoutDepositTransactionsInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput>;
}

@InputType()
export class admin_bank_accountsUncheckedCreateWithoutWithdrawalTransactionsInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput>;
}

@InputType()
export class admin_bank_accountsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput>;
}

@InputType()
export class admin_bank_accountsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_bank_accountsUncheckedUpdateWithoutDepositTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput>;
}

@InputType()
export class admin_bank_accountsUncheckedUpdateWithoutWithdrawalTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput>;
}

@InputType()
export class admin_bank_accountsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput>;
}

@InputType()
export class admin_bank_accountsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_bank_accountsUpdateOneRequiredWithoutDepositTransactionsNestedInput {
    @Field(() => admin_bank_accountsCreateWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateWithoutDepositTransactionsInput)
    create?: InstanceType<typeof admin_bank_accountsCreateWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput)
    connectOrCreate?: InstanceType<typeof admin_bank_accountsCreateOrConnectWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsUpsertWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsUpsertWithoutDepositTransactionsInput)
    upsert?: InstanceType<typeof admin_bank_accountsUpsertWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_bank_accountsWhereUniqueInput, 'adminBankAccountID'>;
    @Field(() => admin_bank_accountsUpdateToOneWithWhereWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsUpdateToOneWithWhereWithoutDepositTransactionsInput)
    update?: InstanceType<typeof admin_bank_accountsUpdateToOneWithWhereWithoutDepositTransactionsInput>;
}

@InputType()
export class admin_bank_accountsUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput {
    @Field(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput)
    create?: InstanceType<typeof admin_bank_accountsCreateWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput)
    connectOrCreate?: InstanceType<typeof admin_bank_accountsCreateOrConnectWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsUpsertWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsUpsertWithoutWithdrawalTransactionsInput)
    upsert?: InstanceType<typeof admin_bank_accountsUpsertWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_bank_accountsWhereUniqueInput, 'adminBankAccountID'>;
    @Field(() => admin_bank_accountsUpdateToOneWithWhereWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => admin_bank_accountsUpdateToOneWithWhereWithoutWithdrawalTransactionsInput)
    update?: InstanceType<typeof admin_bank_accountsUpdateToOneWithWhereWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class admin_bank_accountsUpdateToOneWithWhereWithoutDepositTransactionsInput {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => admin_bank_accountsUpdateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateWithoutDepositTransactionsInput)
    data!: InstanceType<typeof admin_bank_accountsUpdateWithoutDepositTransactionsInput>;
}

@InputType()
export class admin_bank_accountsUpdateToOneWithWhereWithoutWithdrawalTransactionsInput {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput)
    data!: InstanceType<typeof admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class admin_bank_accountsUpdateWithoutDepositTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutAdminBankAccountsNestedInput>;
}

@InputType()
export class admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutAdminBankAccountsNestedInput>;
}

@InputType()
export class admin_bank_accountsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    bankName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    accountNumber?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    holderName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    method?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutAdminBankAccountsNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutAdminBankAccountsNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutAdminBankAccountsNestedInput>;
}

@InputType()
export class admin_bank_accountsUpsertWithoutDepositTransactionsInput {
    @Field(() => admin_bank_accountsUpdateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateWithoutDepositTransactionsInput)
    update!: InstanceType<typeof admin_bank_accountsUpdateWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsCreateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsCreateWithoutDepositTransactionsInput)
    create!: InstanceType<typeof admin_bank_accountsCreateWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
}

@InputType()
export class admin_bank_accountsUpsertWithoutWithdrawalTransactionsInput {
    @Field(() => admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput)
    update!: InstanceType<typeof admin_bank_accountsUpdateWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => admin_bank_accountsCreateWithoutWithdrawalTransactionsInput)
    create!: InstanceType<typeof admin_bank_accountsCreateWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
}

@InputType()
export class admin_bank_accountsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => [admin_bank_accountsWhereInput], {nullable:true})
    AND?: Array<admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsWhereInput], {nullable:true})
    OR?: Array<admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsWhereInput], {nullable:true})
    NOT?: Array<admin_bank_accountsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    bankName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    accountNumber?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    holderName?: InstanceType<typeof StringFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    method?: InstanceType<typeof StringFilter>;
    @Field(() => Deposit_transactionsListRelationFilter, {nullable:true})
    depositTransactions?: InstanceType<typeof Deposit_transactionsListRelationFilter>;
    @Field(() => Withdrawal_transactionsListRelationFilter, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof Withdrawal_transactionsListRelationFilter>;
}

@InputType()
export class admin_bank_accountsWhereInput {
    @Field(() => [admin_bank_accountsWhereInput], {nullable:true})
    AND?: Array<admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsWhereInput], {nullable:true})
    OR?: Array<admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsWhereInput], {nullable:true})
    NOT?: Array<admin_bank_accountsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    bankName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    accountNumber?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    holderName?: InstanceType<typeof StringFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    method?: InstanceType<typeof StringFilter>;
    @Field(() => Deposit_transactionsListRelationFilter, {nullable:true})
    depositTransactions?: InstanceType<typeof Deposit_transactionsListRelationFilter>;
    @Field(() => Withdrawal_transactionsListRelationFilter, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof Withdrawal_transactionsListRelationFilter>;
}

@ObjectType()
export class admin_bank_accounts {
    @Field(() => ID, {nullable:false})
    adminBankAccountID!: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:false,defaultValue:false})
    enabled!: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => [deposit_transactions], {nullable:true})
    depositTransactions?: Array<deposit_transactions>;
    @Field(() => [withdrawal_transactions], {nullable:true})
    withdrawalTransactions?: Array<withdrawal_transactions>;
    @Field(() => Admin_bank_accountsCount, {nullable:false})
    _count?: InstanceType<typeof Admin_bank_accountsCount>;
}

@InputType()
export class admin_login_logsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    loginID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
}

@InputType()
export class admin_login_logsCreateManyAdminsInputEnvelope {
    @Field(() => [admin_login_logsCreateManyAdminsInput], {nullable:false})
    @Type(() => admin_login_logsCreateManyAdminsInput)
    data!: Array<admin_login_logsCreateManyAdminsInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class admin_login_logsCreateManyAdminsInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@InputType()
export class admin_login_logsCreateManyInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:false})
    adminID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@InputType()
export class admin_login_logsCreateNestedManyWithoutAdminsInput {
    @Field(() => [admin_login_logsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateWithoutAdminsInput)
    create?: Array<admin_login_logsCreateWithoutAdminsInput>;
    @Field(() => [admin_login_logsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<admin_login_logsCreateOrConnectWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => admin_login_logsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof admin_login_logsCreateManyAdminsInputEnvelope>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
}

@InputType()
export class admin_login_logsCreateOrConnectWithoutAdminsInput {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>;
    @Field(() => admin_login_logsCreateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_login_logsCreateWithoutAdminsInput)
    create!: InstanceType<typeof admin_login_logsCreateWithoutAdminsInput>;
}

@InputType()
export class admin_login_logsCreateWithoutAdminsInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@InputType()
export class admin_login_logsCreateInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
    @Field(() => adminsCreateNestedOneWithoutAdminLoginLogsInput, {nullable:false})
    admins!: InstanceType<typeof adminsCreateNestedOneWithoutAdminLoginLogsInput>;
}

@InputType()
export class admin_login_logsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    loginID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
}

@InputType()
export class admin_login_logsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    loginID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
}

@InputType()
export class admin_login_logsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class admin_login_logsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    loginID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
    @Field(() => admin_login_logsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof admin_login_logsCountOrderByAggregateInput>;
    @Field(() => admin_login_logsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof admin_login_logsMaxOrderByAggregateInput>;
    @Field(() => admin_login_logsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof admin_login_logsMinOrderByAggregateInput>;
}

@InputType()
export class admin_login_logsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    loginID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
    @Field(() => adminsOrderByWithRelationInput, {nullable:true})
    admins?: InstanceType<typeof adminsOrderByWithRelationInput>;
}

@InputType()
export class admin_login_logsScalarWhereWithAggregatesInput {
    @Field(() => [admin_login_logsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<admin_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => [admin_login_logsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<admin_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => [admin_login_logsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<admin_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    loginID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    ip?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class admin_login_logsScalarWhereInput {
    @Field(() => [admin_login_logsScalarWhereInput], {nullable:true})
    AND?: Array<admin_login_logsScalarWhereInput>;
    @Field(() => [admin_login_logsScalarWhereInput], {nullable:true})
    OR?: Array<admin_login_logsScalarWhereInput>;
    @Field(() => [admin_login_logsScalarWhereInput], {nullable:true})
    NOT?: Array<admin_login_logsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    loginID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    ip?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput {
    @Field(() => [admin_login_logsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateWithoutAdminsInput)
    create?: Array<admin_login_logsCreateWithoutAdminsInput>;
    @Field(() => [admin_login_logsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<admin_login_logsCreateOrConnectWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => admin_login_logsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof admin_login_logsCreateManyAdminsInputEnvelope>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
}

@InputType()
export class admin_login_logsUncheckedCreateWithoutAdminsInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@InputType()
export class admin_login_logsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:false})
    adminID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@InputType()
export class admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput {
    @Field(() => [admin_login_logsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateWithoutAdminsInput)
    create?: Array<admin_login_logsCreateWithoutAdminsInput>;
    @Field(() => [admin_login_logsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<admin_login_logsCreateOrConnectWithoutAdminsInput>;
    @Field(() => [admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput)
    upsert?: Array<admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => admin_login_logsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof admin_login_logsCreateManyAdminsInputEnvelope>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput)
    update?: Array<admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput>;
    @Field(() => [admin_login_logsUpdateManyWithWhereWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsUpdateManyWithWhereWithoutAdminsInput)
    updateMany?: Array<admin_login_logsUpdateManyWithWhereWithoutAdminsInput>;
    @Field(() => [admin_login_logsScalarWhereInput], {nullable:true})
    @Type(() => admin_login_logsScalarWhereInput)
    deleteMany?: Array<admin_login_logsScalarWhereInput>;
}

@InputType()
export class admin_login_logsUncheckedUpdateManyWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class admin_login_logsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class admin_login_logsUncheckedUpdateWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class admin_login_logsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class admin_login_logsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class admin_login_logsUpdateManyWithWhereWithoutAdminsInput {
    @Field(() => admin_login_logsScalarWhereInput, {nullable:false})
    @Type(() => admin_login_logsScalarWhereInput)
    where!: InstanceType<typeof admin_login_logsScalarWhereInput>;
    @Field(() => admin_login_logsUpdateManyMutationInput, {nullable:false})
    @Type(() => admin_login_logsUpdateManyMutationInput)
    data!: InstanceType<typeof admin_login_logsUpdateManyMutationInput>;
}

@InputType()
export class admin_login_logsUpdateManyWithoutAdminsNestedInput {
    @Field(() => [admin_login_logsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateWithoutAdminsInput)
    create?: Array<admin_login_logsCreateWithoutAdminsInput>;
    @Field(() => [admin_login_logsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<admin_login_logsCreateOrConnectWithoutAdminsInput>;
    @Field(() => [admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput)
    upsert?: Array<admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => admin_login_logsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof admin_login_logsCreateManyAdminsInputEnvelope>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => admin_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>>;
    @Field(() => [admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput)
    update?: Array<admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput>;
    @Field(() => [admin_login_logsUpdateManyWithWhereWithoutAdminsInput], {nullable:true})
    @Type(() => admin_login_logsUpdateManyWithWhereWithoutAdminsInput)
    updateMany?: Array<admin_login_logsUpdateManyWithWhereWithoutAdminsInput>;
    @Field(() => [admin_login_logsScalarWhereInput], {nullable:true})
    @Type(() => admin_login_logsScalarWhereInput)
    deleteMany?: Array<admin_login_logsScalarWhereInput>;
}

@InputType()
export class admin_login_logsUpdateWithWhereUniqueWithoutAdminsInput {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>;
    @Field(() => admin_login_logsUpdateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_login_logsUpdateWithoutAdminsInput)
    data!: InstanceType<typeof admin_login_logsUpdateWithoutAdminsInput>;
}

@InputType()
export class admin_login_logsUpdateWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class admin_login_logsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    loginID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => adminsUpdateOneRequiredWithoutAdminLoginLogsNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUpdateOneRequiredWithoutAdminLoginLogsNestedInput>;
}

@InputType()
export class admin_login_logsUpsertWithWhereUniqueWithoutAdminsInput {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: Prisma.AtLeast<admin_login_logsWhereUniqueInput, 'loginID'>;
    @Field(() => admin_login_logsUpdateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_login_logsUpdateWithoutAdminsInput)
    update!: InstanceType<typeof admin_login_logsUpdateWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_login_logsCreateWithoutAdminsInput)
    create!: InstanceType<typeof admin_login_logsCreateWithoutAdminsInput>;
}

@InputType()
export class admin_login_logsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => [admin_login_logsWhereInput], {nullable:true})
    AND?: Array<admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsWhereInput], {nullable:true})
    OR?: Array<admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsWhereInput], {nullable:true})
    NOT?: Array<admin_login_logsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    ip?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => AdminsRelationFilter, {nullable:true})
    admins?: InstanceType<typeof AdminsRelationFilter>;
}

@InputType()
export class admin_login_logsWhereInput {
    @Field(() => [admin_login_logsWhereInput], {nullable:true})
    AND?: Array<admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsWhereInput], {nullable:true})
    OR?: Array<admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsWhereInput], {nullable:true})
    NOT?: Array<admin_login_logsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    loginID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    ip?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => AdminsRelationFilter, {nullable:true})
    admins?: InstanceType<typeof AdminsRelationFilter>;
}

@ObjectType()
export class admin_login_logs {
    @Field(() => ID, {nullable:false})
    loginID!: string;
    @Field(() => String, {nullable:false})
    adminID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date;
    @Field(() => admins, {nullable:false})
    admins?: InstanceType<typeof admins>;
}

@InputType()
export class admin_role_accessesAdmin_roleIDAdmin_access_idCompoundUniqueInput {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
}

@InputType()
export class admin_role_accessesCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    admin_roleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    admin_access_id?: keyof typeof SortOrder;
}

@InputType()
export class admin_role_accessesCreateManyAdmin_accessesInputEnvelope {
    @Field(() => [admin_role_accessesCreateManyAdmin_accessesInput], {nullable:false})
    @Type(() => admin_role_accessesCreateManyAdmin_accessesInput)
    data!: Array<admin_role_accessesCreateManyAdmin_accessesInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class admin_role_accessesCreateManyAdmin_accessesInput {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
}

@InputType()
export class admin_role_accessesCreateManyAdmin_rolesInputEnvelope {
    @Field(() => [admin_role_accessesCreateManyAdmin_rolesInput], {nullable:false})
    @Type(() => admin_role_accessesCreateManyAdmin_rolesInput)
    data!: Array<admin_role_accessesCreateManyAdmin_rolesInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class admin_role_accessesCreateManyAdmin_rolesInput {
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
}

@InputType()
export class admin_role_accessesCreateManyInput {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
}

@InputType()
export class admin_role_accessesCreateNestedManyWithoutAdmin_accessesInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_accessesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_accessesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
}

@InputType()
export class admin_role_accessesCreateNestedManyWithoutAdmin_rolesInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_rolesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_rolesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
}

@InputType()
export class admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>;
    @Field(() => admin_role_accessesCreateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_role_accessesCreateWithoutAdmin_accessesInput)
    create!: InstanceType<typeof admin_role_accessesCreateWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>;
    @Field(() => admin_role_accessesCreateWithoutAdmin_rolesInput, {nullable:false})
    @Type(() => admin_role_accessesCreateWithoutAdmin_rolesInput)
    create!: InstanceType<typeof admin_role_accessesCreateWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_role_accessesCreateWithoutAdmin_accessesInput {
    @Field(() => admin_rolesCreateNestedOneWithoutAdmin_accessesInput, {nullable:false})
    admin_roles!: InstanceType<typeof admin_rolesCreateNestedOneWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_role_accessesCreateWithoutAdmin_rolesInput {
    @Field(() => admin_accessesCreateNestedOneWithoutRole_accessesInput, {nullable:false})
    admin_accesses!: InstanceType<typeof admin_accessesCreateNestedOneWithoutRole_accessesInput>;
}

@InputType()
export class admin_role_accessesCreateInput {
    @Field(() => admin_rolesCreateNestedOneWithoutAdmin_accessesInput, {nullable:false})
    admin_roles!: InstanceType<typeof admin_rolesCreateNestedOneWithoutAdmin_accessesInput>;
    @Field(() => admin_accessesCreateNestedOneWithoutRole_accessesInput, {nullable:false})
    admin_accesses!: InstanceType<typeof admin_accessesCreateNestedOneWithoutRole_accessesInput>;
}

@InputType()
export class admin_role_accessesMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    admin_roleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    admin_access_id?: keyof typeof SortOrder;
}

@InputType()
export class admin_role_accessesMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    admin_roleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    admin_access_id?: keyof typeof SortOrder;
}

@InputType()
export class admin_role_accessesOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class admin_role_accessesOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    admin_roleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    admin_access_id?: keyof typeof SortOrder;
    @Field(() => admin_role_accessesCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof admin_role_accessesCountOrderByAggregateInput>;
    @Field(() => admin_role_accessesMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof admin_role_accessesMaxOrderByAggregateInput>;
    @Field(() => admin_role_accessesMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof admin_role_accessesMinOrderByAggregateInput>;
}

@InputType()
export class admin_role_accessesOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    admin_roleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    admin_access_id?: keyof typeof SortOrder;
    @Field(() => admin_rolesOrderByWithRelationInput, {nullable:true})
    admin_roles?: InstanceType<typeof admin_rolesOrderByWithRelationInput>;
    @Field(() => admin_accessesOrderByWithRelationInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_accessesOrderByWithRelationInput>;
}

@InputType()
export class admin_role_accessesScalarWhereWithAggregatesInput {
    @Field(() => [admin_role_accessesScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<admin_role_accessesScalarWhereWithAggregatesInput>;
    @Field(() => [admin_role_accessesScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<admin_role_accessesScalarWhereWithAggregatesInput>;
    @Field(() => [admin_role_accessesScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<admin_role_accessesScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    admin_roleID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    admin_access_id?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class admin_role_accessesScalarWhereInput {
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    AND?: Array<admin_role_accessesScalarWhereInput>;
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    OR?: Array<admin_role_accessesScalarWhereInput>;
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    NOT?: Array<admin_role_accessesScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFilter>;
}

@InputType()
export class admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_accessesInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_accessesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_accessesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
}

@InputType()
export class admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_rolesInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_rolesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_rolesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
}

@InputType()
export class admin_role_accessesUncheckedCreateWithoutAdmin_accessesInput {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
}

@InputType()
export class admin_role_accessesUncheckedCreateWithoutAdmin_rolesInput {
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
}

@InputType()
export class admin_role_accessesUncheckedCreateInput {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
}

@InputType()
export class admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesNestedInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_accessesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput)
    upsert?: Array<admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_accessesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput)
    update?: Array<admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput)
    updateMany?: Array<admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    @Type(() => admin_role_accessesScalarWhereInput)
    deleteMany?: Array<admin_role_accessesScalarWhereInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesNestedInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_rolesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput)
    upsert?: Array<admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_rolesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput)
    update?: Array<admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput)
    updateMany?: Array<admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    @Type(() => admin_role_accessesScalarWhereInput)
    deleteMany?: Array<admin_role_accessesScalarWhereInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateWithoutAdmin_accessesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateWithoutAdmin_rolesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_role_accessesUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput {
    @Field(() => admin_role_accessesScalarWhereInput, {nullable:false})
    @Type(() => admin_role_accessesScalarWhereInput)
    where!: InstanceType<typeof admin_role_accessesScalarWhereInput>;
    @Field(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesInput)
    data!: InstanceType<typeof admin_role_accessesUncheckedUpdateManyWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput {
    @Field(() => admin_role_accessesScalarWhereInput, {nullable:false})
    @Type(() => admin_role_accessesScalarWhereInput)
    where!: InstanceType<typeof admin_role_accessesScalarWhereInput>;
    @Field(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesInput, {nullable:false})
    @Type(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesInput)
    data!: InstanceType<typeof admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_role_accessesUpdateManyWithoutAdmin_accessesNestedInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_accessesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput)
    upsert?: Array<admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_accessesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_accessesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput)
    update?: Array<admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput)
    updateMany?: Array<admin_role_accessesUpdateManyWithWhereWithoutAdmin_accessesInput>;
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    @Type(() => admin_role_accessesScalarWhereInput)
    deleteMany?: Array<admin_role_accessesScalarWhereInput>;
}

@InputType()
export class admin_role_accessesUpdateManyWithoutAdmin_rolesNestedInput {
    @Field(() => [admin_role_accessesCreateWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateWithoutAdmin_rolesInput)
    create?: Array<admin_role_accessesCreateWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput)
    connectOrCreate?: Array<admin_role_accessesCreateOrConnectWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput)
    upsert?: Array<admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput>;
    @Field(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope, {nullable:true})
    @Type(() => admin_role_accessesCreateManyAdmin_rolesInputEnvelope)
    createMany?: InstanceType<typeof admin_role_accessesCreateManyAdmin_rolesInputEnvelope>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesWhereUniqueInput], {nullable:true})
    @Type(() => admin_role_accessesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>>;
    @Field(() => [admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput)
    update?: Array<admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput], {nullable:true})
    @Type(() => admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput)
    updateMany?: Array<admin_role_accessesUpdateManyWithWhereWithoutAdmin_rolesInput>;
    @Field(() => [admin_role_accessesScalarWhereInput], {nullable:true})
    @Type(() => admin_role_accessesScalarWhereInput)
    deleteMany?: Array<admin_role_accessesScalarWhereInput>;
}

@InputType()
export class admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_accessesInput {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>;
    @Field(() => admin_role_accessesUpdateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_role_accessesUpdateWithoutAdmin_accessesInput)
    data!: InstanceType<typeof admin_role_accessesUpdateWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_role_accessesUpdateWithWhereUniqueWithoutAdmin_rolesInput {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>;
    @Field(() => admin_role_accessesUpdateWithoutAdmin_rolesInput, {nullable:false})
    @Type(() => admin_role_accessesUpdateWithoutAdmin_rolesInput)
    data!: InstanceType<typeof admin_role_accessesUpdateWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_role_accessesUpdateWithoutAdmin_accessesInput {
    @Field(() => admin_rolesUpdateOneRequiredWithoutAdmin_accessesNestedInput, {nullable:true})
    admin_roles?: InstanceType<typeof admin_rolesUpdateOneRequiredWithoutAdmin_accessesNestedInput>;
}

@InputType()
export class admin_role_accessesUpdateWithoutAdmin_rolesInput {
    @Field(() => admin_accessesUpdateOneRequiredWithoutRole_accessesNestedInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_accessesUpdateOneRequiredWithoutRole_accessesNestedInput>;
}

@InputType()
export class admin_role_accessesUpdateInput {
    @Field(() => admin_rolesUpdateOneRequiredWithoutAdmin_accessesNestedInput, {nullable:true})
    admin_roles?: InstanceType<typeof admin_rolesUpdateOneRequiredWithoutAdmin_accessesNestedInput>;
    @Field(() => admin_accessesUpdateOneRequiredWithoutRole_accessesNestedInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_accessesUpdateOneRequiredWithoutRole_accessesNestedInput>;
}

@InputType()
export class admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_accessesInput {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>;
    @Field(() => admin_role_accessesUpdateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_role_accessesUpdateWithoutAdmin_accessesInput)
    update!: InstanceType<typeof admin_role_accessesUpdateWithoutAdmin_accessesInput>;
    @Field(() => admin_role_accessesCreateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_role_accessesCreateWithoutAdmin_accessesInput)
    create!: InstanceType<typeof admin_role_accessesCreateWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_role_accessesUpsertWithWhereUniqueWithoutAdmin_rolesInput {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_role_accessesWhereUniqueInput, 'admin_roleID_admin_access_id'>;
    @Field(() => admin_role_accessesUpdateWithoutAdmin_rolesInput, {nullable:false})
    @Type(() => admin_role_accessesUpdateWithoutAdmin_rolesInput)
    update!: InstanceType<typeof admin_role_accessesUpdateWithoutAdmin_rolesInput>;
    @Field(() => admin_role_accessesCreateWithoutAdmin_rolesInput, {nullable:false})
    @Type(() => admin_role_accessesCreateWithoutAdmin_rolesInput)
    create!: InstanceType<typeof admin_role_accessesCreateWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_role_accessesWhereUniqueInput {
    @Field(() => admin_role_accessesAdmin_roleIDAdmin_access_idCompoundUniqueInput, {nullable:true})
    admin_roleID_admin_access_id?: InstanceType<typeof admin_role_accessesAdmin_roleIDAdmin_access_idCompoundUniqueInput>;
    @Field(() => [admin_role_accessesWhereInput], {nullable:true})
    AND?: Array<admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesWhereInput], {nullable:true})
    OR?: Array<admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesWhereInput], {nullable:true})
    NOT?: Array<admin_role_accessesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFilter>;
    @Field(() => Admin_rolesRelationFilter, {nullable:true})
    admin_roles?: InstanceType<typeof Admin_rolesRelationFilter>;
    @Field(() => Admin_accessesRelationFilter, {nullable:true})
    admin_accesses?: InstanceType<typeof Admin_accessesRelationFilter>;
}

@InputType()
export class admin_role_accessesWhereInput {
    @Field(() => [admin_role_accessesWhereInput], {nullable:true})
    AND?: Array<admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesWhereInput], {nullable:true})
    OR?: Array<admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesWhereInput], {nullable:true})
    NOT?: Array<admin_role_accessesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    admin_roleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    admin_access_id?: InstanceType<typeof StringFilter>;
    @Field(() => Admin_rolesRelationFilter, {nullable:true})
    admin_roles?: InstanceType<typeof Admin_rolesRelationFilter>;
    @Field(() => Admin_accessesRelationFilter, {nullable:true})
    admin_accesses?: InstanceType<typeof Admin_accessesRelationFilter>;
}

@ObjectType()
export class admin_role_accesses {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
    @Field(() => admin_roles, {nullable:false})
    admin_roles?: InstanceType<typeof admin_roles>;
    @Field(() => admin_accesses, {nullable:false})
    admin_accesses?: InstanceType<typeof admin_accesses>;
}

@InputType()
export class admin_rolesCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
}

@InputType()
export class admin_rolesCreateManyInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@InputType()
export class admin_rolesCreateNestedOneWithoutAdmin_accessesInput {
    @Field(() => admin_rolesCreateWithoutAdmin_accessesInput, {nullable:true})
    @Type(() => admin_rolesCreateWithoutAdmin_accessesInput)
    create?: InstanceType<typeof admin_rolesCreateWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesCreateOrConnectWithoutAdmin_accessesInput, {nullable:true})
    @Type(() => admin_rolesCreateOrConnectWithoutAdmin_accessesInput)
    connectOrCreate?: InstanceType<typeof admin_rolesCreateOrConnectWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    @Type(() => admin_rolesWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_rolesWhereUniqueInput, 'adminRoleID' | 'adminRoleName'>;
}

@InputType()
export class admin_rolesCreateNestedOneWithoutAdminsInput {
    @Field(() => admin_rolesCreateWithoutAdminsInput, {nullable:true})
    @Type(() => admin_rolesCreateWithoutAdminsInput)
    create?: InstanceType<typeof admin_rolesCreateWithoutAdminsInput>;
    @Field(() => admin_rolesCreateOrConnectWithoutAdminsInput, {nullable:true})
    @Type(() => admin_rolesCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: InstanceType<typeof admin_rolesCreateOrConnectWithoutAdminsInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    @Type(() => admin_rolesWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_rolesWhereUniqueInput, 'adminRoleID' | 'adminRoleName'>;
}

@InputType()
export class admin_rolesCreateOrConnectWithoutAdmin_accessesInput {
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_rolesWhereUniqueInput, 'adminRoleID' | 'adminRoleName'>;
    @Field(() => admin_rolesCreateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_rolesCreateWithoutAdmin_accessesInput)
    create!: InstanceType<typeof admin_rolesCreateWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_rolesCreateOrConnectWithoutAdminsInput {
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: Prisma.AtLeast<admin_rolesWhereUniqueInput, 'adminRoleID' | 'adminRoleName'>;
    @Field(() => admin_rolesCreateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_rolesCreateWithoutAdminsInput)
    create!: InstanceType<typeof admin_rolesCreateWithoutAdminsInput>;
}

@InputType()
export class admin_rolesCreateWithoutAdmin_accessesInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => adminsCreateNestedManyWithoutAdminRolesInput, {nullable:true})
    admins?: InstanceType<typeof adminsCreateNestedManyWithoutAdminRolesInput>;
}

@InputType()
export class admin_rolesCreateWithoutAdminsInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_role_accessesCreateNestedManyWithoutAdmin_rolesInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesCreateNestedManyWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_rolesCreateInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => adminsCreateNestedManyWithoutAdminRolesInput, {nullable:true})
    admins?: InstanceType<typeof adminsCreateNestedManyWithoutAdminRolesInput>;
    @Field(() => admin_role_accessesCreateNestedManyWithoutAdmin_rolesInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesCreateNestedManyWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_rolesMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
}

@InputType()
export class admin_rolesMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
}

@InputType()
export class admin_rolesOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => admin_rolesCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof admin_rolesCountOrderByAggregateInput>;
    @Field(() => admin_rolesMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof admin_rolesMaxOrderByAggregateInput>;
    @Field(() => admin_rolesMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof admin_rolesMinOrderByAggregateInput>;
}

@InputType()
export class admin_rolesOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => adminsOrderByRelationAggregateInput, {nullable:true})
    admins?: InstanceType<typeof adminsOrderByRelationAggregateInput>;
    @Field(() => admin_role_accessesOrderByRelationAggregateInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesOrderByRelationAggregateInput>;
}

@InputType()
export class admin_rolesScalarWhereWithAggregatesInput {
    @Field(() => [admin_rolesScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<admin_rolesScalarWhereWithAggregatesInput>;
    @Field(() => [admin_rolesScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<admin_rolesScalarWhereWithAggregatesInput>;
    @Field(() => [admin_rolesScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<admin_rolesScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminRoleID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminRoleName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolWithAggregatesFilter>;
}

@InputType()
export class admin_rolesUncheckedCreateWithoutAdmin_accessesInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => adminsUncheckedCreateNestedManyWithoutAdminRolesInput, {nullable:true})
    admins?: InstanceType<typeof adminsUncheckedCreateNestedManyWithoutAdminRolesInput>;
}

@InputType()
export class admin_rolesUncheckedCreateWithoutAdminsInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_rolesInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_rolesUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => adminsUncheckedCreateNestedManyWithoutAdminRolesInput, {nullable:true})
    admins?: InstanceType<typeof adminsUncheckedCreateNestedManyWithoutAdminRolesInput>;
    @Field(() => admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_rolesInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesUncheckedCreateNestedManyWithoutAdmin_rolesInput>;
}

@InputType()
export class admin_rolesUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class admin_rolesUncheckedUpdateWithoutAdmin_accessesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => adminsUncheckedUpdateManyWithoutAdminRolesNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUncheckedUpdateManyWithoutAdminRolesNestedInput>;
}

@InputType()
export class admin_rolesUncheckedUpdateWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesNestedInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesNestedInput>;
}

@InputType()
export class admin_rolesUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => adminsUncheckedUpdateManyWithoutAdminRolesNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUncheckedUpdateManyWithoutAdminRolesNestedInput>;
    @Field(() => admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesNestedInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesUncheckedUpdateManyWithoutAdmin_rolesNestedInput>;
}

@InputType()
export class admin_rolesUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class admin_rolesUpdateOneRequiredWithoutAdmin_accessesNestedInput {
    @Field(() => admin_rolesCreateWithoutAdmin_accessesInput, {nullable:true})
    @Type(() => admin_rolesCreateWithoutAdmin_accessesInput)
    create?: InstanceType<typeof admin_rolesCreateWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesCreateOrConnectWithoutAdmin_accessesInput, {nullable:true})
    @Type(() => admin_rolesCreateOrConnectWithoutAdmin_accessesInput)
    connectOrCreate?: InstanceType<typeof admin_rolesCreateOrConnectWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesUpsertWithoutAdmin_accessesInput, {nullable:true})
    @Type(() => admin_rolesUpsertWithoutAdmin_accessesInput)
    upsert?: InstanceType<typeof admin_rolesUpsertWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    @Type(() => admin_rolesWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_rolesWhereUniqueInput, 'adminRoleID' | 'adminRoleName'>;
    @Field(() => admin_rolesUpdateToOneWithWhereWithoutAdmin_accessesInput, {nullable:true})
    @Type(() => admin_rolesUpdateToOneWithWhereWithoutAdmin_accessesInput)
    update?: InstanceType<typeof admin_rolesUpdateToOneWithWhereWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_rolesUpdateOneRequiredWithoutAdminsNestedInput {
    @Field(() => admin_rolesCreateWithoutAdminsInput, {nullable:true})
    @Type(() => admin_rolesCreateWithoutAdminsInput)
    create?: InstanceType<typeof admin_rolesCreateWithoutAdminsInput>;
    @Field(() => admin_rolesCreateOrConnectWithoutAdminsInput, {nullable:true})
    @Type(() => admin_rolesCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: InstanceType<typeof admin_rolesCreateOrConnectWithoutAdminsInput>;
    @Field(() => admin_rolesUpsertWithoutAdminsInput, {nullable:true})
    @Type(() => admin_rolesUpsertWithoutAdminsInput)
    upsert?: InstanceType<typeof admin_rolesUpsertWithoutAdminsInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    @Type(() => admin_rolesWhereUniqueInput)
    connect?: Prisma.AtLeast<admin_rolesWhereUniqueInput, 'adminRoleID' | 'adminRoleName'>;
    @Field(() => admin_rolesUpdateToOneWithWhereWithoutAdminsInput, {nullable:true})
    @Type(() => admin_rolesUpdateToOneWithWhereWithoutAdminsInput)
    update?: InstanceType<typeof admin_rolesUpdateToOneWithWhereWithoutAdminsInput>;
}

@InputType()
export class admin_rolesUpdateToOneWithWhereWithoutAdmin_accessesInput {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => admin_rolesUpdateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_rolesUpdateWithoutAdmin_accessesInput)
    data!: InstanceType<typeof admin_rolesUpdateWithoutAdmin_accessesInput>;
}

@InputType()
export class admin_rolesUpdateToOneWithWhereWithoutAdminsInput {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => admin_rolesUpdateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_rolesUpdateWithoutAdminsInput)
    data!: InstanceType<typeof admin_rolesUpdateWithoutAdminsInput>;
}

@InputType()
export class admin_rolesUpdateWithoutAdmin_accessesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => adminsUpdateManyWithoutAdminRolesNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUpdateManyWithoutAdminRolesNestedInput>;
}

@InputType()
export class admin_rolesUpdateWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_role_accessesUpdateManyWithoutAdmin_rolesNestedInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesUpdateManyWithoutAdmin_rolesNestedInput>;
}

@InputType()
export class admin_rolesUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => adminsUpdateManyWithoutAdminRolesNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUpdateManyWithoutAdminRolesNestedInput>;
    @Field(() => admin_role_accessesUpdateManyWithoutAdmin_rolesNestedInput, {nullable:true})
    admin_accesses?: InstanceType<typeof admin_role_accessesUpdateManyWithoutAdmin_rolesNestedInput>;
}

@InputType()
export class admin_rolesUpsertWithoutAdmin_accessesInput {
    @Field(() => admin_rolesUpdateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_rolesUpdateWithoutAdmin_accessesInput)
    update!: InstanceType<typeof admin_rolesUpdateWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesCreateWithoutAdmin_accessesInput, {nullable:false})
    @Type(() => admin_rolesCreateWithoutAdmin_accessesInput)
    create!: InstanceType<typeof admin_rolesCreateWithoutAdmin_accessesInput>;
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
}

@InputType()
export class admin_rolesUpsertWithoutAdminsInput {
    @Field(() => admin_rolesUpdateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_rolesUpdateWithoutAdminsInput)
    update!: InstanceType<typeof admin_rolesUpdateWithoutAdminsInput>;
    @Field(() => admin_rolesCreateWithoutAdminsInput, {nullable:false})
    @Type(() => admin_rolesCreateWithoutAdminsInput)
    create!: InstanceType<typeof admin_rolesCreateWithoutAdminsInput>;
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
}

@InputType()
export class admin_rolesWhereUniqueInput {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:true})
    adminRoleName?: string;
    @Field(() => [admin_rolesWhereInput], {nullable:true})
    AND?: Array<admin_rolesWhereInput>;
    @Field(() => [admin_rolesWhereInput], {nullable:true})
    OR?: Array<admin_rolesWhereInput>;
    @Field(() => [admin_rolesWhereInput], {nullable:true})
    NOT?: Array<admin_rolesWhereInput>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => AdminsListRelationFilter, {nullable:true})
    admins?: InstanceType<typeof AdminsListRelationFilter>;
    @Field(() => Admin_role_accessesListRelationFilter, {nullable:true})
    admin_accesses?: InstanceType<typeof Admin_role_accessesListRelationFilter>;
}

@InputType()
export class admin_rolesWhereInput {
    @Field(() => [admin_rolesWhereInput], {nullable:true})
    AND?: Array<admin_rolesWhereInput>;
    @Field(() => [admin_rolesWhereInput], {nullable:true})
    OR?: Array<admin_rolesWhereInput>;
    @Field(() => [admin_rolesWhereInput], {nullable:true})
    NOT?: Array<admin_rolesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminRoleName?: InstanceType<typeof StringFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => AdminsListRelationFilter, {nullable:true})
    admins?: InstanceType<typeof AdminsListRelationFilter>;
    @Field(() => Admin_role_accessesListRelationFilter, {nullable:true})
    admin_accesses?: InstanceType<typeof Admin_role_accessesListRelationFilter>;
}

@ObjectType()
export class admin_roles {
    @Field(() => ID, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:false,defaultValue:true})
    enabled!: boolean;
    @Field(() => [admins], {nullable:true})
    admins?: Array<admins>;
    @Field(() => [admin_role_accesses], {nullable:true})
    admin_accesses?: Array<admin_role_accesses>;
    @Field(() => Admin_rolesCount, {nullable:false})
    _count?: InstanceType<typeof Admin_rolesCount>;
}

@ArgsType()
export class adminsAggregateArgs {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => [adminsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<adminsOrderByWithRelationInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class adminsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
}

@InputType()
export class adminsCreateManyAdminRolesInputEnvelope {
    @Field(() => [adminsCreateManyAdminRolesInput], {nullable:false})
    @Type(() => adminsCreateManyAdminRolesInput)
    data!: Array<adminsCreateManyAdminRolesInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class adminsCreateManyAdminRolesInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@InputType()
export class adminsCreateManyInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@InputType()
export class adminsCreateNestedManyWithoutAdminRolesInput {
    @Field(() => [adminsCreateWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateWithoutAdminRolesInput)
    create?: Array<adminsCreateWithoutAdminRolesInput>;
    @Field(() => [adminsCreateOrConnectWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutAdminRolesInput)
    connectOrCreate?: Array<adminsCreateOrConnectWithoutAdminRolesInput>;
    @Field(() => adminsCreateManyAdminRolesInputEnvelope, {nullable:true})
    @Type(() => adminsCreateManyAdminRolesInputEnvelope)
    createMany?: InstanceType<typeof adminsCreateManyAdminRolesInputEnvelope>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
}

@InputType()
export class adminsCreateNestedOneWithoutAdminLoginLogsInput {
    @Field(() => adminsCreateWithoutAdminLoginLogsInput, {nullable:true})
    @Type(() => adminsCreateWithoutAdminLoginLogsInput)
    create?: InstanceType<typeof adminsCreateWithoutAdminLoginLogsInput>;
    @Field(() => adminsCreateOrConnectWithoutAdminLoginLogsInput, {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutAdminLoginLogsInput)
    connectOrCreate?: InstanceType<typeof adminsCreateOrConnectWithoutAdminLoginLogsInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
}

@InputType()
export class adminsCreateNestedOneWithoutManualAdjustmentsInput {
    @Field(() => adminsCreateWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => adminsCreateWithoutManualAdjustmentsInput)
    create?: InstanceType<typeof adminsCreateWithoutManualAdjustmentsInput>;
    @Field(() => adminsCreateOrConnectWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutManualAdjustmentsInput)
    connectOrCreate?: InstanceType<typeof adminsCreateOrConnectWithoutManualAdjustmentsInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
}

@InputType()
export class adminsCreateOrConnectWithoutAdminLoginLogsInput {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsCreateWithoutAdminLoginLogsInput, {nullable:false})
    @Type(() => adminsCreateWithoutAdminLoginLogsInput)
    create!: InstanceType<typeof adminsCreateWithoutAdminLoginLogsInput>;
}

@InputType()
export class adminsCreateOrConnectWithoutAdminRolesInput {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsCreateWithoutAdminRolesInput, {nullable:false})
    @Type(() => adminsCreateWithoutAdminRolesInput)
    create!: InstanceType<typeof adminsCreateWithoutAdminRolesInput>;
}

@InputType()
export class adminsCreateOrConnectWithoutManualAdjustmentsInput {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsCreateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => adminsCreateWithoutManualAdjustmentsInput)
    create!: InstanceType<typeof adminsCreateWithoutManualAdjustmentsInput>;
}

@InputType()
export class adminsCreateWithoutAdminLoginLogsInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_rolesCreateNestedOneWithoutAdminsInput, {nullable:false})
    adminRoles!: InstanceType<typeof admin_rolesCreateNestedOneWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutAdminsInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsCreateWithoutAdminRolesInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_login_logsCreateNestedManyWithoutAdminsInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsCreateNestedManyWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutAdminsInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsCreateWithoutManualAdjustmentsInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_rolesCreateNestedOneWithoutAdminsInput, {nullable:false})
    adminRoles!: InstanceType<typeof admin_rolesCreateNestedOneWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateNestedManyWithoutAdminsInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsCreateInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_rolesCreateNestedOneWithoutAdminsInput, {nullable:false})
    adminRoles!: InstanceType<typeof admin_rolesCreateNestedOneWithoutAdminsInput>;
    @Field(() => admin_login_logsCreateNestedManyWithoutAdminsInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsCreateNestedManyWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutAdminsInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutAdminsInput>;
}

@ArgsType()
export class adminsGroupByArgs {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => [adminsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<adminsOrderByWithAggregationInput>;
    @Field(() => [AdminsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof AdminsScalarFieldEnum>;
    @Field(() => adminsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof adminsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class adminsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
}

@InputType()
export class adminsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
}

@InputType()
export class adminsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class adminsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => adminsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof adminsCountOrderByAggregateInput>;
    @Field(() => adminsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof adminsMaxOrderByAggregateInput>;
    @Field(() => adminsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof adminsMinOrderByAggregateInput>;
}

@InputType()
export class adminsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    adminID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminRoleID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => admin_rolesOrderByWithRelationInput, {nullable:true})
    adminRoles?: InstanceType<typeof admin_rolesOrderByWithRelationInput>;
    @Field(() => admin_login_logsOrderByRelationAggregateInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsOrderByRelationAggregateInput>;
    @Field(() => manual_adjustmentsOrderByRelationAggregateInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsOrderByRelationAggregateInput>;
}

@InputType()
export class adminsScalarWhereWithAggregatesInput {
    @Field(() => [adminsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<adminsScalarWhereWithAggregatesInput>;
    @Field(() => [adminsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<adminsScalarWhereWithAggregatesInput>;
    @Field(() => [adminsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<adminsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminPassword?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminRoleID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolWithAggregatesFilter>;
}

@InputType()
export class adminsScalarWhereInput {
    @Field(() => [adminsScalarWhereInput], {nullable:true})
    AND?: Array<adminsScalarWhereInput>;
    @Field(() => [adminsScalarWhereInput], {nullable:true})
    OR?: Array<adminsScalarWhereInput>;
    @Field(() => [adminsScalarWhereInput], {nullable:true})
    NOT?: Array<adminsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminPassword?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
}

@InputType()
export class adminsUncheckedCreateNestedManyWithoutAdminRolesInput {
    @Field(() => [adminsCreateWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateWithoutAdminRolesInput)
    create?: Array<adminsCreateWithoutAdminRolesInput>;
    @Field(() => [adminsCreateOrConnectWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutAdminRolesInput)
    connectOrCreate?: Array<adminsCreateOrConnectWithoutAdminRolesInput>;
    @Field(() => adminsCreateManyAdminRolesInputEnvelope, {nullable:true})
    @Type(() => adminsCreateManyAdminRolesInputEnvelope)
    createMany?: InstanceType<typeof adminsCreateManyAdminRolesInputEnvelope>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
}

@InputType()
export class adminsUncheckedCreateWithoutAdminLoginLogsInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsUncheckedCreateWithoutAdminRolesInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsUncheckedCreateWithoutManualAdjustmentsInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUncheckedCreateNestedManyWithoutAdminsInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput>;
}

@InputType()
export class adminsUncheckedUpdateManyWithoutAdminRolesNestedInput {
    @Field(() => [adminsCreateWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateWithoutAdminRolesInput)
    create?: Array<adminsCreateWithoutAdminRolesInput>;
    @Field(() => [adminsCreateOrConnectWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutAdminRolesInput)
    connectOrCreate?: Array<adminsCreateOrConnectWithoutAdminRolesInput>;
    @Field(() => [adminsUpsertWithWhereUniqueWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsUpsertWithWhereUniqueWithoutAdminRolesInput)
    upsert?: Array<adminsUpsertWithWhereUniqueWithoutAdminRolesInput>;
    @Field(() => adminsCreateManyAdminRolesInputEnvelope, {nullable:true})
    @Type(() => adminsCreateManyAdminRolesInputEnvelope)
    createMany?: InstanceType<typeof adminsCreateManyAdminRolesInputEnvelope>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsUpdateWithWhereUniqueWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsUpdateWithWhereUniqueWithoutAdminRolesInput)
    update?: Array<adminsUpdateWithWhereUniqueWithoutAdminRolesInput>;
    @Field(() => [adminsUpdateManyWithWhereWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsUpdateManyWithWhereWithoutAdminRolesInput)
    updateMany?: Array<adminsUpdateManyWithWhereWithoutAdminRolesInput>;
    @Field(() => [adminsScalarWhereInput], {nullable:true})
    @Type(() => adminsScalarWhereInput)
    deleteMany?: Array<adminsScalarWhereInput>;
}

@InputType()
export class adminsUncheckedUpdateManyWithoutAdminRolesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class adminsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class adminsUncheckedUpdateWithoutAdminLoginLogsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUncheckedUpdateWithoutAdminRolesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUncheckedUpdateWithoutManualAdjustmentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUncheckedUpdateManyWithoutAdminsNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class adminsUpdateManyWithWhereWithoutAdminRolesInput {
    @Field(() => adminsScalarWhereInput, {nullable:false})
    @Type(() => adminsScalarWhereInput)
    where!: InstanceType<typeof adminsScalarWhereInput>;
    @Field(() => adminsUpdateManyMutationInput, {nullable:false})
    @Type(() => adminsUpdateManyMutationInput)
    data!: InstanceType<typeof adminsUpdateManyMutationInput>;
}

@InputType()
export class adminsUpdateManyWithoutAdminRolesNestedInput {
    @Field(() => [adminsCreateWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateWithoutAdminRolesInput)
    create?: Array<adminsCreateWithoutAdminRolesInput>;
    @Field(() => [adminsCreateOrConnectWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutAdminRolesInput)
    connectOrCreate?: Array<adminsCreateOrConnectWithoutAdminRolesInput>;
    @Field(() => [adminsUpsertWithWhereUniqueWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsUpsertWithWhereUniqueWithoutAdminRolesInput)
    upsert?: Array<adminsUpsertWithWhereUniqueWithoutAdminRolesInput>;
    @Field(() => adminsCreateManyAdminRolesInputEnvelope, {nullable:true})
    @Type(() => adminsCreateManyAdminRolesInputEnvelope)
    createMany?: InstanceType<typeof adminsCreateManyAdminRolesInputEnvelope>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsWhereUniqueInput], {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>>;
    @Field(() => [adminsUpdateWithWhereUniqueWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsUpdateWithWhereUniqueWithoutAdminRolesInput)
    update?: Array<adminsUpdateWithWhereUniqueWithoutAdminRolesInput>;
    @Field(() => [adminsUpdateManyWithWhereWithoutAdminRolesInput], {nullable:true})
    @Type(() => adminsUpdateManyWithWhereWithoutAdminRolesInput)
    updateMany?: Array<adminsUpdateManyWithWhereWithoutAdminRolesInput>;
    @Field(() => [adminsScalarWhereInput], {nullable:true})
    @Type(() => adminsScalarWhereInput)
    deleteMany?: Array<adminsScalarWhereInput>;
}

@InputType()
export class adminsUpdateOneRequiredWithoutAdminLoginLogsNestedInput {
    @Field(() => adminsCreateWithoutAdminLoginLogsInput, {nullable:true})
    @Type(() => adminsCreateWithoutAdminLoginLogsInput)
    create?: InstanceType<typeof adminsCreateWithoutAdminLoginLogsInput>;
    @Field(() => adminsCreateOrConnectWithoutAdminLoginLogsInput, {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutAdminLoginLogsInput)
    connectOrCreate?: InstanceType<typeof adminsCreateOrConnectWithoutAdminLoginLogsInput>;
    @Field(() => adminsUpsertWithoutAdminLoginLogsInput, {nullable:true})
    @Type(() => adminsUpsertWithoutAdminLoginLogsInput)
    upsert?: InstanceType<typeof adminsUpsertWithoutAdminLoginLogsInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsUpdateToOneWithWhereWithoutAdminLoginLogsInput, {nullable:true})
    @Type(() => adminsUpdateToOneWithWhereWithoutAdminLoginLogsInput)
    update?: InstanceType<typeof adminsUpdateToOneWithWhereWithoutAdminLoginLogsInput>;
}

@InputType()
export class adminsUpdateOneRequiredWithoutManualAdjustmentsNestedInput {
    @Field(() => adminsCreateWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => adminsCreateWithoutManualAdjustmentsInput)
    create?: InstanceType<typeof adminsCreateWithoutManualAdjustmentsInput>;
    @Field(() => adminsCreateOrConnectWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => adminsCreateOrConnectWithoutManualAdjustmentsInput)
    connectOrCreate?: InstanceType<typeof adminsCreateOrConnectWithoutManualAdjustmentsInput>;
    @Field(() => adminsUpsertWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => adminsUpsertWithoutManualAdjustmentsInput)
    upsert?: InstanceType<typeof adminsUpsertWithoutManualAdjustmentsInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    @Type(() => adminsWhereUniqueInput)
    connect?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsUpdateToOneWithWhereWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => adminsUpdateToOneWithWhereWithoutManualAdjustmentsInput)
    update?: InstanceType<typeof adminsUpdateToOneWithWhereWithoutManualAdjustmentsInput>;
}

@InputType()
export class adminsUpdateToOneWithWhereWithoutAdminLoginLogsInput {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => adminsUpdateWithoutAdminLoginLogsInput, {nullable:false})
    @Type(() => adminsUpdateWithoutAdminLoginLogsInput)
    data!: InstanceType<typeof adminsUpdateWithoutAdminLoginLogsInput>;
}

@InputType()
export class adminsUpdateToOneWithWhereWithoutManualAdjustmentsInput {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => adminsUpdateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => adminsUpdateWithoutManualAdjustmentsInput)
    data!: InstanceType<typeof adminsUpdateWithoutManualAdjustmentsInput>;
}

@InputType()
export class adminsUpdateWithWhereUniqueWithoutAdminRolesInput {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsUpdateWithoutAdminRolesInput, {nullable:false})
    @Type(() => adminsUpdateWithoutAdminRolesInput)
    data!: InstanceType<typeof adminsUpdateWithoutAdminRolesInput>;
}

@InputType()
export class adminsUpdateWithoutAdminLoginLogsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_rolesUpdateOneRequiredWithoutAdminsNestedInput, {nullable:true})
    adminRoles?: InstanceType<typeof admin_rolesUpdateOneRequiredWithoutAdminsNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutAdminsNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUpdateWithoutAdminRolesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_login_logsUpdateManyWithoutAdminsNestedInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUpdateManyWithoutAdminsNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutAdminsNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUpdateWithoutManualAdjustmentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_rolesUpdateOneRequiredWithoutAdminsNestedInput, {nullable:true})
    adminRoles?: InstanceType<typeof admin_rolesUpdateOneRequiredWithoutAdminsNestedInput>;
    @Field(() => admin_login_logsUpdateManyWithoutAdminsNestedInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => admin_rolesUpdateOneRequiredWithoutAdminsNestedInput, {nullable:true})
    adminRoles?: InstanceType<typeof admin_rolesUpdateOneRequiredWithoutAdminsNestedInput>;
    @Field(() => admin_login_logsUpdateManyWithoutAdminsNestedInput, {nullable:true})
    adminLoginLogs?: InstanceType<typeof admin_login_logsUpdateManyWithoutAdminsNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutAdminsNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutAdminsNestedInput>;
}

@InputType()
export class adminsUpsertWithWhereUniqueWithoutAdminRolesInput {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsUpdateWithoutAdminRolesInput, {nullable:false})
    @Type(() => adminsUpdateWithoutAdminRolesInput)
    update!: InstanceType<typeof adminsUpdateWithoutAdminRolesInput>;
    @Field(() => adminsCreateWithoutAdminRolesInput, {nullable:false})
    @Type(() => adminsCreateWithoutAdminRolesInput)
    create!: InstanceType<typeof adminsCreateWithoutAdminRolesInput>;
}

@InputType()
export class adminsUpsertWithoutAdminLoginLogsInput {
    @Field(() => adminsUpdateWithoutAdminLoginLogsInput, {nullable:false})
    @Type(() => adminsUpdateWithoutAdminLoginLogsInput)
    update!: InstanceType<typeof adminsUpdateWithoutAdminLoginLogsInput>;
    @Field(() => adminsCreateWithoutAdminLoginLogsInput, {nullable:false})
    @Type(() => adminsCreateWithoutAdminLoginLogsInput)
    create!: InstanceType<typeof adminsCreateWithoutAdminLoginLogsInput>;
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
}

@InputType()
export class adminsUpsertWithoutManualAdjustmentsInput {
    @Field(() => adminsUpdateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => adminsUpdateWithoutManualAdjustmentsInput)
    update!: InstanceType<typeof adminsUpdateWithoutManualAdjustmentsInput>;
    @Field(() => adminsCreateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => adminsCreateWithoutManualAdjustmentsInput)
    create!: InstanceType<typeof adminsCreateWithoutManualAdjustmentsInput>;
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
}

@InputType()
export class adminsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:true})
    adminName?: string;
    @Field(() => [adminsWhereInput], {nullable:true})
    AND?: Array<adminsWhereInput>;
    @Field(() => [adminsWhereInput], {nullable:true})
    OR?: Array<adminsWhereInput>;
    @Field(() => [adminsWhereInput], {nullable:true})
    NOT?: Array<adminsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminPassword?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => Admin_rolesRelationFilter, {nullable:true})
    adminRoles?: InstanceType<typeof Admin_rolesRelationFilter>;
    @Field(() => Admin_login_logsListRelationFilter, {nullable:true})
    adminLoginLogs?: InstanceType<typeof Admin_login_logsListRelationFilter>;
    @Field(() => Manual_adjustmentsListRelationFilter, {nullable:true})
    manualAdjustments?: InstanceType<typeof Manual_adjustmentsListRelationFilter>;
}

@InputType()
export class adminsWhereInput {
    @Field(() => [adminsWhereInput], {nullable:true})
    AND?: Array<adminsWhereInput>;
    @Field(() => [adminsWhereInput], {nullable:true})
    OR?: Array<adminsWhereInput>;
    @Field(() => [adminsWhereInput], {nullable:true})
    NOT?: Array<adminsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    adminID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminPassword?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminRoleID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => Admin_rolesRelationFilter, {nullable:true})
    adminRoles?: InstanceType<typeof Admin_rolesRelationFilter>;
    @Field(() => Admin_login_logsListRelationFilter, {nullable:true})
    adminLoginLogs?: InstanceType<typeof Admin_login_logsListRelationFilter>;
    @Field(() => Manual_adjustmentsListRelationFilter, {nullable:true})
    manualAdjustments?: InstanceType<typeof Manual_adjustmentsListRelationFilter>;
}

@ObjectType()
export class admins {
    @Field(() => ID, {nullable:false})
    adminID!: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => Date, {nullable:false})
    udate!: Date;
    @Field(() => Boolean, {nullable:false,defaultValue:true})
    enabled!: boolean;
    @Field(() => admin_roles, {nullable:false})
    adminRoles?: InstanceType<typeof admin_roles>;
    @Field(() => [admin_login_logs], {nullable:true})
    adminLoginLogs?: Array<admin_login_logs>;
    @Field(() => [manual_adjustments], {nullable:true})
    manualAdjustments?: Array<manual_adjustments>;
    @Field(() => AdminsCount, {nullable:false})
    _count?: InstanceType<typeof AdminsCount>;
}

@ArgsType()
export class CreateManyadminsArgs {
    @Field(() => [adminsCreateManyInput], {nullable:false})
    @Type(() => adminsCreateManyInput)
    data!: Array<adminsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateOneadminsArgs {
    @Field(() => adminsCreateInput, {nullable:false})
    @Type(() => adminsCreateInput)
    data!: InstanceType<typeof adminsCreateInput>;
}

@ArgsType()
export class DeleteManyadminsArgs {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
}

@ArgsType()
export class DeleteOneadminsArgs {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
}

@ArgsType()
export class FindFirstadminsOrThrowArgs {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => [adminsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<adminsOrderByWithRelationInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [AdminsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof AdminsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminsArgs {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => [adminsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<adminsOrderByWithRelationInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [AdminsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof AdminsScalarFieldEnum>;
}

@ArgsType()
export class FindManyadminsArgs {
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
    @Field(() => [adminsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<adminsOrderByWithRelationInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [AdminsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof AdminsScalarFieldEnum>;
}

@ArgsType()
export class FindUniqueadminsOrThrowArgs {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
}

@ArgsType()
export class FindUniqueadminsArgs {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
}

@ArgsType()
export class UpdateManyadminsArgs {
    @Field(() => adminsUpdateManyMutationInput, {nullable:false})
    @Type(() => adminsUpdateManyMutationInput)
    data!: InstanceType<typeof adminsUpdateManyMutationInput>;
    @Field(() => adminsWhereInput, {nullable:true})
    @Type(() => adminsWhereInput)
    where?: InstanceType<typeof adminsWhereInput>;
}

@ArgsType()
export class UpdateOneadminsArgs {
    @Field(() => adminsUpdateInput, {nullable:false})
    @Type(() => adminsUpdateInput)
    data!: InstanceType<typeof adminsUpdateInput>;
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
}

@ArgsType()
export class UpsertOneadminsArgs {
    @Field(() => adminsWhereUniqueInput, {nullable:false})
    @Type(() => adminsWhereUniqueInput)
    where!: Prisma.AtLeast<adminsWhereUniqueInput, 'adminID' | 'adminName'>;
    @Field(() => adminsCreateInput, {nullable:false})
    @Type(() => adminsCreateInput)
    create!: InstanceType<typeof adminsCreateInput>;
    @Field(() => adminsUpdateInput, {nullable:false})
    @Type(() => adminsUpdateInput)
    update!: InstanceType<typeof adminsUpdateInput>;
}

@InputType()
export class agent_rebatesAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
}

@InputType()
export class agent_rebatesCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    agentRebateID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    fromDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    thruDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    isActive?: keyof typeof SortOrder;
}

@InputType()
export class agent_rebatesCreateManyAgentsInputEnvelope {
    @Field(() => [agent_rebatesCreateManyAgentsInput], {nullable:false})
    @Type(() => agent_rebatesCreateManyAgentsInput)
    data!: Array<agent_rebatesCreateManyAgentsInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class agent_rebatesCreateManyAgentsInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
}

@InputType()
export class agent_rebatesCreateManyInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
}

@InputType()
export class agent_rebatesCreateNestedManyWithoutAgentsInput {
    @Field(() => [agent_rebatesCreateWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateWithoutAgentsInput)
    create?: Array<agent_rebatesCreateWithoutAgentsInput>;
    @Field(() => [agent_rebatesCreateOrConnectWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateOrConnectWithoutAgentsInput)
    connectOrCreate?: Array<agent_rebatesCreateOrConnectWithoutAgentsInput>;
    @Field(() => agent_rebatesCreateManyAgentsInputEnvelope, {nullable:true})
    @Type(() => agent_rebatesCreateManyAgentsInputEnvelope)
    createMany?: InstanceType<typeof agent_rebatesCreateManyAgentsInputEnvelope>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
}

@InputType()
export class agent_rebatesCreateOrConnectWithoutAgentsInput {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>;
    @Field(() => agent_rebatesCreateWithoutAgentsInput, {nullable:false})
    @Type(() => agent_rebatesCreateWithoutAgentsInput)
    create!: InstanceType<typeof agent_rebatesCreateWithoutAgentsInput>;
}

@InputType()
export class agent_rebatesCreateWithoutAgentsInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
}

@InputType()
export class agent_rebatesCreateInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
    @Field(() => agentsCreateNestedOneWithoutAgentRebatesInput, {nullable:false})
    agents!: InstanceType<typeof agentsCreateNestedOneWithoutAgentRebatesInput>;
}

@InputType()
export class agent_rebatesMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    agentRebateID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    fromDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    thruDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    isActive?: keyof typeof SortOrder;
}

@InputType()
export class agent_rebatesMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    agentRebateID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    fromDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    thruDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    isActive?: keyof typeof SortOrder;
}

@InputType()
export class agent_rebatesOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class agent_rebatesOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    agentRebateID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    fromDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    thruDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    isActive?: keyof typeof SortOrder;
    @Field(() => agent_rebatesCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof agent_rebatesCountOrderByAggregateInput>;
    @Field(() => agent_rebatesAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof agent_rebatesAvgOrderByAggregateInput>;
    @Field(() => agent_rebatesMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof agent_rebatesMaxOrderByAggregateInput>;
    @Field(() => agent_rebatesMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof agent_rebatesMinOrderByAggregateInput>;
    @Field(() => agent_rebatesSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof agent_rebatesSumOrderByAggregateInput>;
}

@InputType()
export class agent_rebatesOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    agentRebateID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    fromDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    thruDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    isActive?: keyof typeof SortOrder;
    @Field(() => agentsOrderByWithRelationInput, {nullable:true})
    agents?: InstanceType<typeof agentsOrderByWithRelationInput>;
}

@InputType()
export class agent_rebatesScalarWhereWithAggregatesInput {
    @Field(() => [agent_rebatesScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<agent_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => [agent_rebatesScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<agent_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => [agent_rebatesScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<agent_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    agentRebateID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    agentID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    gameID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    rebate?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    isActive?: InstanceType<typeof BoolWithAggregatesFilter>;
}

@InputType()
export class agent_rebatesScalarWhereInput {
    @Field(() => [agent_rebatesScalarWhereInput], {nullable:true})
    AND?: Array<agent_rebatesScalarWhereInput>;
    @Field(() => [agent_rebatesScalarWhereInput], {nullable:true})
    OR?: Array<agent_rebatesScalarWhereInput>;
    @Field(() => [agent_rebatesScalarWhereInput], {nullable:true})
    NOT?: Array<agent_rebatesScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    rebate?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    isActive?: InstanceType<typeof BoolFilter>;
}

@InputType()
export class agent_rebatesSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    rebate?: keyof typeof SortOrder;
}

@InputType()
export class agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput {
    @Field(() => [agent_rebatesCreateWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateWithoutAgentsInput)
    create?: Array<agent_rebatesCreateWithoutAgentsInput>;
    @Field(() => [agent_rebatesCreateOrConnectWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateOrConnectWithoutAgentsInput)
    connectOrCreate?: Array<agent_rebatesCreateOrConnectWithoutAgentsInput>;
    @Field(() => agent_rebatesCreateManyAgentsInputEnvelope, {nullable:true})
    @Type(() => agent_rebatesCreateManyAgentsInputEnvelope)
    createMany?: InstanceType<typeof agent_rebatesCreateManyAgentsInputEnvelope>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
}

@InputType()
export class agent_rebatesUncheckedCreateWithoutAgentsInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
}

@InputType()
export class agent_rebatesUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
}

@InputType()
export class agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput {
    @Field(() => [agent_rebatesCreateWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateWithoutAgentsInput)
    create?: Array<agent_rebatesCreateWithoutAgentsInput>;
    @Field(() => [agent_rebatesCreateOrConnectWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateOrConnectWithoutAgentsInput)
    connectOrCreate?: Array<agent_rebatesCreateOrConnectWithoutAgentsInput>;
    @Field(() => [agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput)
    upsert?: Array<agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput>;
    @Field(() => agent_rebatesCreateManyAgentsInputEnvelope, {nullable:true})
    @Type(() => agent_rebatesCreateManyAgentsInputEnvelope)
    createMany?: InstanceType<typeof agent_rebatesCreateManyAgentsInputEnvelope>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput)
    update?: Array<agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput>;
    @Field(() => [agent_rebatesUpdateManyWithWhereWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesUpdateManyWithWhereWithoutAgentsInput)
    updateMany?: Array<agent_rebatesUpdateManyWithWhereWithoutAgentsInput>;
    @Field(() => [agent_rebatesScalarWhereInput], {nullable:true})
    @Type(() => agent_rebatesScalarWhereInput)
    deleteMany?: Array<agent_rebatesScalarWhereInput>;
}

@InputType()
export class agent_rebatesUncheckedUpdateManyWithoutAgentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agent_rebatesUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agent_rebatesUncheckedUpdateWithoutAgentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agent_rebatesUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agent_rebatesUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agent_rebatesUpdateManyWithWhereWithoutAgentsInput {
    @Field(() => agent_rebatesScalarWhereInput, {nullable:false})
    @Type(() => agent_rebatesScalarWhereInput)
    where!: InstanceType<typeof agent_rebatesScalarWhereInput>;
    @Field(() => agent_rebatesUpdateManyMutationInput, {nullable:false})
    @Type(() => agent_rebatesUpdateManyMutationInput)
    data!: InstanceType<typeof agent_rebatesUpdateManyMutationInput>;
}

@InputType()
export class agent_rebatesUpdateManyWithoutAgentsNestedInput {
    @Field(() => [agent_rebatesCreateWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateWithoutAgentsInput)
    create?: Array<agent_rebatesCreateWithoutAgentsInput>;
    @Field(() => [agent_rebatesCreateOrConnectWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesCreateOrConnectWithoutAgentsInput)
    connectOrCreate?: Array<agent_rebatesCreateOrConnectWithoutAgentsInput>;
    @Field(() => [agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput)
    upsert?: Array<agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput>;
    @Field(() => agent_rebatesCreateManyAgentsInputEnvelope, {nullable:true})
    @Type(() => agent_rebatesCreateManyAgentsInputEnvelope)
    createMany?: InstanceType<typeof agent_rebatesCreateManyAgentsInputEnvelope>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => agent_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>>;
    @Field(() => [agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput)
    update?: Array<agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput>;
    @Field(() => [agent_rebatesUpdateManyWithWhereWithoutAgentsInput], {nullable:true})
    @Type(() => agent_rebatesUpdateManyWithWhereWithoutAgentsInput)
    updateMany?: Array<agent_rebatesUpdateManyWithWhereWithoutAgentsInput>;
    @Field(() => [agent_rebatesScalarWhereInput], {nullable:true})
    @Type(() => agent_rebatesScalarWhereInput)
    deleteMany?: Array<agent_rebatesScalarWhereInput>;
}

@InputType()
export class agent_rebatesUpdateWithWhereUniqueWithoutAgentsInput {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>;
    @Field(() => agent_rebatesUpdateWithoutAgentsInput, {nullable:false})
    @Type(() => agent_rebatesUpdateWithoutAgentsInput)
    data!: InstanceType<typeof agent_rebatesUpdateWithoutAgentsInput>;
}

@InputType()
export class agent_rebatesUpdateWithoutAgentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agent_rebatesUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebate?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    isActive?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutAgentRebatesNestedInput, {nullable:true})
    agents?: InstanceType<typeof agentsUpdateOneRequiredWithoutAgentRebatesNestedInput>;
}

@InputType()
export class agent_rebatesUpsertWithWhereUniqueWithoutAgentsInput {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: Prisma.AtLeast<agent_rebatesWhereUniqueInput, 'agentRebateID'>;
    @Field(() => agent_rebatesUpdateWithoutAgentsInput, {nullable:false})
    @Type(() => agent_rebatesUpdateWithoutAgentsInput)
    update!: InstanceType<typeof agent_rebatesUpdateWithoutAgentsInput>;
    @Field(() => agent_rebatesCreateWithoutAgentsInput, {nullable:false})
    @Type(() => agent_rebatesCreateWithoutAgentsInput)
    create!: InstanceType<typeof agent_rebatesCreateWithoutAgentsInput>;
}

@InputType()
export class agent_rebatesWhereUniqueInput {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => [agent_rebatesWhereInput], {nullable:true})
    AND?: Array<agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesWhereInput], {nullable:true})
    OR?: Array<agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesWhereInput], {nullable:true})
    NOT?: Array<agent_rebatesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    rebate?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    isActive?: InstanceType<typeof BoolFilter>;
    @Field(() => AgentsRelationFilter, {nullable:true})
    agents?: InstanceType<typeof AgentsRelationFilter>;
}

@InputType()
export class agent_rebatesWhereInput {
    @Field(() => [agent_rebatesWhereInput], {nullable:true})
    AND?: Array<agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesWhereInput], {nullable:true})
    OR?: Array<agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesWhereInput], {nullable:true})
    NOT?: Array<agent_rebatesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    agentRebateID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    rebate?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    fromDate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    thruDate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    isActive?: InstanceType<typeof BoolFilter>;
    @Field(() => AgentsRelationFilter, {nullable:true})
    agents?: InstanceType<typeof AgentsRelationFilter>;
}

@ObjectType()
export class agent_rebates {
    @Field(() => ID, {nullable:false})
    agentRebateID!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date;
    @Field(() => Date, {nullable:false})
    thruDate!: Date;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
    @Field(() => agents, {nullable:false})
    agents?: InstanceType<typeof agents>;
}

@ArgsType()
export class agentsAggregateArgs {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => [agentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agentsOrderByWithRelationInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class agentsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    parentAgentID?: keyof typeof SortOrder;
}

@InputType()
export class agentsCreateManyParentInputEnvelope {
    @Field(() => [agentsCreateManyParentInput], {nullable:false})
    @Type(() => agentsCreateManyParentInput)
    data!: Array<agentsCreateManyParentInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class agentsCreateManyParentInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@InputType()
export class agentsCreateManyInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
}

@InputType()
export class agentsCreateNestedManyWithoutParentInput {
    @Field(() => [agentsCreateWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateWithoutParentInput)
    create?: Array<agentsCreateWithoutParentInput>;
    @Field(() => [agentsCreateOrConnectWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutParentInput)
    connectOrCreate?: Array<agentsCreateOrConnectWithoutParentInput>;
    @Field(() => agentsCreateManyParentInputEnvelope, {nullable:true})
    @Type(() => agentsCreateManyParentInputEnvelope)
    createMany?: InstanceType<typeof agentsCreateManyParentInputEnvelope>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
}

@InputType()
export class agentsCreateNestedOneWithoutAgentRebatesInput {
    @Field(() => agentsCreateWithoutAgentRebatesInput, {nullable:true})
    @Type(() => agentsCreateWithoutAgentRebatesInput)
    create?: InstanceType<typeof agentsCreateWithoutAgentRebatesInput>;
    @Field(() => agentsCreateOrConnectWithoutAgentRebatesInput, {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutAgentRebatesInput)
    connectOrCreate?: InstanceType<typeof agentsCreateOrConnectWithoutAgentRebatesInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@InputType()
export class agentsCreateNestedOneWithoutChildrenInput {
    @Field(() => agentsCreateWithoutChildrenInput, {nullable:true})
    @Type(() => agentsCreateWithoutChildrenInput)
    create?: InstanceType<typeof agentsCreateWithoutChildrenInput>;
    @Field(() => agentsCreateOrConnectWithoutChildrenInput, {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutChildrenInput)
    connectOrCreate?: InstanceType<typeof agentsCreateOrConnectWithoutChildrenInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@InputType()
export class agentsCreateNestedOneWithoutPlayersInput {
    @Field(() => agentsCreateWithoutPlayersInput, {nullable:true})
    @Type(() => agentsCreateWithoutPlayersInput)
    create?: InstanceType<typeof agentsCreateWithoutPlayersInput>;
    @Field(() => agentsCreateOrConnectWithoutPlayersInput, {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: InstanceType<typeof agentsCreateOrConnectWithoutPlayersInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@InputType()
export class agentsCreateOrConnectWithoutAgentRebatesInput {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsCreateWithoutAgentRebatesInput, {nullable:false})
    @Type(() => agentsCreateWithoutAgentRebatesInput)
    create!: InstanceType<typeof agentsCreateWithoutAgentRebatesInput>;
}

@InputType()
export class agentsCreateOrConnectWithoutChildrenInput {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsCreateWithoutChildrenInput, {nullable:false})
    @Type(() => agentsCreateWithoutChildrenInput)
    create!: InstanceType<typeof agentsCreateWithoutChildrenInput>;
}

@InputType()
export class agentsCreateOrConnectWithoutParentInput {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsCreateWithoutParentInput, {nullable:false})
    @Type(() => agentsCreateWithoutParentInput)
    create!: InstanceType<typeof agentsCreateWithoutParentInput>;
}

@InputType()
export class agentsCreateOrConnectWithoutPlayersInput {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => agentsCreateWithoutPlayersInput)
    create!: InstanceType<typeof agentsCreateWithoutPlayersInput>;
}

@InputType()
export class agentsCreateWithoutAgentRebatesInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => playersCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersCreateNestedManyWithoutAgentInput>;
    @Field(() => agentsCreateNestedOneWithoutChildrenInput, {nullable:true})
    parent?: InstanceType<typeof agentsCreateNestedOneWithoutChildrenInput>;
    @Field(() => agentsCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsCreateWithoutChildrenInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => playersCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersCreateNestedManyWithoutAgentInput>;
    @Field(() => agent_rebatesCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsCreateNestedOneWithoutChildrenInput, {nullable:true})
    parent?: InstanceType<typeof agentsCreateNestedOneWithoutChildrenInput>;
}

@InputType()
export class agentsCreateWithoutParentInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => playersCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersCreateNestedManyWithoutAgentInput>;
    @Field(() => agent_rebatesCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => agent_rebatesCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsCreateNestedOneWithoutChildrenInput, {nullable:true})
    parent?: InstanceType<typeof agentsCreateNestedOneWithoutChildrenInput>;
    @Field(() => agentsCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsCreateInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => playersCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersCreateNestedManyWithoutAgentInput>;
    @Field(() => agent_rebatesCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsCreateNestedOneWithoutChildrenInput, {nullable:true})
    parent?: InstanceType<typeof agentsCreateNestedOneWithoutChildrenInput>;
    @Field(() => agentsCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsCreateNestedManyWithoutParentInput>;
}

@ArgsType()
export class agentsGroupByArgs {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => [agentsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<agentsOrderByWithAggregationInput>;
    @Field(() => [AgentsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof AgentsScalarFieldEnum>;
    @Field(() => agentsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof agentsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class agentsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    parentAgentID?: keyof typeof SortOrder;
}

@InputType()
export class agentsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    parentAgentID?: keyof typeof SortOrder;
}

@InputType()
export class agentsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class agentsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrderInput, {nullable:true})
    parentAgentID?: InstanceType<typeof SortOrderInput>;
    @Field(() => agentsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof agentsCountOrderByAggregateInput>;
    @Field(() => agentsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof agentsMaxOrderByAggregateInput>;
    @Field(() => agentsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof agentsMinOrderByAggregateInput>;
}

@InputType()
export class agentsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentPassword?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrderInput, {nullable:true})
    parentAgentID?: InstanceType<typeof SortOrderInput>;
    @Field(() => playersOrderByRelationAggregateInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByRelationAggregateInput>;
    @Field(() => agent_rebatesOrderByRelationAggregateInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesOrderByRelationAggregateInput>;
    @Field(() => agentsOrderByWithRelationInput, {nullable:true})
    parent?: InstanceType<typeof agentsOrderByWithRelationInput>;
    @Field(() => agentsOrderByRelationAggregateInput, {nullable:true})
    children?: InstanceType<typeof agentsOrderByRelationAggregateInput>;
}

@InputType()
export class agentsScalarWhereWithAggregatesInput {
    @Field(() => [agentsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<agentsScalarWhereWithAggregatesInput>;
    @Field(() => [agentsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<agentsScalarWhereWithAggregatesInput>;
    @Field(() => [agentsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<agentsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    agentID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    agentName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    agentPassword?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolWithAggregatesFilter>;
    @Field(() => StringNullableWithAggregatesFilter, {nullable:true})
    parentAgentID?: InstanceType<typeof StringNullableWithAggregatesFilter>;
}

@InputType()
export class agentsScalarWhereInput {
    @Field(() => [agentsScalarWhereInput], {nullable:true})
    AND?: Array<agentsScalarWhereInput>;
    @Field(() => [agentsScalarWhereInput], {nullable:true})
    OR?: Array<agentsScalarWhereInput>;
    @Field(() => [agentsScalarWhereInput], {nullable:true})
    NOT?: Array<agentsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentPassword?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringNullableFilter, {nullable:true})
    parentAgentID?: InstanceType<typeof StringNullableFilter>;
}

@InputType()
export class agentsUncheckedCreateNestedManyWithoutParentInput {
    @Field(() => [agentsCreateWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateWithoutParentInput)
    create?: Array<agentsCreateWithoutParentInput>;
    @Field(() => [agentsCreateOrConnectWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutParentInput)
    connectOrCreate?: Array<agentsCreateOrConnectWithoutParentInput>;
    @Field(() => agentsCreateManyParentInputEnvelope, {nullable:true})
    @Type(() => agentsCreateManyParentInputEnvelope)
    createMany?: InstanceType<typeof agentsCreateManyParentInputEnvelope>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
}

@InputType()
export class agentsUncheckedCreateWithoutAgentRebatesInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
    @Field(() => playersUncheckedCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedCreateNestedManyWithoutAgentInput>;
    @Field(() => agentsUncheckedCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsUncheckedCreateWithoutChildrenInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
    @Field(() => playersUncheckedCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedCreateNestedManyWithoutAgentInput>;
    @Field(() => agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput>;
}

@InputType()
export class agentsUncheckedCreateWithoutParentInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => playersUncheckedCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedCreateNestedManyWithoutAgentInput>;
    @Field(() => agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsUncheckedCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
    @Field(() => agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsUncheckedCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
    @Field(() => playersUncheckedCreateNestedManyWithoutAgentInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedCreateNestedManyWithoutAgentInput>;
    @Field(() => agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedCreateNestedManyWithoutAgentsInput>;
    @Field(() => agentsUncheckedCreateNestedManyWithoutParentInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedCreateNestedManyWithoutParentInput>;
}

@InputType()
export class agentsUncheckedUpdateManyWithoutParentNestedInput {
    @Field(() => [agentsCreateWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateWithoutParentInput)
    create?: Array<agentsCreateWithoutParentInput>;
    @Field(() => [agentsCreateOrConnectWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutParentInput)
    connectOrCreate?: Array<agentsCreateOrConnectWithoutParentInput>;
    @Field(() => [agentsUpsertWithWhereUniqueWithoutParentInput], {nullable:true})
    @Type(() => agentsUpsertWithWhereUniqueWithoutParentInput)
    upsert?: Array<agentsUpsertWithWhereUniqueWithoutParentInput>;
    @Field(() => agentsCreateManyParentInputEnvelope, {nullable:true})
    @Type(() => agentsCreateManyParentInputEnvelope)
    createMany?: InstanceType<typeof agentsCreateManyParentInputEnvelope>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsUpdateWithWhereUniqueWithoutParentInput], {nullable:true})
    @Type(() => agentsUpdateWithWhereUniqueWithoutParentInput)
    update?: Array<agentsUpdateWithWhereUniqueWithoutParentInput>;
    @Field(() => [agentsUpdateManyWithWhereWithoutParentInput], {nullable:true})
    @Type(() => agentsUpdateManyWithWhereWithoutParentInput)
    updateMany?: Array<agentsUpdateManyWithWhereWithoutParentInput>;
    @Field(() => [agentsScalarWhereInput], {nullable:true})
    @Type(() => agentsScalarWhereInput)
    deleteMany?: Array<agentsScalarWhereInput>;
}

@InputType()
export class agentsUncheckedUpdateManyWithoutParentInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agentsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => NullableStringFieldUpdateOperationsInput, {nullable:true})
    parentAgentID?: InstanceType<typeof NullableStringFieldUpdateOperationsInput>;
}

@InputType()
export class agentsUncheckedUpdateWithoutAgentRebatesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => NullableStringFieldUpdateOperationsInput, {nullable:true})
    parentAgentID?: InstanceType<typeof NullableStringFieldUpdateOperationsInput>;
    @Field(() => playersUncheckedUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedUpdateManyWithoutAgentNestedInput>;
    @Field(() => agentsUncheckedUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUncheckedUpdateWithoutChildrenInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => NullableStringFieldUpdateOperationsInput, {nullable:true})
    parentAgentID?: InstanceType<typeof NullableStringFieldUpdateOperationsInput>;
    @Field(() => playersUncheckedUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedUpdateManyWithoutAgentNestedInput>;
    @Field(() => agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput>;
}

@InputType()
export class agentsUncheckedUpdateWithoutParentInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => playersUncheckedUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedUpdateManyWithoutAgentNestedInput>;
    @Field(() => agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUncheckedUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => NullableStringFieldUpdateOperationsInput, {nullable:true})
    parentAgentID?: InstanceType<typeof NullableStringFieldUpdateOperationsInput>;
    @Field(() => agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUncheckedUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => NullableStringFieldUpdateOperationsInput, {nullable:true})
    parentAgentID?: InstanceType<typeof NullableStringFieldUpdateOperationsInput>;
    @Field(() => playersUncheckedUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUncheckedUpdateManyWithoutAgentNestedInput>;
    @Field(() => agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUncheckedUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUncheckedUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUncheckedUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
}

@InputType()
export class agentsUpdateManyWithWhereWithoutParentInput {
    @Field(() => agentsScalarWhereInput, {nullable:false})
    @Type(() => agentsScalarWhereInput)
    where!: InstanceType<typeof agentsScalarWhereInput>;
    @Field(() => agentsUpdateManyMutationInput, {nullable:false})
    @Type(() => agentsUpdateManyMutationInput)
    data!: InstanceType<typeof agentsUpdateManyMutationInput>;
}

@InputType()
export class agentsUpdateManyWithoutParentNestedInput {
    @Field(() => [agentsCreateWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateWithoutParentInput)
    create?: Array<agentsCreateWithoutParentInput>;
    @Field(() => [agentsCreateOrConnectWithoutParentInput], {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutParentInput)
    connectOrCreate?: Array<agentsCreateOrConnectWithoutParentInput>;
    @Field(() => [agentsUpsertWithWhereUniqueWithoutParentInput], {nullable:true})
    @Type(() => agentsUpsertWithWhereUniqueWithoutParentInput)
    upsert?: Array<agentsUpsertWithWhereUniqueWithoutParentInput>;
    @Field(() => agentsCreateManyParentInputEnvelope, {nullable:true})
    @Type(() => agentsCreateManyParentInputEnvelope)
    createMany?: InstanceType<typeof agentsCreateManyParentInputEnvelope>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsWhereUniqueInput], {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>>;
    @Field(() => [agentsUpdateWithWhereUniqueWithoutParentInput], {nullable:true})
    @Type(() => agentsUpdateWithWhereUniqueWithoutParentInput)
    update?: Array<agentsUpdateWithWhereUniqueWithoutParentInput>;
    @Field(() => [agentsUpdateManyWithWhereWithoutParentInput], {nullable:true})
    @Type(() => agentsUpdateManyWithWhereWithoutParentInput)
    updateMany?: Array<agentsUpdateManyWithWhereWithoutParentInput>;
    @Field(() => [agentsScalarWhereInput], {nullable:true})
    @Type(() => agentsScalarWhereInput)
    deleteMany?: Array<agentsScalarWhereInput>;
}

@InputType()
export class agentsUpdateOneRequiredWithoutAgentRebatesNestedInput {
    @Field(() => agentsCreateWithoutAgentRebatesInput, {nullable:true})
    @Type(() => agentsCreateWithoutAgentRebatesInput)
    create?: InstanceType<typeof agentsCreateWithoutAgentRebatesInput>;
    @Field(() => agentsCreateOrConnectWithoutAgentRebatesInput, {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutAgentRebatesInput)
    connectOrCreate?: InstanceType<typeof agentsCreateOrConnectWithoutAgentRebatesInput>;
    @Field(() => agentsUpsertWithoutAgentRebatesInput, {nullable:true})
    @Type(() => agentsUpsertWithoutAgentRebatesInput)
    upsert?: InstanceType<typeof agentsUpsertWithoutAgentRebatesInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsUpdateToOneWithWhereWithoutAgentRebatesInput, {nullable:true})
    @Type(() => agentsUpdateToOneWithWhereWithoutAgentRebatesInput)
    update?: InstanceType<typeof agentsUpdateToOneWithWhereWithoutAgentRebatesInput>;
}

@InputType()
export class agentsUpdateOneRequiredWithoutPlayersNestedInput {
    @Field(() => agentsCreateWithoutPlayersInput, {nullable:true})
    @Type(() => agentsCreateWithoutPlayersInput)
    create?: InstanceType<typeof agentsCreateWithoutPlayersInput>;
    @Field(() => agentsCreateOrConnectWithoutPlayersInput, {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: InstanceType<typeof agentsCreateOrConnectWithoutPlayersInput>;
    @Field(() => agentsUpsertWithoutPlayersInput, {nullable:true})
    @Type(() => agentsUpsertWithoutPlayersInput)
    upsert?: InstanceType<typeof agentsUpsertWithoutPlayersInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsUpdateToOneWithWhereWithoutPlayersInput, {nullable:true})
    @Type(() => agentsUpdateToOneWithWhereWithoutPlayersInput)
    update?: InstanceType<typeof agentsUpdateToOneWithWhereWithoutPlayersInput>;
}

@InputType()
export class agentsUpdateOneWithoutChildrenNestedInput {
    @Field(() => agentsCreateWithoutChildrenInput, {nullable:true})
    @Type(() => agentsCreateWithoutChildrenInput)
    create?: InstanceType<typeof agentsCreateWithoutChildrenInput>;
    @Field(() => agentsCreateOrConnectWithoutChildrenInput, {nullable:true})
    @Type(() => agentsCreateOrConnectWithoutChildrenInput)
    connectOrCreate?: InstanceType<typeof agentsCreateOrConnectWithoutChildrenInput>;
    @Field(() => agentsUpsertWithoutChildrenInput, {nullable:true})
    @Type(() => agentsUpsertWithoutChildrenInput)
    upsert?: InstanceType<typeof agentsUpsertWithoutChildrenInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    disconnect?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    delete?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    @Type(() => agentsWhereUniqueInput)
    connect?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsUpdateToOneWithWhereWithoutChildrenInput, {nullable:true})
    @Type(() => agentsUpdateToOneWithWhereWithoutChildrenInput)
    update?: InstanceType<typeof agentsUpdateToOneWithWhereWithoutChildrenInput>;
}

@InputType()
export class agentsUpdateToOneWithWhereWithoutAgentRebatesInput {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsUpdateWithoutAgentRebatesInput, {nullable:false})
    @Type(() => agentsUpdateWithoutAgentRebatesInput)
    data!: InstanceType<typeof agentsUpdateWithoutAgentRebatesInput>;
}

@InputType()
export class agentsUpdateToOneWithWhereWithoutChildrenInput {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsUpdateWithoutChildrenInput, {nullable:false})
    @Type(() => agentsUpdateWithoutChildrenInput)
    data!: InstanceType<typeof agentsUpdateWithoutChildrenInput>;
}

@InputType()
export class agentsUpdateToOneWithWhereWithoutPlayersInput {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => agentsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof agentsUpdateWithoutPlayersInput>;
}

@InputType()
export class agentsUpdateWithWhereUniqueWithoutParentInput {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsUpdateWithoutParentInput, {nullable:false})
    @Type(() => agentsUpdateWithoutParentInput)
    data!: InstanceType<typeof agentsUpdateWithoutParentInput>;
}

@InputType()
export class agentsUpdateWithoutAgentRebatesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => playersUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateManyWithoutAgentNestedInput>;
    @Field(() => agentsUpdateOneWithoutChildrenNestedInput, {nullable:true})
    parent?: InstanceType<typeof agentsUpdateOneWithoutChildrenNestedInput>;
    @Field(() => agentsUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUpdateWithoutChildrenInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => playersUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateManyWithoutAgentNestedInput>;
    @Field(() => agent_rebatesUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUpdateOneWithoutChildrenNestedInput, {nullable:true})
    parent?: InstanceType<typeof agentsUpdateOneWithoutChildrenNestedInput>;
}

@InputType()
export class agentsUpdateWithoutParentInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => playersUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateManyWithoutAgentNestedInput>;
    @Field(() => agent_rebatesUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => agent_rebatesUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUpdateOneWithoutChildrenNestedInput, {nullable:true})
    parent?: InstanceType<typeof agentsUpdateOneWithoutChildrenNestedInput>;
    @Field(() => agentsUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentPassword?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => playersUpdateManyWithoutAgentNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateManyWithoutAgentNestedInput>;
    @Field(() => agent_rebatesUpdateManyWithoutAgentsNestedInput, {nullable:true})
    agentRebates?: InstanceType<typeof agent_rebatesUpdateManyWithoutAgentsNestedInput>;
    @Field(() => agentsUpdateOneWithoutChildrenNestedInput, {nullable:true})
    parent?: InstanceType<typeof agentsUpdateOneWithoutChildrenNestedInput>;
    @Field(() => agentsUpdateManyWithoutParentNestedInput, {nullable:true})
    children?: InstanceType<typeof agentsUpdateManyWithoutParentNestedInput>;
}

@InputType()
export class agentsUpsertWithWhereUniqueWithoutParentInput {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsUpdateWithoutParentInput, {nullable:false})
    @Type(() => agentsUpdateWithoutParentInput)
    update!: InstanceType<typeof agentsUpdateWithoutParentInput>;
    @Field(() => agentsCreateWithoutParentInput, {nullable:false})
    @Type(() => agentsCreateWithoutParentInput)
    create!: InstanceType<typeof agentsCreateWithoutParentInput>;
}

@InputType()
export class agentsUpsertWithoutAgentRebatesInput {
    @Field(() => agentsUpdateWithoutAgentRebatesInput, {nullable:false})
    @Type(() => agentsUpdateWithoutAgentRebatesInput)
    update!: InstanceType<typeof agentsUpdateWithoutAgentRebatesInput>;
    @Field(() => agentsCreateWithoutAgentRebatesInput, {nullable:false})
    @Type(() => agentsCreateWithoutAgentRebatesInput)
    create!: InstanceType<typeof agentsCreateWithoutAgentRebatesInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
}

@InputType()
export class agentsUpsertWithoutChildrenInput {
    @Field(() => agentsUpdateWithoutChildrenInput, {nullable:false})
    @Type(() => agentsUpdateWithoutChildrenInput)
    update!: InstanceType<typeof agentsUpdateWithoutChildrenInput>;
    @Field(() => agentsCreateWithoutChildrenInput, {nullable:false})
    @Type(() => agentsCreateWithoutChildrenInput)
    create!: InstanceType<typeof agentsCreateWithoutChildrenInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
}

@InputType()
export class agentsUpsertWithoutPlayersInput {
    @Field(() => agentsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => agentsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof agentsUpdateWithoutPlayersInput>;
    @Field(() => agentsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => agentsCreateWithoutPlayersInput)
    create!: InstanceType<typeof agentsCreateWithoutPlayersInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
}

@InputType()
export class agentsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:true})
    agentName?: string;
    @Field(() => [agentsWhereInput], {nullable:true})
    AND?: Array<agentsWhereInput>;
    @Field(() => [agentsWhereInput], {nullable:true})
    OR?: Array<agentsWhereInput>;
    @Field(() => [agentsWhereInput], {nullable:true})
    NOT?: Array<agentsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    agentPassword?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringNullableFilter, {nullable:true})
    parentAgentID?: InstanceType<typeof StringNullableFilter>;
    @Field(() => PlayersListRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersListRelationFilter>;
    @Field(() => Agent_rebatesListRelationFilter, {nullable:true})
    agentRebates?: InstanceType<typeof Agent_rebatesListRelationFilter>;
    @Field(() => AgentsNullableRelationFilter, {nullable:true})
    parent?: InstanceType<typeof AgentsNullableRelationFilter>;
    @Field(() => AgentsListRelationFilter, {nullable:true})
    children?: InstanceType<typeof AgentsListRelationFilter>;
}

@InputType()
export class agentsWhereInput {
    @Field(() => [agentsWhereInput], {nullable:true})
    AND?: Array<agentsWhereInput>;
    @Field(() => [agentsWhereInput], {nullable:true})
    OR?: Array<agentsWhereInput>;
    @Field(() => [agentsWhereInput], {nullable:true})
    NOT?: Array<agentsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentPassword?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringNullableFilter, {nullable:true})
    parentAgentID?: InstanceType<typeof StringNullableFilter>;
    @Field(() => PlayersListRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersListRelationFilter>;
    @Field(() => Agent_rebatesListRelationFilter, {nullable:true})
    agentRebates?: InstanceType<typeof Agent_rebatesListRelationFilter>;
    @Field(() => AgentsNullableRelationFilter, {nullable:true})
    parent?: InstanceType<typeof AgentsNullableRelationFilter>;
    @Field(() => AgentsListRelationFilter, {nullable:true})
    children?: InstanceType<typeof AgentsListRelationFilter>;
}

@ObjectType()
export class agents {
    @Field(() => ID, {nullable:false})
    agentID!: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => Date, {nullable:false})
    udate!: Date;
    @Field(() => Boolean, {nullable:false,defaultValue:true})
    enabled!: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID!: string | null;
    @Field(() => [players], {nullable:true})
    players?: Array<players>;
    @Field(() => [agent_rebates], {nullable:true})
    agentRebates?: Array<agent_rebates>;
    @Field(() => agents, {nullable:true})
    parent?: InstanceType<typeof agents> | null;
    @Field(() => [agents], {nullable:true})
    children?: Array<agents>;
    @Field(() => AgentsCount, {nullable:false})
    _count?: InstanceType<typeof AgentsCount>;
}

@ArgsType()
export class CreateManyagentsArgs {
    @Field(() => [agentsCreateManyInput], {nullable:false})
    @Type(() => agentsCreateManyInput)
    data!: Array<agentsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateOneagentsArgs {
    @Field(() => agentsCreateInput, {nullable:false})
    @Type(() => agentsCreateInput)
    data!: InstanceType<typeof agentsCreateInput>;
}

@ArgsType()
export class DeleteManyagentsArgs {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
}

@ArgsType()
export class DeleteOneagentsArgs {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@ArgsType()
export class FindFirstagentsOrThrowArgs {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => [agentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agentsOrderByWithRelationInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [AgentsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof AgentsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstagentsArgs {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => [agentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agentsOrderByWithRelationInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [AgentsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof AgentsScalarFieldEnum>;
}

@ArgsType()
export class FindManyagentsArgs {
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
    @Field(() => [agentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agentsOrderByWithRelationInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [AgentsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof AgentsScalarFieldEnum>;
}

@ArgsType()
export class FindUniqueagentsOrThrowArgs {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@ArgsType()
export class FindUniqueagentsArgs {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@ArgsType()
export class UpdateManyagentsArgs {
    @Field(() => agentsUpdateManyMutationInput, {nullable:false})
    @Type(() => agentsUpdateManyMutationInput)
    data!: InstanceType<typeof agentsUpdateManyMutationInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    @Type(() => agentsWhereInput)
    where?: InstanceType<typeof agentsWhereInput>;
}

@ArgsType()
export class UpdateOneagentsArgs {
    @Field(() => agentsUpdateInput, {nullable:false})
    @Type(() => agentsUpdateInput)
    data!: InstanceType<typeof agentsUpdateInput>;
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
}

@ArgsType()
export class UpsertOneagentsArgs {
    @Field(() => agentsWhereUniqueInput, {nullable:false})
    @Type(() => agentsWhereUniqueInput)
    where!: Prisma.AtLeast<agentsWhereUniqueInput, 'agentID' | 'agentName'>;
    @Field(() => agentsCreateInput, {nullable:false})
    @Type(() => agentsCreateInput)
    create!: InstanceType<typeof agentsCreateInput>;
    @Field(() => agentsUpdateInput, {nullable:false})
    @Type(() => agentsUpdateInput)
    update!: InstanceType<typeof agentsUpdateInput>;
}

@InputType()
export class all_ow_requestsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    allOwRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    request?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class all_ow_requestsCreateManyInput {
    @Field(() => String, {nullable:true})
    allOwRequestID?: string;
    @Field(() => String, {nullable:false})
    request!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class all_ow_requestsCreateInput {
    @Field(() => String, {nullable:true})
    allOwRequestID?: string;
    @Field(() => String, {nullable:false})
    request!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class all_ow_requestsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    allOwRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    request?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class all_ow_requestsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    allOwRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    request?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class all_ow_requestsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    allOwRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    request?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => all_ow_requestsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof all_ow_requestsCountOrderByAggregateInput>;
    @Field(() => all_ow_requestsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof all_ow_requestsMaxOrderByAggregateInput>;
    @Field(() => all_ow_requestsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof all_ow_requestsMinOrderByAggregateInput>;
}

@InputType()
export class all_ow_requestsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    allOwRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    request?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class all_ow_requestsScalarWhereWithAggregatesInput {
    @Field(() => [all_ow_requestsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<all_ow_requestsScalarWhereWithAggregatesInput>;
    @Field(() => [all_ow_requestsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<all_ow_requestsScalarWhereWithAggregatesInput>;
    @Field(() => [all_ow_requestsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<all_ow_requestsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    allOwRequestID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    request?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class all_ow_requestsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    allOwRequestID?: string;
    @Field(() => String, {nullable:false})
    request!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class all_ow_requestsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    allOwRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    request?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class all_ow_requestsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    allOwRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    request?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class all_ow_requestsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    allOwRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    request?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class all_ow_requestsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    allOwRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    request?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class all_ow_requestsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    allOwRequestID?: string;
    @Field(() => [all_ow_requestsWhereInput], {nullable:true})
    AND?: Array<all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsWhereInput], {nullable:true})
    OR?: Array<all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsWhereInput], {nullable:true})
    NOT?: Array<all_ow_requestsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    request?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class all_ow_requestsWhereInput {
    @Field(() => [all_ow_requestsWhereInput], {nullable:true})
    AND?: Array<all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsWhereInput], {nullable:true})
    OR?: Array<all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsWhereInput], {nullable:true})
    NOT?: Array<all_ow_requestsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    allOwRequestID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    request?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
}

@ObjectType()
export class all_ow_requests {
    @Field(() => ID, {nullable:false})
    allOwRequestID!: string;
    @Field(() => String, {nullable:false})
    request!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
}

@InputType()
export class current_active_playersCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    lastActiveTime?: keyof typeof SortOrder;
}

@InputType()
export class current_active_playersCreateManyPlayersInputEnvelope {
    @Field(() => [current_active_playersCreateManyPlayersInput], {nullable:false})
    @Type(() => current_active_playersCreateManyPlayersInput)
    data!: Array<current_active_playersCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class current_active_playersCreateManyPlayersInput {
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
}

@InputType()
export class current_active_playersCreateManyInput {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
}

@InputType()
export class current_active_playersCreateNestedManyWithoutPlayersInput {
    @Field(() => [current_active_playersCreateWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateWithoutPlayersInput)
    create?: Array<current_active_playersCreateWithoutPlayersInput>;
    @Field(() => [current_active_playersCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<current_active_playersCreateOrConnectWithoutPlayersInput>;
    @Field(() => current_active_playersCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => current_active_playersCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof current_active_playersCreateManyPlayersInputEnvelope>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
}

@InputType()
export class current_active_playersCreateOrConnectWithoutPlayersInput {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>;
    @Field(() => current_active_playersCreateWithoutPlayersInput, {nullable:false})
    @Type(() => current_active_playersCreateWithoutPlayersInput)
    create!: InstanceType<typeof current_active_playersCreateWithoutPlayersInput>;
}

@InputType()
export class current_active_playersCreateWithoutPlayersInput {
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
}

@InputType()
export class current_active_playersCreateInput {
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
    @Field(() => playersCreateNestedOneWithoutCurrentActivePlayersInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutCurrentActivePlayersInput>;
}

@InputType()
export class current_active_playersMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    lastActiveTime?: keyof typeof SortOrder;
}

@InputType()
export class current_active_playersMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    lastActiveTime?: keyof typeof SortOrder;
}

@InputType()
export class current_active_playersOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class current_active_playersOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    lastActiveTime?: keyof typeof SortOrder;
    @Field(() => current_active_playersCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof current_active_playersCountOrderByAggregateInput>;
    @Field(() => current_active_playersMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof current_active_playersMaxOrderByAggregateInput>;
    @Field(() => current_active_playersMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof current_active_playersMinOrderByAggregateInput>;
}

@InputType()
export class current_active_playersOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    lastActiveTime?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
}

@InputType()
export class current_active_playersScalarWhereWithAggregatesInput {
    @Field(() => [current_active_playersScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<current_active_playersScalarWhereWithAggregatesInput>;
    @Field(() => [current_active_playersScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<current_active_playersScalarWhereWithAggregatesInput>;
    @Field(() => [current_active_playersScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<current_active_playersScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class current_active_playersScalarWhereInput {
    @Field(() => [current_active_playersScalarWhereInput], {nullable:true})
    AND?: Array<current_active_playersScalarWhereInput>;
    @Field(() => [current_active_playersScalarWhereInput], {nullable:true})
    OR?: Array<current_active_playersScalarWhereInput>;
    @Field(() => [current_active_playersScalarWhereInput], {nullable:true})
    NOT?: Array<current_active_playersScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class current_active_playersUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [current_active_playersCreateWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateWithoutPlayersInput)
    create?: Array<current_active_playersCreateWithoutPlayersInput>;
    @Field(() => [current_active_playersCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<current_active_playersCreateOrConnectWithoutPlayersInput>;
    @Field(() => current_active_playersCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => current_active_playersCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof current_active_playersCreateManyPlayersInputEnvelope>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
}

@InputType()
export class current_active_playersUncheckedCreateWithoutPlayersInput {
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
}

@InputType()
export class current_active_playersUncheckedCreateInput {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
}

@InputType()
export class current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [current_active_playersCreateWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateWithoutPlayersInput)
    create?: Array<current_active_playersCreateWithoutPlayersInput>;
    @Field(() => [current_active_playersCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<current_active_playersCreateOrConnectWithoutPlayersInput>;
    @Field(() => [current_active_playersUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<current_active_playersUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => current_active_playersCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => current_active_playersCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof current_active_playersCreateManyPlayersInputEnvelope>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    set?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<current_active_playersUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [current_active_playersUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<current_active_playersUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [current_active_playersScalarWhereInput], {nullable:true})
    @Type(() => current_active_playersScalarWhereInput)
    deleteMany?: Array<current_active_playersScalarWhereInput>;
}

@InputType()
export class current_active_playersUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class current_active_playersUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class current_active_playersUncheckedUpdateWithoutPlayersInput {
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class current_active_playersUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class current_active_playersUpdateManyMutationInput {
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class current_active_playersUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => current_active_playersScalarWhereInput, {nullable:false})
    @Type(() => current_active_playersScalarWhereInput)
    where!: InstanceType<typeof current_active_playersScalarWhereInput>;
    @Field(() => current_active_playersUpdateManyMutationInput, {nullable:false})
    @Type(() => current_active_playersUpdateManyMutationInput)
    data!: InstanceType<typeof current_active_playersUpdateManyMutationInput>;
}

@InputType()
export class current_active_playersUpdateManyWithoutPlayersNestedInput {
    @Field(() => [current_active_playersCreateWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateWithoutPlayersInput)
    create?: Array<current_active_playersCreateWithoutPlayersInput>;
    @Field(() => [current_active_playersCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<current_active_playersCreateOrConnectWithoutPlayersInput>;
    @Field(() => [current_active_playersUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<current_active_playersUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => current_active_playersCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => current_active_playersCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof current_active_playersCreateManyPlayersInputEnvelope>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    set?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersWhereUniqueInput], {nullable:true})
    @Type(() => current_active_playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>>;
    @Field(() => [current_active_playersUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<current_active_playersUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [current_active_playersUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => current_active_playersUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<current_active_playersUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [current_active_playersScalarWhereInput], {nullable:true})
    @Type(() => current_active_playersScalarWhereInput)
    deleteMany?: Array<current_active_playersScalarWhereInput>;
}

@InputType()
export class current_active_playersUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>;
    @Field(() => current_active_playersUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => current_active_playersUpdateWithoutPlayersInput)
    data!: InstanceType<typeof current_active_playersUpdateWithoutPlayersInput>;
}

@InputType()
export class current_active_playersUpdateWithoutPlayersInput {
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class current_active_playersUpdateInput {
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutCurrentActivePlayersNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutCurrentActivePlayersNestedInput>;
}

@InputType()
export class current_active_playersUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: Prisma.AtLeast<current_active_playersWhereUniqueInput, 'playerID'>;
    @Field(() => current_active_playersUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => current_active_playersUpdateWithoutPlayersInput)
    update!: InstanceType<typeof current_active_playersUpdateWithoutPlayersInput>;
    @Field(() => current_active_playersCreateWithoutPlayersInput, {nullable:false})
    @Type(() => current_active_playersCreateWithoutPlayersInput)
    create!: InstanceType<typeof current_active_playersCreateWithoutPlayersInput>;
}

@InputType()
export class current_active_playersWhereUniqueInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => [current_active_playersWhereInput], {nullable:true})
    AND?: Array<current_active_playersWhereInput>;
    @Field(() => [current_active_playersWhereInput], {nullable:true})
    OR?: Array<current_active_playersWhereInput>;
    @Field(() => [current_active_playersWhereInput], {nullable:true})
    NOT?: Array<current_active_playersWhereInput>;
    @Field(() => DateTimeFilter, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@InputType()
export class current_active_playersWhereInput {
    @Field(() => [current_active_playersWhereInput], {nullable:true})
    AND?: Array<current_active_playersWhereInput>;
    @Field(() => [current_active_playersWhereInput], {nullable:true})
    OR?: Array<current_active_playersWhereInput>;
    @Field(() => [current_active_playersWhereInput], {nullable:true})
    NOT?: Array<current_active_playersWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    lastActiveTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@ObjectType()
export class current_active_players {
    @Field(() => ID, {nullable:false})
    playerID!: string;
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
}

@InputType()
export class deposit_transactionsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class deposit_transactionsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    depositTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
}

@InputType()
export class deposit_transactionsCreateManyAdminBankAccountsInputEnvelope {
    @Field(() => [deposit_transactionsCreateManyAdminBankAccountsInput], {nullable:false})
    @Type(() => deposit_transactionsCreateManyAdminBankAccountsInput)
    data!: Array<deposit_transactionsCreateManyAdminBankAccountsInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class deposit_transactionsCreateManyAdminBankAccountsInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
}

@InputType()
export class deposit_transactionsCreateManyPlayersInputEnvelope {
    @Field(() => [deposit_transactionsCreateManyPlayersInput], {nullable:false})
    @Type(() => deposit_transactionsCreateManyPlayersInput)
    data!: Array<deposit_transactionsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class deposit_transactionsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class deposit_transactionsCreateManyInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class deposit_transactionsCreateNestedManyWithoutAdminBankAccountsInput {
    @Field(() => [deposit_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<deposit_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
}

@InputType()
export class deposit_transactionsCreateNestedManyWithoutPlayersInput {
    @Field(() => [deposit_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutPlayersInput)
    create?: Array<deposit_transactionsCreateWithoutPlayersInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
}

@InputType()
export class deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>;
    @Field(() => deposit_transactionsCreateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => deposit_transactionsCreateWithoutAdminBankAccountsInput)
    create!: InstanceType<typeof deposit_transactionsCreateWithoutAdminBankAccountsInput>;
}

@InputType()
export class deposit_transactionsCreateOrConnectWithoutPlayersInput {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>;
    @Field(() => deposit_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => deposit_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof deposit_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class deposit_transactionsCreateWithoutAdminBankAccountsInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => playersCreateNestedOneWithoutDepositTransactionsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutDepositTransactionsInput>;
}

@InputType()
export class deposit_transactionsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => admin_bank_accountsCreateNestedOneWithoutDepositTransactionsInput, {nullable:false})
    adminBankAccounts!: InstanceType<typeof admin_bank_accountsCreateNestedOneWithoutDepositTransactionsInput>;
}

@InputType()
export class deposit_transactionsCreateInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => playersCreateNestedOneWithoutDepositTransactionsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutDepositTransactionsInput>;
    @Field(() => admin_bank_accountsCreateNestedOneWithoutDepositTransactionsInput, {nullable:false})
    adminBankAccounts!: InstanceType<typeof admin_bank_accountsCreateNestedOneWithoutDepositTransactionsInput>;
}

@InputType()
export class deposit_transactionsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    depositTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
}

@InputType()
export class deposit_transactionsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    depositTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
}

@InputType()
export class deposit_transactionsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class deposit_transactionsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    depositTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => deposit_transactionsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof deposit_transactionsCountOrderByAggregateInput>;
    @Field(() => deposit_transactionsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof deposit_transactionsAvgOrderByAggregateInput>;
    @Field(() => deposit_transactionsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof deposit_transactionsMaxOrderByAggregateInput>;
    @Field(() => deposit_transactionsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof deposit_transactionsMinOrderByAggregateInput>;
    @Field(() => deposit_transactionsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof deposit_transactionsSumOrderByAggregateInput>;
}

@InputType()
export class deposit_transactionsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    depositTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
    @Field(() => admin_bank_accountsOrderByWithRelationInput, {nullable:true})
    adminBankAccounts?: InstanceType<typeof admin_bank_accountsOrderByWithRelationInput>;
}

@InputType()
export class deposit_transactionsScalarWhereWithAggregatesInput {
    @Field(() => [deposit_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<deposit_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [deposit_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<deposit_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [deposit_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<deposit_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    currency?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => EnumTransactionTypeWithAggregatesFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class deposit_transactionsScalarWhereInput {
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    AND?: Array<deposit_transactionsScalarWhereInput>;
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    OR?: Array<deposit_transactionsScalarWhereInput>;
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    NOT?: Array<deposit_transactionsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
}

@InputType()
export class deposit_transactionsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class deposit_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput {
    @Field(() => [deposit_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<deposit_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
}

@InputType()
export class deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [deposit_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutPlayersInput)
    create?: Array<deposit_transactionsCreateWithoutPlayersInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
}

@InputType()
export class deposit_transactionsUncheckedCreateWithoutAdminBankAccountsInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
}

@InputType()
export class deposit_transactionsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class deposit_transactionsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class deposit_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput {
    @Field(() => [deposit_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<deposit_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput)
    upsert?: Array<deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput)
    update?: Array<deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput)
    updateMany?: Array<deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    @Type(() => deposit_transactionsScalarWhereInput)
    deleteMany?: Array<deposit_transactionsScalarWhereInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateManyWithoutAdminBankAccountsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [deposit_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutPlayersInput)
    create?: Array<deposit_transactionsCreateWithoutPlayersInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [deposit_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<deposit_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    @Type(() => deposit_transactionsScalarWhereInput)
    deleteMany?: Array<deposit_transactionsScalarWhereInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateWithoutAdminBankAccountsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
}

@InputType()
export class deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput {
    @Field(() => deposit_transactionsScalarWhereInput, {nullable:false})
    @Type(() => deposit_transactionsScalarWhereInput)
    where!: InstanceType<typeof deposit_transactionsScalarWhereInput>;
    @Field(() => deposit_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof deposit_transactionsUpdateManyMutationInput>;
}

@InputType()
export class deposit_transactionsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => deposit_transactionsScalarWhereInput, {nullable:false})
    @Type(() => deposit_transactionsScalarWhereInput)
    where!: InstanceType<typeof deposit_transactionsScalarWhereInput>;
    @Field(() => deposit_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof deposit_transactionsUpdateManyMutationInput>;
}

@InputType()
export class deposit_transactionsUpdateManyWithoutAdminBankAccountsNestedInput {
    @Field(() => [deposit_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<deposit_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput)
    upsert?: Array<deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput)
    update?: Array<deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput)
    updateMany?: Array<deposit_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput>;
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    @Type(() => deposit_transactionsScalarWhereInput)
    deleteMany?: Array<deposit_transactionsScalarWhereInput>;
}

@InputType()
export class deposit_transactionsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [deposit_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateWithoutPlayersInput)
    create?: Array<deposit_transactionsCreateWithoutPlayersInput>;
    @Field(() => [deposit_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<deposit_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => deposit_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof deposit_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => deposit_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>>;
    @Field(() => [deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [deposit_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => deposit_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<deposit_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [deposit_transactionsScalarWhereInput], {nullable:true})
    @Type(() => deposit_transactionsScalarWhereInput)
    deleteMany?: Array<deposit_transactionsScalarWhereInput>;
}

@InputType()
export class deposit_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>;
    @Field(() => deposit_transactionsUpdateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateWithoutAdminBankAccountsInput)
    data!: InstanceType<typeof deposit_transactionsUpdateWithoutAdminBankAccountsInput>;
}

@InputType()
export class deposit_transactionsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>;
    @Field(() => deposit_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof deposit_transactionsUpdateWithoutPlayersInput>;
}

@InputType()
export class deposit_transactionsUpdateWithoutAdminBankAccountsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutDepositTransactionsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutDepositTransactionsNestedInput>;
}

@InputType()
export class deposit_transactionsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => admin_bank_accountsUpdateOneRequiredWithoutDepositTransactionsNestedInput, {nullable:true})
    adminBankAccounts?: InstanceType<typeof admin_bank_accountsUpdateOneRequiredWithoutDepositTransactionsNestedInput>;
}

@InputType()
export class deposit_transactionsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutDepositTransactionsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutDepositTransactionsNestedInput>;
    @Field(() => admin_bank_accountsUpdateOneRequiredWithoutDepositTransactionsNestedInput, {nullable:true})
    adminBankAccounts?: InstanceType<typeof admin_bank_accountsUpdateOneRequiredWithoutDepositTransactionsNestedInput>;
}

@InputType()
export class deposit_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>;
    @Field(() => deposit_transactionsUpdateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateWithoutAdminBankAccountsInput)
    update!: InstanceType<typeof deposit_transactionsUpdateWithoutAdminBankAccountsInput>;
    @Field(() => deposit_transactionsCreateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => deposit_transactionsCreateWithoutAdminBankAccountsInput)
    create!: InstanceType<typeof deposit_transactionsCreateWithoutAdminBankAccountsInput>;
}

@InputType()
export class deposit_transactionsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<deposit_transactionsWhereUniqueInput, 'depositTransactionID'>;
    @Field(() => deposit_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof deposit_transactionsUpdateWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => deposit_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof deposit_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class deposit_transactionsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => [deposit_transactionsWhereInput], {nullable:true})
    AND?: Array<deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsWhereInput], {nullable:true})
    OR?: Array<deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsWhereInput], {nullable:true})
    NOT?: Array<deposit_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => Admin_bank_accountsRelationFilter, {nullable:true})
    adminBankAccounts?: InstanceType<typeof Admin_bank_accountsRelationFilter>;
}

@InputType()
export class deposit_transactionsWhereInput {
    @Field(() => [deposit_transactionsWhereInput], {nullable:true})
    AND?: Array<deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsWhereInput], {nullable:true})
    OR?: Array<deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsWhereInput], {nullable:true})
    NOT?: Array<deposit_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    depositTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => Admin_bank_accountsRelationFilter, {nullable:true})
    adminBankAccounts?: InstanceType<typeof Admin_bank_accountsRelationFilter>;
}

@ObjectType()
export class deposit_transactions {
    @Field(() => ID, {nullable:false})
    depositTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date;
    @Field(() => Date, {nullable:false})
    processTime!: Date;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false,defaultValue:'PENDING'})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
    @Field(() => admin_bank_accounts, {nullable:false})
    adminBankAccounts?: InstanceType<typeof admin_bank_accounts>;
}

@InputType()
export class game_historyAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
}

@InputType()
export class game_historyCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class game_historyCreateManyPlayersInputEnvelope {
    @Field(() => [game_historyCreateManyPlayersInput], {nullable:false})
    @Type(() => game_historyCreateManyPlayersInput)
    data!: Array<game_historyCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class game_historyCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_historyCreateManyInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_historyCreateNestedManyWithoutPlayersInput {
    @Field(() => [game_historyCreateWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateWithoutPlayersInput)
    create?: Array<game_historyCreateWithoutPlayersInput>;
    @Field(() => [game_historyCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<game_historyCreateOrConnectWithoutPlayersInput>;
    @Field(() => game_historyCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => game_historyCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof game_historyCreateManyPlayersInputEnvelope>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
}

@InputType()
export class game_historyCreateNestedOneWithoutGameRebatesInput {
    @Field(() => game_historyCreateWithoutGameRebatesInput, {nullable:true})
    @Type(() => game_historyCreateWithoutGameRebatesInput)
    create?: InstanceType<typeof game_historyCreateWithoutGameRebatesInput>;
    @Field(() => game_historyCreateOrConnectWithoutGameRebatesInput, {nullable:true})
    @Type(() => game_historyCreateOrConnectWithoutGameRebatesInput)
    connectOrCreate?: InstanceType<typeof game_historyCreateOrConnectWithoutGameRebatesInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    connect?: Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>;
}

@InputType()
export class game_historyCreateOrConnectWithoutGameRebatesInput {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>;
    @Field(() => game_historyCreateWithoutGameRebatesInput, {nullable:false})
    @Type(() => game_historyCreateWithoutGameRebatesInput)
    create!: InstanceType<typeof game_historyCreateWithoutGameRebatesInput>;
}

@InputType()
export class game_historyCreateOrConnectWithoutPlayersInput {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>;
    @Field(() => game_historyCreateWithoutPlayersInput, {nullable:false})
    @Type(() => game_historyCreateWithoutPlayersInput)
    create!: InstanceType<typeof game_historyCreateWithoutPlayersInput>;
}

@InputType()
export class game_historyCreateWithoutGameRebatesInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => playersCreateNestedOneWithoutGameHistoryInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutGameHistoryInput>;
}

@InputType()
export class game_historyCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => game_rebatesCreateNestedManyWithoutGameHistoryInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesCreateNestedManyWithoutGameHistoryInput>;
}

@InputType()
export class game_historyCreateInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => playersCreateNestedOneWithoutGameHistoryInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutGameHistoryInput>;
    @Field(() => game_rebatesCreateNestedManyWithoutGameHistoryInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesCreateNestedManyWithoutGameHistoryInput>;
}

@InputType()
export class game_historyMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class game_historyMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class game_historyOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class game_historyOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => game_historyCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof game_historyCountOrderByAggregateInput>;
    @Field(() => game_historyAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof game_historyAvgOrderByAggregateInput>;
    @Field(() => game_historyMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof game_historyMaxOrderByAggregateInput>;
    @Field(() => game_historyMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof game_historyMinOrderByAggregateInput>;
    @Field(() => game_historySumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof game_historySumOrderByAggregateInput>;
}

@InputType()
export class game_historyOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
    @Field(() => game_rebatesOrderByRelationAggregateInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesOrderByRelationAggregateInput>;
}

@InputType()
export class game_historyScalarWhereWithAggregatesInput {
    @Field(() => [game_historyScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<game_historyScalarWhereWithAggregatesInput>;
    @Field(() => [game_historyScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<game_historyScalarWhereWithAggregatesInput>;
    @Field(() => [game_historyScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<game_historyScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    gameID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    betAmount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    winAmount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class game_historyScalarWhereInput {
    @Field(() => [game_historyScalarWhereInput], {nullable:true})
    AND?: Array<game_historyScalarWhereInput>;
    @Field(() => [game_historyScalarWhereInput], {nullable:true})
    OR?: Array<game_historyScalarWhereInput>;
    @Field(() => [game_historyScalarWhereInput], {nullable:true})
    NOT?: Array<game_historyScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    betAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    winAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class game_historySumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    betAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    winAmount?: keyof typeof SortOrder;
}

@InputType()
export class game_historyUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [game_historyCreateWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateWithoutPlayersInput)
    create?: Array<game_historyCreateWithoutPlayersInput>;
    @Field(() => [game_historyCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<game_historyCreateOrConnectWithoutPlayersInput>;
    @Field(() => game_historyCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => game_historyCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof game_historyCreateManyPlayersInputEnvelope>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
}

@InputType()
export class game_historyUncheckedCreateWithoutGameRebatesInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_historyUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => game_rebatesUncheckedCreateNestedManyWithoutGameHistoryInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesUncheckedCreateNestedManyWithoutGameHistoryInput>;
}

@InputType()
export class game_historyUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => game_rebatesUncheckedCreateNestedManyWithoutGameHistoryInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesUncheckedCreateNestedManyWithoutGameHistoryInput>;
}

@InputType()
export class game_historyUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [game_historyCreateWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateWithoutPlayersInput)
    create?: Array<game_historyCreateWithoutPlayersInput>;
    @Field(() => [game_historyCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<game_historyCreateOrConnectWithoutPlayersInput>;
    @Field(() => [game_historyUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<game_historyUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => game_historyCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => game_historyCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof game_historyCreateManyPlayersInputEnvelope>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    set?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<game_historyUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [game_historyUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<game_historyUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [game_historyScalarWhereInput], {nullable:true})
    @Type(() => game_historyScalarWhereInput)
    deleteMany?: Array<game_historyScalarWhereInput>;
}

@InputType()
export class game_historyUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_historyUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_historyUncheckedUpdateWithoutGameRebatesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_historyUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => game_rebatesUncheckedUpdateManyWithoutGameHistoryNestedInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesUncheckedUpdateManyWithoutGameHistoryNestedInput>;
}

@InputType()
export class game_historyUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => game_rebatesUncheckedUpdateManyWithoutGameHistoryNestedInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesUncheckedUpdateManyWithoutGameHistoryNestedInput>;
}

@InputType()
export class game_historyUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_historyUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => game_historyScalarWhereInput, {nullable:false})
    @Type(() => game_historyScalarWhereInput)
    where!: InstanceType<typeof game_historyScalarWhereInput>;
    @Field(() => game_historyUpdateManyMutationInput, {nullable:false})
    @Type(() => game_historyUpdateManyMutationInput)
    data!: InstanceType<typeof game_historyUpdateManyMutationInput>;
}

@InputType()
export class game_historyUpdateManyWithoutPlayersNestedInput {
    @Field(() => [game_historyCreateWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateWithoutPlayersInput)
    create?: Array<game_historyCreateWithoutPlayersInput>;
    @Field(() => [game_historyCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<game_historyCreateOrConnectWithoutPlayersInput>;
    @Field(() => [game_historyUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<game_historyUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => game_historyCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => game_historyCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof game_historyCreateManyPlayersInputEnvelope>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    set?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyWhereUniqueInput], {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>>;
    @Field(() => [game_historyUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<game_historyUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [game_historyUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => game_historyUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<game_historyUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [game_historyScalarWhereInput], {nullable:true})
    @Type(() => game_historyScalarWhereInput)
    deleteMany?: Array<game_historyScalarWhereInput>;
}

@InputType()
export class game_historyUpdateOneRequiredWithoutGameRebatesNestedInput {
    @Field(() => game_historyCreateWithoutGameRebatesInput, {nullable:true})
    @Type(() => game_historyCreateWithoutGameRebatesInput)
    create?: InstanceType<typeof game_historyCreateWithoutGameRebatesInput>;
    @Field(() => game_historyCreateOrConnectWithoutGameRebatesInput, {nullable:true})
    @Type(() => game_historyCreateOrConnectWithoutGameRebatesInput)
    connectOrCreate?: InstanceType<typeof game_historyCreateOrConnectWithoutGameRebatesInput>;
    @Field(() => game_historyUpsertWithoutGameRebatesInput, {nullable:true})
    @Type(() => game_historyUpsertWithoutGameRebatesInput)
    upsert?: InstanceType<typeof game_historyUpsertWithoutGameRebatesInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:true})
    @Type(() => game_historyWhereUniqueInput)
    connect?: Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>;
    @Field(() => game_historyUpdateToOneWithWhereWithoutGameRebatesInput, {nullable:true})
    @Type(() => game_historyUpdateToOneWithWhereWithoutGameRebatesInput)
    update?: InstanceType<typeof game_historyUpdateToOneWithWhereWithoutGameRebatesInput>;
}

@InputType()
export class game_historyUpdateToOneWithWhereWithoutGameRebatesInput {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => game_historyUpdateWithoutGameRebatesInput, {nullable:false})
    @Type(() => game_historyUpdateWithoutGameRebatesInput)
    data!: InstanceType<typeof game_historyUpdateWithoutGameRebatesInput>;
}

@InputType()
export class game_historyUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>;
    @Field(() => game_historyUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => game_historyUpdateWithoutPlayersInput)
    data!: InstanceType<typeof game_historyUpdateWithoutPlayersInput>;
}

@InputType()
export class game_historyUpdateWithoutGameRebatesInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutGameHistoryNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutGameHistoryNestedInput>;
}

@InputType()
export class game_historyUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => game_rebatesUpdateManyWithoutGameHistoryNestedInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesUpdateManyWithoutGameHistoryNestedInput>;
}

@InputType()
export class game_historyUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    betAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    winAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutGameHistoryNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutGameHistoryNestedInput>;
    @Field(() => game_rebatesUpdateManyWithoutGameHistoryNestedInput, {nullable:true})
    gameRebates?: InstanceType<typeof game_rebatesUpdateManyWithoutGameHistoryNestedInput>;
}

@InputType()
export class game_historyUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: Prisma.AtLeast<game_historyWhereUniqueInput, 'gameHistoryID'>;
    @Field(() => game_historyUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => game_historyUpdateWithoutPlayersInput)
    update!: InstanceType<typeof game_historyUpdateWithoutPlayersInput>;
    @Field(() => game_historyCreateWithoutPlayersInput, {nullable:false})
    @Type(() => game_historyCreateWithoutPlayersInput)
    create!: InstanceType<typeof game_historyCreateWithoutPlayersInput>;
}

@InputType()
export class game_historyUpsertWithoutGameRebatesInput {
    @Field(() => game_historyUpdateWithoutGameRebatesInput, {nullable:false})
    @Type(() => game_historyUpdateWithoutGameRebatesInput)
    update!: InstanceType<typeof game_historyUpdateWithoutGameRebatesInput>;
    @Field(() => game_historyCreateWithoutGameRebatesInput, {nullable:false})
    @Type(() => game_historyCreateWithoutGameRebatesInput)
    create!: InstanceType<typeof game_historyCreateWithoutGameRebatesInput>;
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
}

@InputType()
export class game_historyWhereUniqueInput {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => [game_historyWhereInput], {nullable:true})
    AND?: Array<game_historyWhereInput>;
    @Field(() => [game_historyWhereInput], {nullable:true})
    OR?: Array<game_historyWhereInput>;
    @Field(() => [game_historyWhereInput], {nullable:true})
    NOT?: Array<game_historyWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    betAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    winAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => Game_rebatesListRelationFilter, {nullable:true})
    gameRebates?: InstanceType<typeof Game_rebatesListRelationFilter>;
}

@InputType()
export class game_historyWhereInput {
    @Field(() => [game_historyWhereInput], {nullable:true})
    AND?: Array<game_historyWhereInput>;
    @Field(() => [game_historyWhereInput], {nullable:true})
    OR?: Array<game_historyWhereInput>;
    @Field(() => [game_historyWhereInput], {nullable:true})
    NOT?: Array<game_historyWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    betAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    winAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => Game_rebatesListRelationFilter, {nullable:true})
    gameRebates?: InstanceType<typeof Game_rebatesListRelationFilter>;
}

@ObjectType()
export class game_history {
    @Field(() => ID, {nullable:false})
    gameHistoryID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
    @Field(() => [game_rebates], {nullable:true})
    gameRebates?: Array<game_rebates>;
    @Field(() => Game_historyCount, {nullable:false})
    _count?: InstanceType<typeof Game_historyCount>;
}

@InputType()
export class game_rebatesAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
}

@InputType()
export class game_rebatesCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    game_rebatesID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    merchantID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    category?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class game_rebatesCreateManyGameHistoryInputEnvelope {
    @Field(() => [game_rebatesCreateManyGameHistoryInput], {nullable:false})
    @Type(() => game_rebatesCreateManyGameHistoryInput)
    data!: Array<game_rebatesCreateManyGameHistoryInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class game_rebatesCreateManyGameHistoryInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_rebatesCreateManyInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:false})
    gameHistoryID!: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_rebatesCreateNestedManyWithoutGameHistoryInput {
    @Field(() => [game_rebatesCreateWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateWithoutGameHistoryInput)
    create?: Array<game_rebatesCreateWithoutGameHistoryInput>;
    @Field(() => [game_rebatesCreateOrConnectWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateOrConnectWithoutGameHistoryInput)
    connectOrCreate?: Array<game_rebatesCreateOrConnectWithoutGameHistoryInput>;
    @Field(() => game_rebatesCreateManyGameHistoryInputEnvelope, {nullable:true})
    @Type(() => game_rebatesCreateManyGameHistoryInputEnvelope)
    createMany?: InstanceType<typeof game_rebatesCreateManyGameHistoryInputEnvelope>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
}

@InputType()
export class game_rebatesCreateOrConnectWithoutGameHistoryInput {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>;
    @Field(() => game_rebatesCreateWithoutGameHistoryInput, {nullable:false})
    @Type(() => game_rebatesCreateWithoutGameHistoryInput)
    create!: InstanceType<typeof game_rebatesCreateWithoutGameHistoryInput>;
}

@InputType()
export class game_rebatesCreateWithoutGameHistoryInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_rebatesCreateInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => game_historyCreateNestedOneWithoutGameRebatesInput, {nullable:false})
    gameHistory!: InstanceType<typeof game_historyCreateNestedOneWithoutGameRebatesInput>;
}

@InputType()
export class game_rebatesMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    game_rebatesID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    merchantID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    category?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class game_rebatesMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    game_rebatesID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    merchantID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    category?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class game_rebatesOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class game_rebatesOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    game_rebatesID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    merchantID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    category?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => game_rebatesCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof game_rebatesCountOrderByAggregateInput>;
    @Field(() => game_rebatesAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof game_rebatesAvgOrderByAggregateInput>;
    @Field(() => game_rebatesMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof game_rebatesMaxOrderByAggregateInput>;
    @Field(() => game_rebatesMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof game_rebatesMinOrderByAggregateInput>;
    @Field(() => game_rebatesSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof game_rebatesSumOrderByAggregateInput>;
}

@InputType()
export class game_rebatesOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    game_rebatesID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameHistoryID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    merchantID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    category?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => game_historyOrderByWithRelationInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyOrderByWithRelationInput>;
}

@InputType()
export class game_rebatesScalarWhereWithAggregatesInput {
    @Field(() => [game_rebatesScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<game_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => [game_rebatesScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<game_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => [game_rebatesScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<game_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    merchantID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    gameID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    category?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    status?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class game_rebatesScalarWhereInput {
    @Field(() => [game_rebatesScalarWhereInput], {nullable:true})
    AND?: Array<game_rebatesScalarWhereInput>;
    @Field(() => [game_rebatesScalarWhereInput], {nullable:true})
    OR?: Array<game_rebatesScalarWhereInput>;
    @Field(() => [game_rebatesScalarWhereInput], {nullable:true})
    NOT?: Array<game_rebatesScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    merchantID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    category?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    status?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class game_rebatesSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    effectiveBetAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    rebateAmount?: keyof typeof SortOrder;
}

@InputType()
export class game_rebatesUncheckedCreateNestedManyWithoutGameHistoryInput {
    @Field(() => [game_rebatesCreateWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateWithoutGameHistoryInput)
    create?: Array<game_rebatesCreateWithoutGameHistoryInput>;
    @Field(() => [game_rebatesCreateOrConnectWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateOrConnectWithoutGameHistoryInput)
    connectOrCreate?: Array<game_rebatesCreateOrConnectWithoutGameHistoryInput>;
    @Field(() => game_rebatesCreateManyGameHistoryInputEnvelope, {nullable:true})
    @Type(() => game_rebatesCreateManyGameHistoryInputEnvelope)
    createMany?: InstanceType<typeof game_rebatesCreateManyGameHistoryInputEnvelope>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
}

@InputType()
export class game_rebatesUncheckedCreateWithoutGameHistoryInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_rebatesUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:false})
    gameHistoryID!: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class game_rebatesUncheckedUpdateManyWithoutGameHistoryNestedInput {
    @Field(() => [game_rebatesCreateWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateWithoutGameHistoryInput)
    create?: Array<game_rebatesCreateWithoutGameHistoryInput>;
    @Field(() => [game_rebatesCreateOrConnectWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateOrConnectWithoutGameHistoryInput)
    connectOrCreate?: Array<game_rebatesCreateOrConnectWithoutGameHistoryInput>;
    @Field(() => [game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput)
    upsert?: Array<game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput>;
    @Field(() => game_rebatesCreateManyGameHistoryInputEnvelope, {nullable:true})
    @Type(() => game_rebatesCreateManyGameHistoryInputEnvelope)
    createMany?: InstanceType<typeof game_rebatesCreateManyGameHistoryInputEnvelope>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput)
    update?: Array<game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput>;
    @Field(() => [game_rebatesUpdateManyWithWhereWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesUpdateManyWithWhereWithoutGameHistoryInput)
    updateMany?: Array<game_rebatesUpdateManyWithWhereWithoutGameHistoryInput>;
    @Field(() => [game_rebatesScalarWhereInput], {nullable:true})
    @Type(() => game_rebatesScalarWhereInput)
    deleteMany?: Array<game_rebatesScalarWhereInput>;
}

@InputType()
export class game_rebatesUncheckedUpdateManyWithoutGameHistoryInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_rebatesUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_rebatesUncheckedUpdateWithoutGameHistoryInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_rebatesUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_rebatesUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_rebatesUpdateManyWithWhereWithoutGameHistoryInput {
    @Field(() => game_rebatesScalarWhereInput, {nullable:false})
    @Type(() => game_rebatesScalarWhereInput)
    where!: InstanceType<typeof game_rebatesScalarWhereInput>;
    @Field(() => game_rebatesUpdateManyMutationInput, {nullable:false})
    @Type(() => game_rebatesUpdateManyMutationInput)
    data!: InstanceType<typeof game_rebatesUpdateManyMutationInput>;
}

@InputType()
export class game_rebatesUpdateManyWithoutGameHistoryNestedInput {
    @Field(() => [game_rebatesCreateWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateWithoutGameHistoryInput)
    create?: Array<game_rebatesCreateWithoutGameHistoryInput>;
    @Field(() => [game_rebatesCreateOrConnectWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesCreateOrConnectWithoutGameHistoryInput)
    connectOrCreate?: Array<game_rebatesCreateOrConnectWithoutGameHistoryInput>;
    @Field(() => [game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput)
    upsert?: Array<game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput>;
    @Field(() => game_rebatesCreateManyGameHistoryInputEnvelope, {nullable:true})
    @Type(() => game_rebatesCreateManyGameHistoryInputEnvelope)
    createMany?: InstanceType<typeof game_rebatesCreateManyGameHistoryInputEnvelope>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    set?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesWhereUniqueInput], {nullable:true})
    @Type(() => game_rebatesWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>>;
    @Field(() => [game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput)
    update?: Array<game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput>;
    @Field(() => [game_rebatesUpdateManyWithWhereWithoutGameHistoryInput], {nullable:true})
    @Type(() => game_rebatesUpdateManyWithWhereWithoutGameHistoryInput)
    updateMany?: Array<game_rebatesUpdateManyWithWhereWithoutGameHistoryInput>;
    @Field(() => [game_rebatesScalarWhereInput], {nullable:true})
    @Type(() => game_rebatesScalarWhereInput)
    deleteMany?: Array<game_rebatesScalarWhereInput>;
}

@InputType()
export class game_rebatesUpdateWithWhereUniqueWithoutGameHistoryInput {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>;
    @Field(() => game_rebatesUpdateWithoutGameHistoryInput, {nullable:false})
    @Type(() => game_rebatesUpdateWithoutGameHistoryInput)
    data!: InstanceType<typeof game_rebatesUpdateWithoutGameHistoryInput>;
}

@InputType()
export class game_rebatesUpdateWithoutGameHistoryInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class game_rebatesUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    merchantID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    category?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => game_historyUpdateOneRequiredWithoutGameRebatesNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateOneRequiredWithoutGameRebatesNestedInput>;
}

@InputType()
export class game_rebatesUpsertWithWhereUniqueWithoutGameHistoryInput {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: Prisma.AtLeast<game_rebatesWhereUniqueInput, 'game_rebatesID'>;
    @Field(() => game_rebatesUpdateWithoutGameHistoryInput, {nullable:false})
    @Type(() => game_rebatesUpdateWithoutGameHistoryInput)
    update!: InstanceType<typeof game_rebatesUpdateWithoutGameHistoryInput>;
    @Field(() => game_rebatesCreateWithoutGameHistoryInput, {nullable:false})
    @Type(() => game_rebatesCreateWithoutGameHistoryInput)
    create!: InstanceType<typeof game_rebatesCreateWithoutGameHistoryInput>;
}

@InputType()
export class game_rebatesWhereUniqueInput {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => [game_rebatesWhereInput], {nullable:true})
    AND?: Array<game_rebatesWhereInput>;
    @Field(() => [game_rebatesWhereInput], {nullable:true})
    OR?: Array<game_rebatesWhereInput>;
    @Field(() => [game_rebatesWhereInput], {nullable:true})
    NOT?: Array<game_rebatesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    merchantID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    category?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    status?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => Game_historyRelationFilter, {nullable:true})
    gameHistory?: InstanceType<typeof Game_historyRelationFilter>;
}

@InputType()
export class game_rebatesWhereInput {
    @Field(() => [game_rebatesWhereInput], {nullable:true})
    AND?: Array<game_rebatesWhereInput>;
    @Field(() => [game_rebatesWhereInput], {nullable:true})
    OR?: Array<game_rebatesWhereInput>;
    @Field(() => [game_rebatesWhereInput], {nullable:true})
    NOT?: Array<game_rebatesWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    game_rebatesID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameHistoryID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    merchantID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    category?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    effectiveBetAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    rebateAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    status?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => Game_historyRelationFilter, {nullable:true})
    gameHistory?: InstanceType<typeof Game_historyRelationFilter>;
}

@ObjectType()
export class game_rebates {
    @Field(() => ID, {nullable:false})
    game_rebatesID!: string;
    @Field(() => String, {nullable:false})
    gameHistoryID!: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => game_history, {nullable:false})
    gameHistory?: InstanceType<typeof game_history>;
}

@InputType()
export class manual_adjustmentsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class manual_adjustmentsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    manualAdjustmentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    reason?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class manual_adjustmentsCreateManyAdminsInputEnvelope {
    @Field(() => [manual_adjustmentsCreateManyAdminsInput], {nullable:false})
    @Type(() => manual_adjustmentsCreateManyAdminsInput)
    data!: Array<manual_adjustmentsCreateManyAdminsInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class manual_adjustmentsCreateManyAdminsInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class manual_adjustmentsCreateManyPlayersInputEnvelope {
    @Field(() => [manual_adjustmentsCreateManyPlayersInput], {nullable:false})
    @Type(() => manual_adjustmentsCreateManyPlayersInput)
    data!: Array<manual_adjustmentsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class manual_adjustmentsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class manual_adjustmentsCreateManyInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class manual_adjustmentsCreateNestedManyWithoutAdminsInput {
    @Field(() => [manual_adjustmentsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutAdminsInput)
    create?: Array<manual_adjustmentsCreateWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyAdminsInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
}

@InputType()
export class manual_adjustmentsCreateNestedManyWithoutPlayersInput {
    @Field(() => [manual_adjustmentsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutPlayersInput)
    create?: Array<manual_adjustmentsCreateWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyPlayersInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
}

@InputType()
export class manual_adjustmentsCreateOrConnectWithoutAdminsInput {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>;
    @Field(() => manual_adjustmentsCreateWithoutAdminsInput, {nullable:false})
    @Type(() => manual_adjustmentsCreateWithoutAdminsInput)
    create!: InstanceType<typeof manual_adjustmentsCreateWithoutAdminsInput>;
}

@InputType()
export class manual_adjustmentsCreateOrConnectWithoutPlayersInput {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>;
    @Field(() => manual_adjustmentsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => manual_adjustmentsCreateWithoutPlayersInput)
    create!: InstanceType<typeof manual_adjustmentsCreateWithoutPlayersInput>;
}

@InputType()
export class manual_adjustmentsCreateWithoutAdminsInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => playersCreateNestedOneWithoutManualAdjustmentsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutManualAdjustmentsInput>;
}

@InputType()
export class manual_adjustmentsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => adminsCreateNestedOneWithoutManualAdjustmentsInput, {nullable:false})
    admins!: InstanceType<typeof adminsCreateNestedOneWithoutManualAdjustmentsInput>;
}

@InputType()
export class manual_adjustmentsCreateInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => playersCreateNestedOneWithoutManualAdjustmentsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutManualAdjustmentsInput>;
    @Field(() => adminsCreateNestedOneWithoutManualAdjustmentsInput, {nullable:false})
    admins!: InstanceType<typeof adminsCreateNestedOneWithoutManualAdjustmentsInput>;
}

@InputType()
export class manual_adjustmentsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    manualAdjustmentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    reason?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class manual_adjustmentsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    manualAdjustmentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    reason?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
}

@InputType()
export class manual_adjustmentsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class manual_adjustmentsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    manualAdjustmentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    reason?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => manual_adjustmentsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof manual_adjustmentsCountOrderByAggregateInput>;
    @Field(() => manual_adjustmentsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof manual_adjustmentsAvgOrderByAggregateInput>;
    @Field(() => manual_adjustmentsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof manual_adjustmentsMaxOrderByAggregateInput>;
    @Field(() => manual_adjustmentsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof manual_adjustmentsMinOrderByAggregateInput>;
    @Field(() => manual_adjustmentsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof manual_adjustmentsSumOrderByAggregateInput>;
}

@InputType()
export class manual_adjustmentsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    manualAdjustmentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    reason?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    createdBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
    @Field(() => adminsOrderByWithRelationInput, {nullable:true})
    admins?: InstanceType<typeof adminsOrderByWithRelationInput>;
}

@InputType()
export class manual_adjustmentsScalarWhereWithAggregatesInput {
    @Field(() => [manual_adjustmentsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<manual_adjustmentsScalarWhereWithAggregatesInput>;
    @Field(() => [manual_adjustmentsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<manual_adjustmentsScalarWhereWithAggregatesInput>;
    @Field(() => [manual_adjustmentsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<manual_adjustmentsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    reason?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class manual_adjustmentsScalarWhereInput {
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    AND?: Array<manual_adjustmentsScalarWhereInput>;
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    OR?: Array<manual_adjustmentsScalarWhereInput>;
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    NOT?: Array<manual_adjustmentsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    reason?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class manual_adjustmentsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class manual_adjustmentsUncheckedCreateNestedManyWithoutAdminsInput {
    @Field(() => [manual_adjustmentsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutAdminsInput)
    create?: Array<manual_adjustmentsCreateWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyAdminsInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
}

@InputType()
export class manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [manual_adjustmentsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutPlayersInput)
    create?: Array<manual_adjustmentsCreateWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyPlayersInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
}

@InputType()
export class manual_adjustmentsUncheckedCreateWithoutAdminsInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class manual_adjustmentsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class manual_adjustmentsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateManyWithoutAdminsNestedInput {
    @Field(() => [manual_adjustmentsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutAdminsInput)
    create?: Array<manual_adjustmentsCreateWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput)
    upsert?: Array<manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyAdminsInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput)
    update?: Array<manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput)
    updateMany?: Array<manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    @Type(() => manual_adjustmentsScalarWhereInput)
    deleteMany?: Array<manual_adjustmentsScalarWhereInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateManyWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [manual_adjustmentsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutPlayersInput)
    create?: Array<manual_adjustmentsCreateWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyPlayersInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    @Type(() => manual_adjustmentsScalarWhereInput)
    deleteMany?: Array<manual_adjustmentsScalarWhereInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    createdBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput {
    @Field(() => manual_adjustmentsScalarWhereInput, {nullable:false})
    @Type(() => manual_adjustmentsScalarWhereInput)
    where!: InstanceType<typeof manual_adjustmentsScalarWhereInput>;
    @Field(() => manual_adjustmentsUpdateManyMutationInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateManyMutationInput)
    data!: InstanceType<typeof manual_adjustmentsUpdateManyMutationInput>;
}

@InputType()
export class manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => manual_adjustmentsScalarWhereInput, {nullable:false})
    @Type(() => manual_adjustmentsScalarWhereInput)
    where!: InstanceType<typeof manual_adjustmentsScalarWhereInput>;
    @Field(() => manual_adjustmentsUpdateManyMutationInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateManyMutationInput)
    data!: InstanceType<typeof manual_adjustmentsUpdateManyMutationInput>;
}

@InputType()
export class manual_adjustmentsUpdateManyWithoutAdminsNestedInput {
    @Field(() => [manual_adjustmentsCreateWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutAdminsInput)
    create?: Array<manual_adjustmentsCreateWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutAdminsInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput)
    upsert?: Array<manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateManyAdminsInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyAdminsInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyAdminsInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput)
    update?: Array<manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput)
    updateMany?: Array<manual_adjustmentsUpdateManyWithWhereWithoutAdminsInput>;
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    @Type(() => manual_adjustmentsScalarWhereInput)
    deleteMany?: Array<manual_adjustmentsScalarWhereInput>;
}

@InputType()
export class manual_adjustmentsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [manual_adjustmentsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateWithoutPlayersInput)
    create?: Array<manual_adjustmentsCreateWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<manual_adjustmentsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => manual_adjustmentsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof manual_adjustmentsCreateManyPlayersInputEnvelope>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsWhereUniqueInput], {nullable:true})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>>;
    @Field(() => [manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<manual_adjustmentsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [manual_adjustmentsScalarWhereInput], {nullable:true})
    @Type(() => manual_adjustmentsScalarWhereInput)
    deleteMany?: Array<manual_adjustmentsScalarWhereInput>;
}

@InputType()
export class manual_adjustmentsUpdateWithWhereUniqueWithoutAdminsInput {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>;
    @Field(() => manual_adjustmentsUpdateWithoutAdminsInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateWithoutAdminsInput)
    data!: InstanceType<typeof manual_adjustmentsUpdateWithoutAdminsInput>;
}

@InputType()
export class manual_adjustmentsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>;
    @Field(() => manual_adjustmentsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof manual_adjustmentsUpdateWithoutPlayersInput>;
}

@InputType()
export class manual_adjustmentsUpdateWithoutAdminsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutManualAdjustmentsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutManualAdjustmentsNestedInput>;
}

@InputType()
export class manual_adjustmentsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => adminsUpdateOneRequiredWithoutManualAdjustmentsNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUpdateOneRequiredWithoutManualAdjustmentsNestedInput>;
}

@InputType()
export class manual_adjustmentsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    reason?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutManualAdjustmentsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutManualAdjustmentsNestedInput>;
    @Field(() => adminsUpdateOneRequiredWithoutManualAdjustmentsNestedInput, {nullable:true})
    admins?: InstanceType<typeof adminsUpdateOneRequiredWithoutManualAdjustmentsNestedInput>;
}

@InputType()
export class manual_adjustmentsUpsertWithWhereUniqueWithoutAdminsInput {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>;
    @Field(() => manual_adjustmentsUpdateWithoutAdminsInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateWithoutAdminsInput)
    update!: InstanceType<typeof manual_adjustmentsUpdateWithoutAdminsInput>;
    @Field(() => manual_adjustmentsCreateWithoutAdminsInput, {nullable:false})
    @Type(() => manual_adjustmentsCreateWithoutAdminsInput)
    create!: InstanceType<typeof manual_adjustmentsCreateWithoutAdminsInput>;
}

@InputType()
export class manual_adjustmentsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: Prisma.AtLeast<manual_adjustmentsWhereUniqueInput, 'manualAdjustmentID'>;
    @Field(() => manual_adjustmentsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof manual_adjustmentsUpdateWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => manual_adjustmentsCreateWithoutPlayersInput)
    create!: InstanceType<typeof manual_adjustmentsCreateWithoutPlayersInput>;
}

@InputType()
export class manual_adjustmentsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => [manual_adjustmentsWhereInput], {nullable:true})
    AND?: Array<manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsWhereInput], {nullable:true})
    OR?: Array<manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsWhereInput], {nullable:true})
    NOT?: Array<manual_adjustmentsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    reason?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => AdminsRelationFilter, {nullable:true})
    admins?: InstanceType<typeof AdminsRelationFilter>;
}

@InputType()
export class manual_adjustmentsWhereInput {
    @Field(() => [manual_adjustmentsWhereInput], {nullable:true})
    AND?: Array<manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsWhereInput], {nullable:true})
    OR?: Array<manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsWhereInput], {nullable:true})
    NOT?: Array<manual_adjustmentsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    manualAdjustmentID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    reason?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    createdBy?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => AdminsRelationFilter, {nullable:true})
    admins?: InstanceType<typeof AdminsRelationFilter>;
}

@ObjectType()
export class manual_adjustments {
    @Field(() => ID, {nullable:false})
    manualAdjustmentID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
    @Field(() => admins, {nullable:false})
    admins?: InstanceType<typeof admins>;
}

@InputType()
export class player_login_logsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
}

@InputType()
export class player_login_logsCreateManyPlayersInputEnvelope {
    @Field(() => [player_login_logsCreateManyPlayersInput], {nullable:false})
    @Type(() => player_login_logsCreateManyPlayersInput)
    data!: Array<player_login_logsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class player_login_logsCreateManyPlayersInput {
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
}

@InputType()
export class player_login_logsCreateManyInput {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
}

@InputType()
export class player_login_logsCreateNestedManyWithoutPlayersInput {
    @Field(() => [player_login_logsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateWithoutPlayersInput)
    create?: Array<player_login_logsCreateWithoutPlayersInput>;
    @Field(() => [player_login_logsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_login_logsCreateOrConnectWithoutPlayersInput>;
    @Field(() => player_login_logsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_login_logsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_login_logsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
}

@InputType()
export class player_login_logsCreateOrConnectWithoutPlayersInput {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>;
    @Field(() => player_login_logsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => player_login_logsCreateWithoutPlayersInput)
    create!: InstanceType<typeof player_login_logsCreateWithoutPlayersInput>;
}

@InputType()
export class player_login_logsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
}

@InputType()
export class player_login_logsCreateInput {
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
    @Field(() => playersCreateNestedOneWithoutPlayerLoginLogsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutPlayerLoginLogsInput>;
}

@InputType()
export class player_login_logsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
}

@InputType()
export class player_login_logsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
}

@InputType()
export class player_login_logsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class player_login_logsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
    @Field(() => player_login_logsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof player_login_logsCountOrderByAggregateInput>;
    @Field(() => player_login_logsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof player_login_logsMaxOrderByAggregateInput>;
    @Field(() => player_login_logsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof player_login_logsMinOrderByAggregateInput>;
}

@InputType()
export class player_login_logsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    ip?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    loginTime?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
}

@InputType()
export class player_login_logsScalarWhereWithAggregatesInput {
    @Field(() => [player_login_logsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<player_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => [player_login_logsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<player_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => [player_login_logsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<player_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    ip?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class player_login_logsScalarWhereInput {
    @Field(() => [player_login_logsScalarWhereInput], {nullable:true})
    AND?: Array<player_login_logsScalarWhereInput>;
    @Field(() => [player_login_logsScalarWhereInput], {nullable:true})
    OR?: Array<player_login_logsScalarWhereInput>;
    @Field(() => [player_login_logsScalarWhereInput], {nullable:true})
    NOT?: Array<player_login_logsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    ip?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class player_login_logsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [player_login_logsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateWithoutPlayersInput)
    create?: Array<player_login_logsCreateWithoutPlayersInput>;
    @Field(() => [player_login_logsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_login_logsCreateOrConnectWithoutPlayersInput>;
    @Field(() => player_login_logsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_login_logsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_login_logsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
}

@InputType()
export class player_login_logsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
}

@InputType()
export class player_login_logsUncheckedCreateInput {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
}

@InputType()
export class player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [player_login_logsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateWithoutPlayersInput)
    create?: Array<player_login_logsCreateWithoutPlayersInput>;
    @Field(() => [player_login_logsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_login_logsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [player_login_logsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<player_login_logsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => player_login_logsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_login_logsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_login_logsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<player_login_logsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [player_login_logsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<player_login_logsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [player_login_logsScalarWhereInput], {nullable:true})
    @Type(() => player_login_logsScalarWhereInput)
    deleteMany?: Array<player_login_logsScalarWhereInput>;
}

@InputType()
export class player_login_logsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_login_logsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_login_logsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_login_logsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_login_logsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_login_logsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => player_login_logsScalarWhereInput, {nullable:false})
    @Type(() => player_login_logsScalarWhereInput)
    where!: InstanceType<typeof player_login_logsScalarWhereInput>;
    @Field(() => player_login_logsUpdateManyMutationInput, {nullable:false})
    @Type(() => player_login_logsUpdateManyMutationInput)
    data!: InstanceType<typeof player_login_logsUpdateManyMutationInput>;
}

@InputType()
export class player_login_logsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [player_login_logsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateWithoutPlayersInput)
    create?: Array<player_login_logsCreateWithoutPlayersInput>;
    @Field(() => [player_login_logsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_login_logsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [player_login_logsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<player_login_logsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => player_login_logsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_login_logsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_login_logsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsWhereUniqueInput], {nullable:true})
    @Type(() => player_login_logsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>>;
    @Field(() => [player_login_logsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<player_login_logsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [player_login_logsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => player_login_logsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<player_login_logsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [player_login_logsScalarWhereInput], {nullable:true})
    @Type(() => player_login_logsScalarWhereInput)
    deleteMany?: Array<player_login_logsScalarWhereInput>;
}

@InputType()
export class player_login_logsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>;
    @Field(() => player_login_logsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => player_login_logsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof player_login_logsUpdateWithoutPlayersInput>;
}

@InputType()
export class player_login_logsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_login_logsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    ip?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutPlayerLoginLogsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutPlayerLoginLogsNestedInput>;
}

@InputType()
export class player_login_logsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: Prisma.AtLeast<player_login_logsWhereUniqueInput, 'playerID'>;
    @Field(() => player_login_logsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => player_login_logsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof player_login_logsUpdateWithoutPlayersInput>;
    @Field(() => player_login_logsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => player_login_logsCreateWithoutPlayersInput)
    create!: InstanceType<typeof player_login_logsCreateWithoutPlayersInput>;
}

@InputType()
export class player_login_logsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => [player_login_logsWhereInput], {nullable:true})
    AND?: Array<player_login_logsWhereInput>;
    @Field(() => [player_login_logsWhereInput], {nullable:true})
    OR?: Array<player_login_logsWhereInput>;
    @Field(() => [player_login_logsWhereInput], {nullable:true})
    NOT?: Array<player_login_logsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    ip?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@InputType()
export class player_login_logsWhereInput {
    @Field(() => [player_login_logsWhereInput], {nullable:true})
    AND?: Array<player_login_logsWhereInput>;
    @Field(() => [player_login_logsWhereInput], {nullable:true})
    OR?: Array<player_login_logsWhereInput>;
    @Field(() => [player_login_logsWhereInput], {nullable:true})
    NOT?: Array<player_login_logsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    ip?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    loginTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@ObjectType()
export class player_login_logs {
    @Field(() => ID, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
}

@InputType()
export class player_walletsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
}

@InputType()
export class player_walletsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerWalletID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
}

@InputType()
export class player_walletsCreateManyPlayersInputEnvelope {
    @Field(() => [player_walletsCreateManyPlayersInput], {nullable:false})
    @Type(() => player_walletsCreateManyPlayersInput)
    data!: Array<player_walletsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class player_walletsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@InputType()
export class player_walletsCreateManyInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@InputType()
export class player_walletsCreateNestedManyWithoutPlayersInput {
    @Field(() => [player_walletsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateWithoutPlayersInput)
    create?: Array<player_walletsCreateWithoutPlayersInput>;
    @Field(() => [player_walletsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_walletsCreateOrConnectWithoutPlayersInput>;
    @Field(() => player_walletsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_walletsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_walletsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
}

@InputType()
export class player_walletsCreateOrConnectWithoutPlayersInput {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>;
    @Field(() => player_walletsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => player_walletsCreateWithoutPlayersInput)
    create!: InstanceType<typeof player_walletsCreateWithoutPlayersInput>;
}

@InputType()
export class player_walletsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@InputType()
export class player_walletsCreateInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => playersCreateNestedOneWithoutPlayerWalletsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutPlayerWalletsInput>;
}

@InputType()
export class player_walletsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerWalletID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
}

@InputType()
export class player_walletsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerWalletID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
}

@InputType()
export class player_walletsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class player_walletsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    playerWalletID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => player_walletsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof player_walletsCountOrderByAggregateInput>;
    @Field(() => player_walletsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof player_walletsAvgOrderByAggregateInput>;
    @Field(() => player_walletsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof player_walletsMaxOrderByAggregateInput>;
    @Field(() => player_walletsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof player_walletsMinOrderByAggregateInput>;
    @Field(() => player_walletsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof player_walletsSumOrderByAggregateInput>;
}

@InputType()
export class player_walletsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    playerWalletID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
}

@InputType()
export class player_walletsScalarWhereWithAggregatesInput {
    @Field(() => [player_walletsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<player_walletsScalarWhereWithAggregatesInput>;
    @Field(() => [player_walletsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<player_walletsScalarWhereWithAggregatesInput>;
    @Field(() => [player_walletsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<player_walletsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerWalletID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    currency?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
}

@InputType()
export class player_walletsScalarWhereInput {
    @Field(() => [player_walletsScalarWhereInput], {nullable:true})
    AND?: Array<player_walletsScalarWhereInput>;
    @Field(() => [player_walletsScalarWhereInput], {nullable:true})
    OR?: Array<player_walletsScalarWhereInput>;
    @Field(() => [player_walletsScalarWhereInput], {nullable:true})
    NOT?: Array<player_walletsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
}

@InputType()
export class player_walletsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    frozenAmount?: keyof typeof SortOrder;
}

@InputType()
export class player_walletsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [player_walletsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateWithoutPlayersInput)
    create?: Array<player_walletsCreateWithoutPlayersInput>;
    @Field(() => [player_walletsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_walletsCreateOrConnectWithoutPlayersInput>;
    @Field(() => player_walletsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_walletsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_walletsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
}

@InputType()
export class player_walletsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@InputType()
export class player_walletsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@InputType()
export class player_walletsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [player_walletsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateWithoutPlayersInput)
    create?: Array<player_walletsCreateWithoutPlayersInput>;
    @Field(() => [player_walletsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_walletsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [player_walletsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<player_walletsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => player_walletsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_walletsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_walletsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<player_walletsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [player_walletsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<player_walletsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [player_walletsScalarWhereInput], {nullable:true})
    @Type(() => player_walletsScalarWhereInput)
    deleteMany?: Array<player_walletsScalarWhereInput>;
}

@InputType()
export class player_walletsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_walletsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_walletsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_walletsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_walletsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_walletsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => player_walletsScalarWhereInput, {nullable:false})
    @Type(() => player_walletsScalarWhereInput)
    where!: InstanceType<typeof player_walletsScalarWhereInput>;
    @Field(() => player_walletsUpdateManyMutationInput, {nullable:false})
    @Type(() => player_walletsUpdateManyMutationInput)
    data!: InstanceType<typeof player_walletsUpdateManyMutationInput>;
}

@InputType()
export class player_walletsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [player_walletsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateWithoutPlayersInput)
    create?: Array<player_walletsCreateWithoutPlayersInput>;
    @Field(() => [player_walletsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<player_walletsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [player_walletsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<player_walletsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => player_walletsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => player_walletsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof player_walletsCreateManyPlayersInputEnvelope>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsWhereUniqueInput], {nullable:true})
    @Type(() => player_walletsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>>;
    @Field(() => [player_walletsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<player_walletsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [player_walletsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => player_walletsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<player_walletsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [player_walletsScalarWhereInput], {nullable:true})
    @Type(() => player_walletsScalarWhereInput)
    deleteMany?: Array<player_walletsScalarWhereInput>;
}

@InputType()
export class player_walletsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>;
    @Field(() => player_walletsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => player_walletsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof player_walletsUpdateWithoutPlayersInput>;
}

@InputType()
export class player_walletsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
}

@InputType()
export class player_walletsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutPlayerWalletsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutPlayerWalletsNestedInput>;
}

@InputType()
export class player_walletsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: Prisma.AtLeast<player_walletsWhereUniqueInput, 'playerWalletID'>;
    @Field(() => player_walletsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => player_walletsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof player_walletsUpdateWithoutPlayersInput>;
    @Field(() => player_walletsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => player_walletsCreateWithoutPlayersInput)
    create!: InstanceType<typeof player_walletsCreateWithoutPlayersInput>;
}

@InputType()
export class player_walletsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => [player_walletsWhereInput], {nullable:true})
    AND?: Array<player_walletsWhereInput>;
    @Field(() => [player_walletsWhereInput], {nullable:true})
    OR?: Array<player_walletsWhereInput>;
    @Field(() => [player_walletsWhereInput], {nullable:true})
    NOT?: Array<player_walletsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@InputType()
export class player_walletsWhereInput {
    @Field(() => [player_walletsWhereInput], {nullable:true})
    AND?: Array<player_walletsWhereInput>;
    @Field(() => [player_walletsWhereInput], {nullable:true})
    OR?: Array<player_walletsWhereInput>;
    @Field(() => [player_walletsWhereInput], {nullable:true})
    NOT?: Array<player_walletsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerWalletID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => FloatFilter, {nullable:true})
    frozenAmount?: InstanceType<typeof FloatFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@ObjectType()
export class player_wallets {
    @Field(() => ID, {nullable:false})
    playerWalletID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => Date, {nullable:false})
    udate!: Date;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
}

@ArgsType()
export class CreateManyplayersArgs {
    @Field(() => [playersCreateManyInput], {nullable:false})
    @Type(() => playersCreateManyInput)
    data!: Array<playersCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateOneplayersArgs {
    @Field(() => playersCreateInput, {nullable:false})
    @Type(() => playersCreateInput)
    data!: InstanceType<typeof playersCreateInput>;
}

@ArgsType()
export class DeleteManyplayersArgs {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@ArgsType()
export class DeleteOneplayersArgs {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@ArgsType()
export class FindFirstplayersOrThrowArgs {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => [playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<playersOrderByWithRelationInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [PlayersScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof PlayersScalarFieldEnum>;
}

@ArgsType()
export class FindFirstplayersArgs {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => [playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<playersOrderByWithRelationInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [PlayersScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof PlayersScalarFieldEnum>;
}

@ArgsType()
export class FindManyplayersArgs {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => [playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<playersOrderByWithRelationInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [PlayersScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof PlayersScalarFieldEnum>;
}

@ArgsType()
export class FindUniqueplayersOrThrowArgs {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@ArgsType()
export class FindUniqueplayersArgs {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@ArgsType()
export class playersAggregateArgs {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => [playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<playersOrderByWithRelationInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    cursor?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class playersCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    name?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgFirstName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgLastName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgUsername?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgPhotoUrl?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    userLanguage?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationIp?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationDate?: keyof typeof SortOrder;
}

@InputType()
export class playersCreateManyAgentInputEnvelope {
    @Field(() => [playersCreateManyAgentInput], {nullable:false})
    @Type(() => playersCreateManyAgentInput)
    data!: Array<playersCreateManyAgentInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class playersCreateManyAgentInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
}

@InputType()
export class playersCreateManyInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
}

@InputType()
export class playersCreateNestedManyWithoutAgentInput {
    @Field(() => [playersCreateWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateWithoutAgentInput)
    create?: Array<playersCreateWithoutAgentInput>;
    @Field(() => [playersCreateOrConnectWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateOrConnectWithoutAgentInput)
    connectOrCreate?: Array<playersCreateOrConnectWithoutAgentInput>;
    @Field(() => playersCreateManyAgentInputEnvelope, {nullable:true})
    @Type(() => playersCreateManyAgentInputEnvelope)
    createMany?: InstanceType<typeof playersCreateManyAgentInputEnvelope>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
}

@InputType()
export class playersCreateNestedOneWithoutCurrentActivePlayersInput {
    @Field(() => playersCreateWithoutCurrentActivePlayersInput, {nullable:true})
    @Type(() => playersCreateWithoutCurrentActivePlayersInput)
    create?: InstanceType<typeof playersCreateWithoutCurrentActivePlayersInput>;
    @Field(() => playersCreateOrConnectWithoutCurrentActivePlayersInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutCurrentActivePlayersInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutCurrentActivePlayersInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutDepositTransactionsInput {
    @Field(() => playersCreateWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutDepositTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutDepositTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutDepositTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutDepositTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutGameHistoryInput {
    @Field(() => playersCreateWithoutGameHistoryInput, {nullable:true})
    @Type(() => playersCreateWithoutGameHistoryInput)
    create?: InstanceType<typeof playersCreateWithoutGameHistoryInput>;
    @Field(() => playersCreateOrConnectWithoutGameHistoryInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutGameHistoryInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutGameHistoryInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutManualAdjustmentsInput {
    @Field(() => playersCreateWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => playersCreateWithoutManualAdjustmentsInput)
    create?: InstanceType<typeof playersCreateWithoutManualAdjustmentsInput>;
    @Field(() => playersCreateOrConnectWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutManualAdjustmentsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutManualAdjustmentsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutPlayerLoginLogsInput {
    @Field(() => playersCreateWithoutPlayerLoginLogsInput, {nullable:true})
    @Type(() => playersCreateWithoutPlayerLoginLogsInput)
    create?: InstanceType<typeof playersCreateWithoutPlayerLoginLogsInput>;
    @Field(() => playersCreateOrConnectWithoutPlayerLoginLogsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutPlayerLoginLogsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutPlayerLoginLogsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutPlayerWalletsInput {
    @Field(() => playersCreateWithoutPlayerWalletsInput, {nullable:true})
    @Type(() => playersCreateWithoutPlayerWalletsInput)
    create?: InstanceType<typeof playersCreateWithoutPlayerWalletsInput>;
    @Field(() => playersCreateOrConnectWithoutPlayerWalletsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutPlayerWalletsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutPlayerWalletsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutTransferInTransactionsInput {
    @Field(() => playersCreateWithoutTransferInTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutTransferInTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutTransferInTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutTransferInTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutTransferInTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutTransferInTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutTransferOutTransactionsInput {
    @Field(() => playersCreateWithoutTransferOutTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutTransferOutTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutTransferOutTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutTransferOutTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutTransferOutTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutTransferOutTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutWalletRequestsInput {
    @Field(() => playersCreateWithoutWalletRequestsInput, {nullable:true})
    @Type(() => playersCreateWithoutWalletRequestsInput)
    create?: InstanceType<typeof playersCreateWithoutWalletRequestsInput>;
    @Field(() => playersCreateOrConnectWithoutWalletRequestsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutWalletRequestsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutWalletRequestsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateNestedOneWithoutWithdrawalTransactionsInput {
    @Field(() => playersCreateWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutWithdrawalTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutWithdrawalTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutWithdrawalTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutWithdrawalTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@InputType()
export class playersCreateOrConnectWithoutAgentInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutAgentInput, {nullable:false})
    @Type(() => playersCreateWithoutAgentInput)
    create!: InstanceType<typeof playersCreateWithoutAgentInput>;
}

@InputType()
export class playersCreateOrConnectWithoutCurrentActivePlayersInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutCurrentActivePlayersInput, {nullable:false})
    @Type(() => playersCreateWithoutCurrentActivePlayersInput)
    create!: InstanceType<typeof playersCreateWithoutCurrentActivePlayersInput>;
}

@InputType()
export class playersCreateOrConnectWithoutDepositTransactionsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutDepositTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutDepositTransactionsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutGameHistoryInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutGameHistoryInput, {nullable:false})
    @Type(() => playersCreateWithoutGameHistoryInput)
    create!: InstanceType<typeof playersCreateWithoutGameHistoryInput>;
}

@InputType()
export class playersCreateOrConnectWithoutManualAdjustmentsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => playersCreateWithoutManualAdjustmentsInput)
    create!: InstanceType<typeof playersCreateWithoutManualAdjustmentsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutPlayerLoginLogsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutPlayerLoginLogsInput, {nullable:false})
    @Type(() => playersCreateWithoutPlayerLoginLogsInput)
    create!: InstanceType<typeof playersCreateWithoutPlayerLoginLogsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutPlayerWalletsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutPlayerWalletsInput, {nullable:false})
    @Type(() => playersCreateWithoutPlayerWalletsInput)
    create!: InstanceType<typeof playersCreateWithoutPlayerWalletsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutTransferInTransactionsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutTransferInTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutTransferInTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutTransferInTransactionsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutTransferOutTransactionsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutTransferOutTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutTransferOutTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutTransferOutTransactionsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutWalletRequestsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutWalletRequestsInput, {nullable:false})
    @Type(() => playersCreateWithoutWalletRequestsInput)
    create!: InstanceType<typeof playersCreateWithoutWalletRequestsInput>;
}

@InputType()
export class playersCreateOrConnectWithoutWithdrawalTransactionsInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutWithdrawalTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class playersCreateWithoutAgentInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutCurrentActivePlayersInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutDepositTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutGameHistoryInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutManualAdjustmentsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutPlayerLoginLogsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutPlayerWalletsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutTransferInTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutTransferOutTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutWalletRequestsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateWithoutWithdrawalTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersCreateInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agentsCreateNestedOneWithoutPlayersInput, {nullable:false})
    agent!: InstanceType<typeof agentsCreateNestedOneWithoutPlayersInput>;
    @Field(() => player_login_logsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsCreateNestedManyWithoutPlayersInput>;
}

@ArgsType()
export class playersGroupByArgs {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => [playersOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<playersOrderByWithAggregationInput>;
    @Field(() => [PlayersScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof PlayersScalarFieldEnum>;
    @Field(() => playersScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof playersScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class playersMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    name?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgFirstName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgLastName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgUsername?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgPhotoUrl?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    userLanguage?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationIp?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationDate?: keyof typeof SortOrder;
}

@InputType()
export class playersMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    name?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgFirstName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgLastName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgUsername?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgPhotoUrl?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    userLanguage?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationIp?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationDate?: keyof typeof SortOrder;
}

@InputType()
export class playersOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class playersOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    name?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgFirstName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgLastName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgUsername?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgPhotoUrl?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    userLanguage?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationIp?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationDate?: keyof typeof SortOrder;
    @Field(() => playersCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof playersCountOrderByAggregateInput>;
    @Field(() => playersMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof playersMaxOrderByAggregateInput>;
    @Field(() => playersMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof playersMinOrderByAggregateInput>;
}

@InputType()
export class playersOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    name?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgFirstName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgLastName?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgUsername?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tgPhotoUrl?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    userLanguage?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationIp?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    agentID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    cdate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    udate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    enabled?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    registrationDate?: keyof typeof SortOrder;
    @Field(() => agentsOrderByWithRelationInput, {nullable:true})
    agent?: InstanceType<typeof agentsOrderByWithRelationInput>;
    @Field(() => player_login_logsOrderByRelationAggregateInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsOrderByRelationAggregateInput>;
    @Field(() => current_active_playersOrderByRelationAggregateInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersOrderByRelationAggregateInput>;
    @Field(() => game_historyOrderByRelationAggregateInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyOrderByRelationAggregateInput>;
    @Field(() => manual_adjustmentsOrderByRelationAggregateInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsOrderByRelationAggregateInput>;
    @Field(() => player_walletsOrderByRelationAggregateInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsOrderByRelationAggregateInput>;
    @Field(() => wallet_requestsOrderByRelationAggregateInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsOrderByRelationAggregateInput>;
    @Field(() => deposit_transactionsOrderByRelationAggregateInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsOrderByRelationAggregateInput>;
    @Field(() => withdrawal_transactionsOrderByRelationAggregateInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsOrderByRelationAggregateInput>;
    @Field(() => transfer_in_transactionsOrderByRelationAggregateInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsOrderByRelationAggregateInput>;
    @Field(() => transfer_out_transactionsOrderByRelationAggregateInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsOrderByRelationAggregateInput>;
}

@InputType()
export class playersScalarWhereWithAggregatesInput {
    @Field(() => [playersScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<playersScalarWhereWithAggregatesInput>;
    @Field(() => [playersScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<playersScalarWhereWithAggregatesInput>;
    @Field(() => [playersScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<playersScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    name?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    tgID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    tgFirstName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    tgLastName?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    tgUsername?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    userLanguage?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    registrationIp?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    agentID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    registrationDate?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class playersScalarWhereInput {
    @Field(() => [playersScalarWhereInput], {nullable:true})
    AND?: Array<playersScalarWhereInput>;
    @Field(() => [playersScalarWhereInput], {nullable:true})
    OR?: Array<playersScalarWhereInput>;
    @Field(() => [playersScalarWhereInput], {nullable:true})
    NOT?: Array<playersScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    name?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgLastName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgUsername?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    userLanguage?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    registrationIp?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    registrationDate?: InstanceType<typeof StringFilter>;
}

@InputType()
export class playersUncheckedCreateNestedManyWithoutAgentInput {
    @Field(() => [playersCreateWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateWithoutAgentInput)
    create?: Array<playersCreateWithoutAgentInput>;
    @Field(() => [playersCreateOrConnectWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateOrConnectWithoutAgentInput)
    connectOrCreate?: Array<playersCreateOrConnectWithoutAgentInput>;
    @Field(() => playersCreateManyAgentInputEnvelope, {nullable:true})
    @Type(() => playersCreateManyAgentInputEnvelope)
    createMany?: InstanceType<typeof playersCreateManyAgentInputEnvelope>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
}

@InputType()
export class playersUncheckedCreateWithoutAgentInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutCurrentActivePlayersInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutDepositTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutGameHistoryInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutManualAdjustmentsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutPlayerLoginLogsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutPlayerWalletsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutTransferInTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutTransferOutTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutWalletRequestsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateWithoutWithdrawalTransactionsInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => player_login_logsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => current_active_playersUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => game_historyUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => player_walletsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput>;
}

@InputType()
export class playersUncheckedUpdateManyWithoutAgentNestedInput {
    @Field(() => [playersCreateWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateWithoutAgentInput)
    create?: Array<playersCreateWithoutAgentInput>;
    @Field(() => [playersCreateOrConnectWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateOrConnectWithoutAgentInput)
    connectOrCreate?: Array<playersCreateOrConnectWithoutAgentInput>;
    @Field(() => [playersUpsertWithWhereUniqueWithoutAgentInput], {nullable:true})
    @Type(() => playersUpsertWithWhereUniqueWithoutAgentInput)
    upsert?: Array<playersUpsertWithWhereUniqueWithoutAgentInput>;
    @Field(() => playersCreateManyAgentInputEnvelope, {nullable:true})
    @Type(() => playersCreateManyAgentInputEnvelope)
    createMany?: InstanceType<typeof playersCreateManyAgentInputEnvelope>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    set?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersUpdateWithWhereUniqueWithoutAgentInput], {nullable:true})
    @Type(() => playersUpdateWithWhereUniqueWithoutAgentInput)
    update?: Array<playersUpdateWithWhereUniqueWithoutAgentInput>;
    @Field(() => [playersUpdateManyWithWhereWithoutAgentInput], {nullable:true})
    @Type(() => playersUpdateManyWithWhereWithoutAgentInput)
    updateMany?: Array<playersUpdateManyWithWhereWithoutAgentInput>;
    @Field(() => [playersScalarWhereInput], {nullable:true})
    @Type(() => playersScalarWhereInput)
    deleteMany?: Array<playersScalarWhereInput>;
}

@InputType()
export class playersUncheckedUpdateManyWithoutAgentInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class playersUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutAgentInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutCurrentActivePlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutDepositTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutGameHistoryInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutManualAdjustmentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutPlayerLoginLogsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutPlayerWalletsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutTransferInTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutTransferOutTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutWalletRequestsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateWithoutWithdrawalTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    agentID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class playersUpdateManyWithWhereWithoutAgentInput {
    @Field(() => playersScalarWhereInput, {nullable:false})
    @Type(() => playersScalarWhereInput)
    where!: InstanceType<typeof playersScalarWhereInput>;
    @Field(() => playersUpdateManyMutationInput, {nullable:false})
    @Type(() => playersUpdateManyMutationInput)
    data!: InstanceType<typeof playersUpdateManyMutationInput>;
}

@InputType()
export class playersUpdateManyWithoutAgentNestedInput {
    @Field(() => [playersCreateWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateWithoutAgentInput)
    create?: Array<playersCreateWithoutAgentInput>;
    @Field(() => [playersCreateOrConnectWithoutAgentInput], {nullable:true})
    @Type(() => playersCreateOrConnectWithoutAgentInput)
    connectOrCreate?: Array<playersCreateOrConnectWithoutAgentInput>;
    @Field(() => [playersUpsertWithWhereUniqueWithoutAgentInput], {nullable:true})
    @Type(() => playersUpsertWithWhereUniqueWithoutAgentInput)
    upsert?: Array<playersUpsertWithWhereUniqueWithoutAgentInput>;
    @Field(() => playersCreateManyAgentInputEnvelope, {nullable:true})
    @Type(() => playersCreateManyAgentInputEnvelope)
    createMany?: InstanceType<typeof playersCreateManyAgentInputEnvelope>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    set?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersWhereUniqueInput], {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>>;
    @Field(() => [playersUpdateWithWhereUniqueWithoutAgentInput], {nullable:true})
    @Type(() => playersUpdateWithWhereUniqueWithoutAgentInput)
    update?: Array<playersUpdateWithWhereUniqueWithoutAgentInput>;
    @Field(() => [playersUpdateManyWithWhereWithoutAgentInput], {nullable:true})
    @Type(() => playersUpdateManyWithWhereWithoutAgentInput)
    updateMany?: Array<playersUpdateManyWithWhereWithoutAgentInput>;
    @Field(() => [playersScalarWhereInput], {nullable:true})
    @Type(() => playersScalarWhereInput)
    deleteMany?: Array<playersScalarWhereInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutCurrentActivePlayersNestedInput {
    @Field(() => playersCreateWithoutCurrentActivePlayersInput, {nullable:true})
    @Type(() => playersCreateWithoutCurrentActivePlayersInput)
    create?: InstanceType<typeof playersCreateWithoutCurrentActivePlayersInput>;
    @Field(() => playersCreateOrConnectWithoutCurrentActivePlayersInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutCurrentActivePlayersInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutCurrentActivePlayersInput>;
    @Field(() => playersUpsertWithoutCurrentActivePlayersInput, {nullable:true})
    @Type(() => playersUpsertWithoutCurrentActivePlayersInput)
    upsert?: InstanceType<typeof playersUpsertWithoutCurrentActivePlayersInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutCurrentActivePlayersInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutCurrentActivePlayersInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutCurrentActivePlayersInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutDepositTransactionsNestedInput {
    @Field(() => playersCreateWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutDepositTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutDepositTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutDepositTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutDepositTransactionsInput>;
    @Field(() => playersUpsertWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => playersUpsertWithoutDepositTransactionsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutDepositTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutDepositTransactionsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutDepositTransactionsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutDepositTransactionsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutGameHistoryNestedInput {
    @Field(() => playersCreateWithoutGameHistoryInput, {nullable:true})
    @Type(() => playersCreateWithoutGameHistoryInput)
    create?: InstanceType<typeof playersCreateWithoutGameHistoryInput>;
    @Field(() => playersCreateOrConnectWithoutGameHistoryInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutGameHistoryInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutGameHistoryInput>;
    @Field(() => playersUpsertWithoutGameHistoryInput, {nullable:true})
    @Type(() => playersUpsertWithoutGameHistoryInput)
    upsert?: InstanceType<typeof playersUpsertWithoutGameHistoryInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutGameHistoryInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutGameHistoryInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutGameHistoryInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutManualAdjustmentsNestedInput {
    @Field(() => playersCreateWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => playersCreateWithoutManualAdjustmentsInput)
    create?: InstanceType<typeof playersCreateWithoutManualAdjustmentsInput>;
    @Field(() => playersCreateOrConnectWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutManualAdjustmentsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutManualAdjustmentsInput>;
    @Field(() => playersUpsertWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => playersUpsertWithoutManualAdjustmentsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutManualAdjustmentsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutManualAdjustmentsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutManualAdjustmentsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutManualAdjustmentsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutPlayerLoginLogsNestedInput {
    @Field(() => playersCreateWithoutPlayerLoginLogsInput, {nullable:true})
    @Type(() => playersCreateWithoutPlayerLoginLogsInput)
    create?: InstanceType<typeof playersCreateWithoutPlayerLoginLogsInput>;
    @Field(() => playersCreateOrConnectWithoutPlayerLoginLogsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutPlayerLoginLogsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutPlayerLoginLogsInput>;
    @Field(() => playersUpsertWithoutPlayerLoginLogsInput, {nullable:true})
    @Type(() => playersUpsertWithoutPlayerLoginLogsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutPlayerLoginLogsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutPlayerLoginLogsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutPlayerLoginLogsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutPlayerLoginLogsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutPlayerWalletsNestedInput {
    @Field(() => playersCreateWithoutPlayerWalletsInput, {nullable:true})
    @Type(() => playersCreateWithoutPlayerWalletsInput)
    create?: InstanceType<typeof playersCreateWithoutPlayerWalletsInput>;
    @Field(() => playersCreateOrConnectWithoutPlayerWalletsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutPlayerWalletsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutPlayerWalletsInput>;
    @Field(() => playersUpsertWithoutPlayerWalletsInput, {nullable:true})
    @Type(() => playersUpsertWithoutPlayerWalletsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutPlayerWalletsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutPlayerWalletsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutPlayerWalletsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutPlayerWalletsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutTransferInTransactionsNestedInput {
    @Field(() => playersCreateWithoutTransferInTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutTransferInTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutTransferInTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutTransferInTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutTransferInTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutTransferInTransactionsInput>;
    @Field(() => playersUpsertWithoutTransferInTransactionsInput, {nullable:true})
    @Type(() => playersUpsertWithoutTransferInTransactionsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutTransferInTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutTransferInTransactionsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutTransferInTransactionsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutTransferInTransactionsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutTransferOutTransactionsNestedInput {
    @Field(() => playersCreateWithoutTransferOutTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutTransferOutTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutTransferOutTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutTransferOutTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutTransferOutTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutTransferOutTransactionsInput>;
    @Field(() => playersUpsertWithoutTransferOutTransactionsInput, {nullable:true})
    @Type(() => playersUpsertWithoutTransferOutTransactionsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutTransferOutTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutTransferOutTransactionsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutTransferOutTransactionsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutTransferOutTransactionsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutWalletRequestsNestedInput {
    @Field(() => playersCreateWithoutWalletRequestsInput, {nullable:true})
    @Type(() => playersCreateWithoutWalletRequestsInput)
    create?: InstanceType<typeof playersCreateWithoutWalletRequestsInput>;
    @Field(() => playersCreateOrConnectWithoutWalletRequestsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutWalletRequestsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutWalletRequestsInput>;
    @Field(() => playersUpsertWithoutWalletRequestsInput, {nullable:true})
    @Type(() => playersUpsertWithoutWalletRequestsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutWalletRequestsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutWalletRequestsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutWalletRequestsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutWalletRequestsInput>;
}

@InputType()
export class playersUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput {
    @Field(() => playersCreateWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => playersCreateWithoutWithdrawalTransactionsInput)
    create?: InstanceType<typeof playersCreateWithoutWithdrawalTransactionsInput>;
    @Field(() => playersCreateOrConnectWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => playersCreateOrConnectWithoutWithdrawalTransactionsInput)
    connectOrCreate?: InstanceType<typeof playersCreateOrConnectWithoutWithdrawalTransactionsInput>;
    @Field(() => playersUpsertWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => playersUpsertWithoutWithdrawalTransactionsInput)
    upsert?: InstanceType<typeof playersUpsertWithoutWithdrawalTransactionsInput>;
    @Field(() => playersWhereUniqueInput, {nullable:true})
    @Type(() => playersWhereUniqueInput)
    connect?: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateToOneWithWhereWithoutWithdrawalTransactionsInput, {nullable:true})
    @Type(() => playersUpdateToOneWithWhereWithoutWithdrawalTransactionsInput)
    update?: InstanceType<typeof playersUpdateToOneWithWhereWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutCurrentActivePlayersInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutCurrentActivePlayersInput, {nullable:false})
    @Type(() => playersUpdateWithoutCurrentActivePlayersInput)
    data!: InstanceType<typeof playersUpdateWithoutCurrentActivePlayersInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutDepositTransactionsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutDepositTransactionsInput)
    data!: InstanceType<typeof playersUpdateWithoutDepositTransactionsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutGameHistoryInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutGameHistoryInput, {nullable:false})
    @Type(() => playersUpdateWithoutGameHistoryInput)
    data!: InstanceType<typeof playersUpdateWithoutGameHistoryInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutManualAdjustmentsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => playersUpdateWithoutManualAdjustmentsInput)
    data!: InstanceType<typeof playersUpdateWithoutManualAdjustmentsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutPlayerLoginLogsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutPlayerLoginLogsInput, {nullable:false})
    @Type(() => playersUpdateWithoutPlayerLoginLogsInput)
    data!: InstanceType<typeof playersUpdateWithoutPlayerLoginLogsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutPlayerWalletsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutPlayerWalletsInput, {nullable:false})
    @Type(() => playersUpdateWithoutPlayerWalletsInput)
    data!: InstanceType<typeof playersUpdateWithoutPlayerWalletsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutTransferInTransactionsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutTransferInTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutTransferInTransactionsInput)
    data!: InstanceType<typeof playersUpdateWithoutTransferInTransactionsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutTransferOutTransactionsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutTransferOutTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutTransferOutTransactionsInput)
    data!: InstanceType<typeof playersUpdateWithoutTransferOutTransactionsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutWalletRequestsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutWalletRequestsInput, {nullable:false})
    @Type(() => playersUpdateWithoutWalletRequestsInput)
    data!: InstanceType<typeof playersUpdateWithoutWalletRequestsInput>;
}

@InputType()
export class playersUpdateToOneWithWhereWithoutWithdrawalTransactionsInput {
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersUpdateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutWithdrawalTransactionsInput)
    data!: InstanceType<typeof playersUpdateWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class playersUpdateWithWhereUniqueWithoutAgentInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateWithoutAgentInput, {nullable:false})
    @Type(() => playersUpdateWithoutAgentInput)
    data!: InstanceType<typeof playersUpdateWithoutAgentInput>;
}

@InputType()
export class playersUpdateWithoutAgentInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutCurrentActivePlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutDepositTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutGameHistoryInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutManualAdjustmentsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutPlayerLoginLogsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutPlayerWalletsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutTransferInTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutTransferOutTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutWalletRequestsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateWithoutWithdrawalTransactionsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    name?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgLastName?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    userLanguage?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationIp?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    udate?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    enabled?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    registrationDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => agentsUpdateOneRequiredWithoutPlayersNestedInput, {nullable:true})
    agent?: InstanceType<typeof agentsUpdateOneRequiredWithoutPlayersNestedInput>;
    @Field(() => player_login_logsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerLoginLogs?: InstanceType<typeof player_login_logsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => current_active_playersUpdateManyWithoutPlayersNestedInput, {nullable:true})
    currentActivePlayers?: InstanceType<typeof current_active_playersUpdateManyWithoutPlayersNestedInput>;
    @Field(() => game_historyUpdateManyWithoutPlayersNestedInput, {nullable:true})
    gameHistory?: InstanceType<typeof game_historyUpdateManyWithoutPlayersNestedInput>;
    @Field(() => manual_adjustmentsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    manualAdjustments?: InstanceType<typeof manual_adjustmentsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => player_walletsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    playerWallets?: InstanceType<typeof player_walletsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => wallet_requestsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    walletRequests?: InstanceType<typeof wallet_requestsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => deposit_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    depositTransactions?: InstanceType<typeof deposit_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => withdrawal_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof withdrawal_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_in_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferInTransactions?: InstanceType<typeof transfer_in_transactionsUpdateManyWithoutPlayersNestedInput>;
    @Field(() => transfer_out_transactionsUpdateManyWithoutPlayersNestedInput, {nullable:true})
    transferOutTransactions?: InstanceType<typeof transfer_out_transactionsUpdateManyWithoutPlayersNestedInput>;
}

@InputType()
export class playersUpsertWithWhereUniqueWithoutAgentInput {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersUpdateWithoutAgentInput, {nullable:false})
    @Type(() => playersUpdateWithoutAgentInput)
    update!: InstanceType<typeof playersUpdateWithoutAgentInput>;
    @Field(() => playersCreateWithoutAgentInput, {nullable:false})
    @Type(() => playersCreateWithoutAgentInput)
    create!: InstanceType<typeof playersCreateWithoutAgentInput>;
}

@InputType()
export class playersUpsertWithoutCurrentActivePlayersInput {
    @Field(() => playersUpdateWithoutCurrentActivePlayersInput, {nullable:false})
    @Type(() => playersUpdateWithoutCurrentActivePlayersInput)
    update!: InstanceType<typeof playersUpdateWithoutCurrentActivePlayersInput>;
    @Field(() => playersCreateWithoutCurrentActivePlayersInput, {nullable:false})
    @Type(() => playersCreateWithoutCurrentActivePlayersInput)
    create!: InstanceType<typeof playersCreateWithoutCurrentActivePlayersInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutDepositTransactionsInput {
    @Field(() => playersUpdateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutDepositTransactionsInput)
    update!: InstanceType<typeof playersUpdateWithoutDepositTransactionsInput>;
    @Field(() => playersCreateWithoutDepositTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutDepositTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutDepositTransactionsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutGameHistoryInput {
    @Field(() => playersUpdateWithoutGameHistoryInput, {nullable:false})
    @Type(() => playersUpdateWithoutGameHistoryInput)
    update!: InstanceType<typeof playersUpdateWithoutGameHistoryInput>;
    @Field(() => playersCreateWithoutGameHistoryInput, {nullable:false})
    @Type(() => playersCreateWithoutGameHistoryInput)
    create!: InstanceType<typeof playersCreateWithoutGameHistoryInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutManualAdjustmentsInput {
    @Field(() => playersUpdateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => playersUpdateWithoutManualAdjustmentsInput)
    update!: InstanceType<typeof playersUpdateWithoutManualAdjustmentsInput>;
    @Field(() => playersCreateWithoutManualAdjustmentsInput, {nullable:false})
    @Type(() => playersCreateWithoutManualAdjustmentsInput)
    create!: InstanceType<typeof playersCreateWithoutManualAdjustmentsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutPlayerLoginLogsInput {
    @Field(() => playersUpdateWithoutPlayerLoginLogsInput, {nullable:false})
    @Type(() => playersUpdateWithoutPlayerLoginLogsInput)
    update!: InstanceType<typeof playersUpdateWithoutPlayerLoginLogsInput>;
    @Field(() => playersCreateWithoutPlayerLoginLogsInput, {nullable:false})
    @Type(() => playersCreateWithoutPlayerLoginLogsInput)
    create!: InstanceType<typeof playersCreateWithoutPlayerLoginLogsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutPlayerWalletsInput {
    @Field(() => playersUpdateWithoutPlayerWalletsInput, {nullable:false})
    @Type(() => playersUpdateWithoutPlayerWalletsInput)
    update!: InstanceType<typeof playersUpdateWithoutPlayerWalletsInput>;
    @Field(() => playersCreateWithoutPlayerWalletsInput, {nullable:false})
    @Type(() => playersCreateWithoutPlayerWalletsInput)
    create!: InstanceType<typeof playersCreateWithoutPlayerWalletsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutTransferInTransactionsInput {
    @Field(() => playersUpdateWithoutTransferInTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutTransferInTransactionsInput)
    update!: InstanceType<typeof playersUpdateWithoutTransferInTransactionsInput>;
    @Field(() => playersCreateWithoutTransferInTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutTransferInTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutTransferInTransactionsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutTransferOutTransactionsInput {
    @Field(() => playersUpdateWithoutTransferOutTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutTransferOutTransactionsInput)
    update!: InstanceType<typeof playersUpdateWithoutTransferOutTransactionsInput>;
    @Field(() => playersCreateWithoutTransferOutTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutTransferOutTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutTransferOutTransactionsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutWalletRequestsInput {
    @Field(() => playersUpdateWithoutWalletRequestsInput, {nullable:false})
    @Type(() => playersUpdateWithoutWalletRequestsInput)
    update!: InstanceType<typeof playersUpdateWithoutWalletRequestsInput>;
    @Field(() => playersCreateWithoutWalletRequestsInput, {nullable:false})
    @Type(() => playersCreateWithoutWalletRequestsInput)
    create!: InstanceType<typeof playersCreateWithoutWalletRequestsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersUpsertWithoutWithdrawalTransactionsInput {
    @Field(() => playersUpdateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => playersUpdateWithoutWithdrawalTransactionsInput)
    update!: InstanceType<typeof playersUpdateWithoutWithdrawalTransactionsInput>;
    @Field(() => playersCreateWithoutWithdrawalTransactionsInput, {nullable:false})
    @Type(() => playersCreateWithoutWithdrawalTransactionsInput)
    create!: InstanceType<typeof playersCreateWithoutWithdrawalTransactionsInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class playersWhereUniqueInput {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    tgID?: string;
    @Field(() => String, {nullable:true})
    tgUsername?: string;
    @Field(() => [playersWhereInput], {nullable:true})
    AND?: Array<playersWhereInput>;
    @Field(() => [playersWhereInput], {nullable:true})
    OR?: Array<playersWhereInput>;
    @Field(() => [playersWhereInput], {nullable:true})
    NOT?: Array<playersWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    name?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgLastName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    userLanguage?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    registrationIp?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    registrationDate?: InstanceType<typeof StringFilter>;
    @Field(() => AgentsRelationFilter, {nullable:true})
    agent?: InstanceType<typeof AgentsRelationFilter>;
    @Field(() => Player_login_logsListRelationFilter, {nullable:true})
    playerLoginLogs?: InstanceType<typeof Player_login_logsListRelationFilter>;
    @Field(() => Current_active_playersListRelationFilter, {nullable:true})
    currentActivePlayers?: InstanceType<typeof Current_active_playersListRelationFilter>;
    @Field(() => Game_historyListRelationFilter, {nullable:true})
    gameHistory?: InstanceType<typeof Game_historyListRelationFilter>;
    @Field(() => Manual_adjustmentsListRelationFilter, {nullable:true})
    manualAdjustments?: InstanceType<typeof Manual_adjustmentsListRelationFilter>;
    @Field(() => Player_walletsListRelationFilter, {nullable:true})
    playerWallets?: InstanceType<typeof Player_walletsListRelationFilter>;
    @Field(() => Wallet_requestsListRelationFilter, {nullable:true})
    walletRequests?: InstanceType<typeof Wallet_requestsListRelationFilter>;
    @Field(() => Deposit_transactionsListRelationFilter, {nullable:true})
    depositTransactions?: InstanceType<typeof Deposit_transactionsListRelationFilter>;
    @Field(() => Withdrawal_transactionsListRelationFilter, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof Withdrawal_transactionsListRelationFilter>;
    @Field(() => Transfer_in_transactionsListRelationFilter, {nullable:true})
    transferInTransactions?: InstanceType<typeof Transfer_in_transactionsListRelationFilter>;
    @Field(() => Transfer_out_transactionsListRelationFilter, {nullable:true})
    transferOutTransactions?: InstanceType<typeof Transfer_out_transactionsListRelationFilter>;
}

@InputType()
export class playersWhereInput {
    @Field(() => [playersWhereInput], {nullable:true})
    AND?: Array<playersWhereInput>;
    @Field(() => [playersWhereInput], {nullable:true})
    OR?: Array<playersWhereInput>;
    @Field(() => [playersWhereInput], {nullable:true})
    NOT?: Array<playersWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    name?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgFirstName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgLastName?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgUsername?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tgPhotoUrl?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    userLanguage?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    registrationIp?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    agentID?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    cdate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    udate?: InstanceType<typeof DateTimeFilter>;
    @Field(() => BoolFilter, {nullable:true})
    enabled?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    registrationDate?: InstanceType<typeof StringFilter>;
    @Field(() => AgentsRelationFilter, {nullable:true})
    agent?: InstanceType<typeof AgentsRelationFilter>;
    @Field(() => Player_login_logsListRelationFilter, {nullable:true})
    playerLoginLogs?: InstanceType<typeof Player_login_logsListRelationFilter>;
    @Field(() => Current_active_playersListRelationFilter, {nullable:true})
    currentActivePlayers?: InstanceType<typeof Current_active_playersListRelationFilter>;
    @Field(() => Game_historyListRelationFilter, {nullable:true})
    gameHistory?: InstanceType<typeof Game_historyListRelationFilter>;
    @Field(() => Manual_adjustmentsListRelationFilter, {nullable:true})
    manualAdjustments?: InstanceType<typeof Manual_adjustmentsListRelationFilter>;
    @Field(() => Player_walletsListRelationFilter, {nullable:true})
    playerWallets?: InstanceType<typeof Player_walletsListRelationFilter>;
    @Field(() => Wallet_requestsListRelationFilter, {nullable:true})
    walletRequests?: InstanceType<typeof Wallet_requestsListRelationFilter>;
    @Field(() => Deposit_transactionsListRelationFilter, {nullable:true})
    depositTransactions?: InstanceType<typeof Deposit_transactionsListRelationFilter>;
    @Field(() => Withdrawal_transactionsListRelationFilter, {nullable:true})
    withdrawalTransactions?: InstanceType<typeof Withdrawal_transactionsListRelationFilter>;
    @Field(() => Transfer_in_transactionsListRelationFilter, {nullable:true})
    transferInTransactions?: InstanceType<typeof Transfer_in_transactionsListRelationFilter>;
    @Field(() => Transfer_out_transactionsListRelationFilter, {nullable:true})
    transferOutTransactions?: InstanceType<typeof Transfer_out_transactionsListRelationFilter>;
}

@ObjectType()
export class players {
    @Field(() => ID, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date;
    @Field(() => Date, {nullable:false})
    udate!: Date;
    @Field(() => Boolean, {nullable:false,defaultValue:true})
    enabled!: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => agents, {nullable:false})
    agent?: InstanceType<typeof agents>;
    @Field(() => [player_login_logs], {nullable:true})
    playerLoginLogs?: Array<player_login_logs>;
    @Field(() => [current_active_players], {nullable:true})
    currentActivePlayers?: Array<current_active_players>;
    @Field(() => [game_history], {nullable:true})
    gameHistory?: Array<game_history>;
    @Field(() => [manual_adjustments], {nullable:true})
    manualAdjustments?: Array<manual_adjustments>;
    @Field(() => [player_wallets], {nullable:true})
    playerWallets?: Array<player_wallets>;
    @Field(() => [wallet_requests], {nullable:true})
    walletRequests?: Array<wallet_requests>;
    @Field(() => [deposit_transactions], {nullable:true})
    depositTransactions?: Array<deposit_transactions>;
    @Field(() => [withdrawal_transactions], {nullable:true})
    withdrawalTransactions?: Array<withdrawal_transactions>;
    @Field(() => [transfer_in_transactions], {nullable:true})
    transferInTransactions?: Array<transfer_in_transactions>;
    @Field(() => [transfer_out_transactions], {nullable:true})
    transferOutTransactions?: Array<transfer_out_transactions>;
    @Field(() => PlayersCount, {nullable:false})
    _count?: InstanceType<typeof PlayersCount>;
}

@ArgsType()
export class UpdateManyplayersArgs {
    @Field(() => playersUpdateManyMutationInput, {nullable:false})
    @Type(() => playersUpdateManyMutationInput)
    data!: InstanceType<typeof playersUpdateManyMutationInput>;
    @Field(() => playersWhereInput, {nullable:true})
    @Type(() => playersWhereInput)
    where?: InstanceType<typeof playersWhereInput>;
}

@ArgsType()
export class UpdateOneplayersArgs {
    @Field(() => playersUpdateInput, {nullable:false})
    @Type(() => playersUpdateInput)
    data!: InstanceType<typeof playersUpdateInput>;
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
}

@ArgsType()
export class UpsertOneplayersArgs {
    @Field(() => playersWhereUniqueInput, {nullable:false})
    @Type(() => playersWhereUniqueInput)
    where!: Prisma.AtLeast<playersWhereUniqueInput, 'playerID' | 'tgID' | 'tgUsername'>;
    @Field(() => playersCreateInput, {nullable:false})
    @Type(() => playersCreateInput)
    create!: InstanceType<typeof playersCreateInput>;
    @Field(() => playersUpdateInput, {nullable:false})
    @Type(() => playersUpdateInput)
    update!: InstanceType<typeof playersUpdateInput>;
}

@ObjectType()
export class Admin_accessesCountAggregate {
    @Field(() => Int, {nullable:false})
    adminAccessID!: number;
    @Field(() => Int, {nullable:false})
    accessName!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Admin_accessesCount {
    @Field(() => Int, {nullable:false})
    role_accesses!: number;
}

@ObjectType()
export class Admin_accessesGroupBy {
    @Field(() => String, {nullable:false})
    adminAccessID!: string;
    @Field(() => String, {nullable:false})
    accessName!: string;
    @Field(() => Admin_accessesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_accessesCountAggregate>;
    @Field(() => Admin_accessesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_accessesMinAggregate>;
    @Field(() => Admin_accessesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_accessesMaxAggregate>;
}

@ObjectType()
export class Admin_accessesMaxAggregate {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:true})
    accessName?: string;
}

@ObjectType()
export class Admin_accessesMinAggregate {
    @Field(() => String, {nullable:true})
    adminAccessID?: string;
    @Field(() => String, {nullable:true})
    accessName?: string;
}

@InputType()
export class Admin_accessesRelationFilter {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    is?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => admin_accessesWhereInput, {nullable:true})
    isNot?: InstanceType<typeof admin_accessesWhereInput>;
}

@ObjectType()
export class Admin_bank_accountsCountAggregate {
    @Field(() => Int, {nullable:false})
    adminBankAccountID!: number;
    @Field(() => Int, {nullable:false})
    bankName!: number;
    @Field(() => Int, {nullable:false})
    accountNumber!: number;
    @Field(() => Int, {nullable:false})
    holderName!: number;
    @Field(() => Int, {nullable:false})
    enabled!: number;
    @Field(() => Int, {nullable:false})
    method!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Admin_bank_accountsCount {
    @Field(() => Int, {nullable:false})
    depositTransactions!: number;
    @Field(() => Int, {nullable:false})
    withdrawalTransactions!: number;
}

@ObjectType()
export class Admin_bank_accountsGroupBy {
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
    @Field(() => String, {nullable:false})
    bankName!: string;
    @Field(() => String, {nullable:false})
    accountNumber!: string;
    @Field(() => String, {nullable:false})
    holderName!: string;
    @Field(() => Boolean, {nullable:false})
    enabled!: boolean;
    @Field(() => String, {nullable:false})
    method!: string;
    @Field(() => Admin_bank_accountsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_bank_accountsCountAggregate>;
    @Field(() => Admin_bank_accountsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_bank_accountsMinAggregate>;
    @Field(() => Admin_bank_accountsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_bank_accountsMaxAggregate>;
}

@ObjectType()
export class Admin_bank_accountsMaxAggregate {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:true})
    bankName?: string;
    @Field(() => String, {nullable:true})
    accountNumber?: string;
    @Field(() => String, {nullable:true})
    holderName?: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    method?: string;
}

@ObjectType()
export class Admin_bank_accountsMinAggregate {
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
    @Field(() => String, {nullable:true})
    bankName?: string;
    @Field(() => String, {nullable:true})
    accountNumber?: string;
    @Field(() => String, {nullable:true})
    holderName?: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    method?: string;
}

@InputType()
export class Admin_bank_accountsRelationFilter {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    is?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    isNot?: InstanceType<typeof admin_bank_accountsWhereInput>;
}

@ObjectType()
export class Admin_login_logsCountAggregate {
    @Field(() => Int, {nullable:false})
    loginID!: number;
    @Field(() => Int, {nullable:false})
    adminID!: number;
    @Field(() => Int, {nullable:false})
    ip!: number;
    @Field(() => Int, {nullable:false})
    loginTime!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Admin_login_logsGroupBy {
    @Field(() => String, {nullable:false})
    loginID!: string;
    @Field(() => String, {nullable:false})
    adminID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
    @Field(() => Admin_login_logsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_login_logsCountAggregate>;
    @Field(() => Admin_login_logsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_login_logsMinAggregate>;
    @Field(() => Admin_login_logsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_login_logsMaxAggregate>;
}

@InputType()
export class Admin_login_logsListRelationFilter {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    every?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    some?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    none?: InstanceType<typeof admin_login_logsWhereInput>;
}

@ObjectType()
export class Admin_login_logsMaxAggregate {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:true})
    ip?: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@ObjectType()
export class Admin_login_logsMinAggregate {
    @Field(() => String, {nullable:true})
    loginID?: string;
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:true})
    ip?: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@ObjectType()
export class Admin_role_accessesCountAggregate {
    @Field(() => Int, {nullable:false})
    admin_roleID!: number;
    @Field(() => Int, {nullable:false})
    admin_access_id!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Admin_role_accessesGroupBy {
    @Field(() => String, {nullable:false})
    admin_roleID!: string;
    @Field(() => String, {nullable:false})
    admin_access_id!: string;
    @Field(() => Admin_role_accessesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_role_accessesCountAggregate>;
    @Field(() => Admin_role_accessesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_role_accessesMinAggregate>;
    @Field(() => Admin_role_accessesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_role_accessesMaxAggregate>;
}

@InputType()
export class Admin_role_accessesListRelationFilter {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    every?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    some?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    none?: InstanceType<typeof admin_role_accessesWhereInput>;
}

@ObjectType()
export class Admin_role_accessesMaxAggregate {
    @Field(() => String, {nullable:true})
    admin_roleID?: string;
    @Field(() => String, {nullable:true})
    admin_access_id?: string;
}

@ObjectType()
export class Admin_role_accessesMinAggregate {
    @Field(() => String, {nullable:true})
    admin_roleID?: string;
    @Field(() => String, {nullable:true})
    admin_access_id?: string;
}

@ObjectType()
export class Admin_rolesCountAggregate {
    @Field(() => Int, {nullable:false})
    adminRoleID!: number;
    @Field(() => Int, {nullable:false})
    adminRoleName!: number;
    @Field(() => Int, {nullable:false})
    enabled!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Admin_rolesCount {
    @Field(() => Int, {nullable:false})
    admins!: number;
    @Field(() => Int, {nullable:false})
    admin_accesses!: number;
}

@ObjectType()
export class Admin_rolesGroupBy {
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    adminRoleName!: string;
    @Field(() => Boolean, {nullable:false})
    enabled!: boolean;
    @Field(() => Admin_rolesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_rolesCountAggregate>;
    @Field(() => Admin_rolesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_rolesMinAggregate>;
    @Field(() => Admin_rolesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_rolesMaxAggregate>;
}

@ObjectType()
export class Admin_rolesMaxAggregate {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:true})
    adminRoleName?: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@ObjectType()
export class Admin_rolesMinAggregate {
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:true})
    adminRoleName?: string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@InputType()
export class Admin_rolesRelationFilter {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    is?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => admin_rolesWhereInput, {nullable:true})
    isNot?: InstanceType<typeof admin_rolesWhereInput>;
}

@ObjectType()
export class AdminsCountAggregate {
    @Field(() => Int, {nullable:false})
    adminID!: number;
    @Field(() => Int, {nullable:false})
    adminName!: number;
    @Field(() => Int, {nullable:false})
    adminPassword!: number;
    @Field(() => Int, {nullable:false})
    adminRoleID!: number;
    @Field(() => Int, {nullable:false})
    createdBy!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    udate!: number;
    @Field(() => Int, {nullable:false})
    enabled!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class AdminsCount {
    @Field(() => Int, {nullable:false})
    adminLoginLogs!: number;
    @Field(() => Int, {nullable:false})
    manualAdjustments!: number;
}

@ObjectType()
export class AdminsGroupBy {
    @Field(() => String, {nullable:false})
    adminID!: string;
    @Field(() => String, {nullable:false})
    adminName!: string;
    @Field(() => String, {nullable:false})
    adminPassword!: string;
    @Field(() => String, {nullable:false})
    adminRoleID!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Date, {nullable:false})
    udate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    enabled!: boolean;
    @Field(() => AdminsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof AdminsCountAggregate>;
    @Field(() => AdminsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof AdminsMinAggregate>;
    @Field(() => AdminsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof AdminsMaxAggregate>;
}

@InputType()
export class AdminsListRelationFilter {
    @Field(() => adminsWhereInput, {nullable:true})
    every?: InstanceType<typeof adminsWhereInput>;
    @Field(() => adminsWhereInput, {nullable:true})
    some?: InstanceType<typeof adminsWhereInput>;
    @Field(() => adminsWhereInput, {nullable:true})
    none?: InstanceType<typeof adminsWhereInput>;
}

@ObjectType()
export class AdminsMaxAggregate {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:true})
    adminName?: string;
    @Field(() => String, {nullable:true})
    adminPassword?: string;
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@ObjectType()
export class AdminsMinAggregate {
    @Field(() => String, {nullable:true})
    adminID?: string;
    @Field(() => String, {nullable:true})
    adminName?: string;
    @Field(() => String, {nullable:true})
    adminPassword?: string;
    @Field(() => String, {nullable:true})
    adminRoleID?: string;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
}

@InputType()
export class AdminsRelationFilter {
    @Field(() => adminsWhereInput, {nullable:true})
    is?: InstanceType<typeof adminsWhereInput>;
    @Field(() => adminsWhereInput, {nullable:true})
    isNot?: InstanceType<typeof adminsWhereInput>;
}

@ObjectType()
export class AffectedRows {
    @Field(() => Int, {nullable:false})
    count!: number;
}

@ObjectType()
export class Agent_rebatesAvgAggregate {
    @Field(() => Float, {nullable:true})
    rebate?: number;
}

@ObjectType()
export class Agent_rebatesCountAggregate {
    @Field(() => Int, {nullable:false})
    agentRebateID!: number;
    @Field(() => Int, {nullable:false})
    agentID!: number;
    @Field(() => Int, {nullable:false})
    gameID!: number;
    @Field(() => Int, {nullable:false})
    rebate!: number;
    @Field(() => Int, {nullable:false})
    createdBy!: number;
    @Field(() => Int, {nullable:false})
    fromDate!: number;
    @Field(() => Int, {nullable:false})
    thruDate!: number;
    @Field(() => Int, {nullable:false})
    isActive!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Agent_rebatesGroupBy {
    @Field(() => String, {nullable:false})
    agentRebateID!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => Float, {nullable:false})
    rebate!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    fromDate!: Date | string;
    @Field(() => Date, {nullable:false})
    thruDate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    isActive!: boolean;
    @Field(() => Agent_rebatesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Agent_rebatesCountAggregate>;
    @Field(() => Agent_rebatesAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Agent_rebatesAvgAggregate>;
    @Field(() => Agent_rebatesSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Agent_rebatesSumAggregate>;
    @Field(() => Agent_rebatesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Agent_rebatesMinAggregate>;
    @Field(() => Agent_rebatesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Agent_rebatesMaxAggregate>;
}

@InputType()
export class Agent_rebatesListRelationFilter {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    every?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    some?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    none?: InstanceType<typeof agent_rebatesWhereInput>;
}

@ObjectType()
export class Agent_rebatesMaxAggregate {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:true})
    gameID?: string;
    @Field(() => Float, {nullable:true})
    rebate?: number;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    fromDate?: Date | string;
    @Field(() => Date, {nullable:true})
    thruDate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    isActive?: boolean;
}

@ObjectType()
export class Agent_rebatesMinAggregate {
    @Field(() => String, {nullable:true})
    agentRebateID?: string;
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:true})
    gameID?: string;
    @Field(() => Float, {nullable:true})
    rebate?: number;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    fromDate?: Date | string;
    @Field(() => Date, {nullable:true})
    thruDate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    isActive?: boolean;
}

@ObjectType()
export class Agent_rebatesSumAggregate {
    @Field(() => Float, {nullable:true})
    rebate?: number;
}

@ObjectType()
export class AgentsCountAggregate {
    @Field(() => Int, {nullable:false})
    agentID!: number;
    @Field(() => Int, {nullable:false})
    agentName!: number;
    @Field(() => Int, {nullable:false})
    agentPassword!: number;
    @Field(() => Int, {nullable:false})
    createdBy!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    udate!: number;
    @Field(() => Int, {nullable:false})
    enabled!: number;
    @Field(() => Int, {nullable:false})
    parentAgentID!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class AgentsCount {
    @Field(() => Int, {nullable:false})
    players!: number;
    @Field(() => Int, {nullable:false})
    agentRebates!: number;
    @Field(() => Int, {nullable:false})
    children!: number;
}

@ObjectType()
export class AgentsGroupBy {
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => String, {nullable:false})
    agentName!: string;
    @Field(() => String, {nullable:false})
    agentPassword!: string;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Date, {nullable:false})
    udate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    enabled!: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
    @Field(() => AgentsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof AgentsCountAggregate>;
    @Field(() => AgentsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof AgentsMinAggregate>;
    @Field(() => AgentsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof AgentsMaxAggregate>;
}

@InputType()
export class AgentsListRelationFilter {
    @Field(() => agentsWhereInput, {nullable:true})
    every?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    some?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    none?: InstanceType<typeof agentsWhereInput>;
}

@ObjectType()
export class AgentsMaxAggregate {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:true})
    agentName?: string;
    @Field(() => String, {nullable:true})
    agentPassword?: string;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
}

@ObjectType()
export class AgentsMinAggregate {
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => String, {nullable:true})
    agentName?: string;
    @Field(() => String, {nullable:true})
    agentPassword?: string;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    parentAgentID?: string;
}

@InputType()
export class AgentsNullableRelationFilter {
    @Field(() => agentsWhereInput, {nullable:true})
    is?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    isNot?: InstanceType<typeof agentsWhereInput>;
}

@InputType()
export class AgentsRelationFilter {
    @Field(() => agentsWhereInput, {nullable:true})
    is?: InstanceType<typeof agentsWhereInput>;
    @Field(() => agentsWhereInput, {nullable:true})
    isNot?: InstanceType<typeof agentsWhereInput>;
}

@ObjectType()
export class AggregateAdmin_accesses {
    @Field(() => Admin_accessesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_accessesCountAggregate>;
    @Field(() => Admin_accessesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_accessesMinAggregate>;
    @Field(() => Admin_accessesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_accessesMaxAggregate>;
}

@ObjectType()
export class AggregateAdmin_bank_accounts {
    @Field(() => Admin_bank_accountsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_bank_accountsCountAggregate>;
    @Field(() => Admin_bank_accountsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_bank_accountsMinAggregate>;
    @Field(() => Admin_bank_accountsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_bank_accountsMaxAggregate>;
}

@ObjectType()
export class AggregateAdmin_login_logs {
    @Field(() => Admin_login_logsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_login_logsCountAggregate>;
    @Field(() => Admin_login_logsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_login_logsMinAggregate>;
    @Field(() => Admin_login_logsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_login_logsMaxAggregate>;
}

@ObjectType()
export class AggregateAdmin_role_accesses {
    @Field(() => Admin_role_accessesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_role_accessesCountAggregate>;
    @Field(() => Admin_role_accessesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_role_accessesMinAggregate>;
    @Field(() => Admin_role_accessesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_role_accessesMaxAggregate>;
}

@ObjectType()
export class AggregateAdmin_roles {
    @Field(() => Admin_rolesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Admin_rolesCountAggregate>;
    @Field(() => Admin_rolesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Admin_rolesMinAggregate>;
    @Field(() => Admin_rolesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Admin_rolesMaxAggregate>;
}

@ObjectType()
export class AggregateAdmins {
    @Field(() => AdminsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof AdminsCountAggregate>;
    @Field(() => AdminsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof AdminsMinAggregate>;
    @Field(() => AdminsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof AdminsMaxAggregate>;
}

@ObjectType()
export class AggregateAgent_rebates {
    @Field(() => Agent_rebatesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Agent_rebatesCountAggregate>;
    @Field(() => Agent_rebatesAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Agent_rebatesAvgAggregate>;
    @Field(() => Agent_rebatesSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Agent_rebatesSumAggregate>;
    @Field(() => Agent_rebatesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Agent_rebatesMinAggregate>;
    @Field(() => Agent_rebatesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Agent_rebatesMaxAggregate>;
}

@ObjectType()
export class AggregateAgents {
    @Field(() => AgentsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof AgentsCountAggregate>;
    @Field(() => AgentsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof AgentsMinAggregate>;
    @Field(() => AgentsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof AgentsMaxAggregate>;
}

@ObjectType()
export class AggregateAll_ow_requests {
    @Field(() => All_ow_requestsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof All_ow_requestsCountAggregate>;
    @Field(() => All_ow_requestsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof All_ow_requestsMinAggregate>;
    @Field(() => All_ow_requestsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof All_ow_requestsMaxAggregate>;
}

@ObjectType()
export class AggregateCurrent_active_players {
    @Field(() => Current_active_playersCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Current_active_playersCountAggregate>;
    @Field(() => Current_active_playersMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Current_active_playersMinAggregate>;
    @Field(() => Current_active_playersMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Current_active_playersMaxAggregate>;
}

@ObjectType()
export class AggregateDeposit_transactions {
    @Field(() => Deposit_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Deposit_transactionsCountAggregate>;
    @Field(() => Deposit_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Deposit_transactionsAvgAggregate>;
    @Field(() => Deposit_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Deposit_transactionsSumAggregate>;
    @Field(() => Deposit_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Deposit_transactionsMinAggregate>;
    @Field(() => Deposit_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Deposit_transactionsMaxAggregate>;
}

@ObjectType()
export class AggregateGame_history {
    @Field(() => Game_historyCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Game_historyCountAggregate>;
    @Field(() => Game_historyAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Game_historyAvgAggregate>;
    @Field(() => Game_historySumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Game_historySumAggregate>;
    @Field(() => Game_historyMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Game_historyMinAggregate>;
    @Field(() => Game_historyMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Game_historyMaxAggregate>;
}

@ObjectType()
export class AggregateGame_rebates {
    @Field(() => Game_rebatesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Game_rebatesCountAggregate>;
    @Field(() => Game_rebatesAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Game_rebatesAvgAggregate>;
    @Field(() => Game_rebatesSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Game_rebatesSumAggregate>;
    @Field(() => Game_rebatesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Game_rebatesMinAggregate>;
    @Field(() => Game_rebatesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Game_rebatesMaxAggregate>;
}

@ObjectType()
export class AggregateManual_adjustments {
    @Field(() => Manual_adjustmentsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Manual_adjustmentsCountAggregate>;
    @Field(() => Manual_adjustmentsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Manual_adjustmentsAvgAggregate>;
    @Field(() => Manual_adjustmentsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Manual_adjustmentsSumAggregate>;
    @Field(() => Manual_adjustmentsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Manual_adjustmentsMinAggregate>;
    @Field(() => Manual_adjustmentsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Manual_adjustmentsMaxAggregate>;
}

@ObjectType()
export class AggregatePlayer_login_logs {
    @Field(() => Player_login_logsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Player_login_logsCountAggregate>;
    @Field(() => Player_login_logsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Player_login_logsMinAggregate>;
    @Field(() => Player_login_logsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Player_login_logsMaxAggregate>;
}

@ObjectType()
export class AggregatePlayer_wallets {
    @Field(() => Player_walletsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Player_walletsCountAggregate>;
    @Field(() => Player_walletsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Player_walletsAvgAggregate>;
    @Field(() => Player_walletsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Player_walletsSumAggregate>;
    @Field(() => Player_walletsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Player_walletsMinAggregate>;
    @Field(() => Player_walletsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Player_walletsMaxAggregate>;
}

@ObjectType()
export class AggregatePlayers {
    @Field(() => PlayersCountAggregate, {nullable:true})
    _count?: InstanceType<typeof PlayersCountAggregate>;
    @Field(() => PlayersMinAggregate, {nullable:true})
    _min?: InstanceType<typeof PlayersMinAggregate>;
    @Field(() => PlayersMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof PlayersMaxAggregate>;
}

@ObjectType()
export class AggregateTransfer_in_transactions {
    @Field(() => Transfer_in_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Transfer_in_transactionsCountAggregate>;
    @Field(() => Transfer_in_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Transfer_in_transactionsAvgAggregate>;
    @Field(() => Transfer_in_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Transfer_in_transactionsSumAggregate>;
    @Field(() => Transfer_in_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Transfer_in_transactionsMinAggregate>;
    @Field(() => Transfer_in_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Transfer_in_transactionsMaxAggregate>;
}

@ObjectType()
export class AggregateTransfer_out_transactions {
    @Field(() => Transfer_out_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Transfer_out_transactionsCountAggregate>;
    @Field(() => Transfer_out_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Transfer_out_transactionsAvgAggregate>;
    @Field(() => Transfer_out_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Transfer_out_transactionsSumAggregate>;
    @Field(() => Transfer_out_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Transfer_out_transactionsMinAggregate>;
    @Field(() => Transfer_out_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Transfer_out_transactionsMaxAggregate>;
}

@ObjectType()
export class AggregateWallet_requests {
    @Field(() => Wallet_requestsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Wallet_requestsCountAggregate>;
    @Field(() => Wallet_requestsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Wallet_requestsAvgAggregate>;
    @Field(() => Wallet_requestsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Wallet_requestsSumAggregate>;
    @Field(() => Wallet_requestsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Wallet_requestsMinAggregate>;
    @Field(() => Wallet_requestsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Wallet_requestsMaxAggregate>;
}

@ObjectType()
export class AggregateWithdrawal_transactions {
    @Field(() => Withdrawal_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Withdrawal_transactionsCountAggregate>;
    @Field(() => Withdrawal_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Withdrawal_transactionsAvgAggregate>;
    @Field(() => Withdrawal_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Withdrawal_transactionsSumAggregate>;
    @Field(() => Withdrawal_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Withdrawal_transactionsMinAggregate>;
    @Field(() => Withdrawal_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Withdrawal_transactionsMaxAggregate>;
}

@ArgsType()
export class AggregateadminAccessesArgs {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => [admin_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_accessesOrderByWithRelationInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_bank_accountsOrderByWithRelationInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_login_logsOrderByWithRelationInput>;
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_role_accessesOrderByWithRelationInput>;
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateadminRolesArgs {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => [admin_rolesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_rolesOrderByWithRelationInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_rolesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateagentRebatesArgs {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agent_rebatesOrderByWithRelationInput>;
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof agent_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<all_ow_requestsOrderByWithRelationInput>;
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatecurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => [current_active_playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<current_active_playersOrderByWithRelationInput>;
    @Field(() => current_active_playersWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof current_active_playersWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatedepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<deposit_transactionsOrderByWithRelationInput>;
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregategameHistoryArgs {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => [game_historyOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_historyOrderByWithRelationInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_historyWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregategameRebatesArgs {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => [game_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_rebatesOrderByWithRelationInput>;
    @Field(() => game_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatemanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<manual_adjustmentsOrderByWithRelationInput>;
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => [player_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_login_logsOrderByWithRelationInput>;
    @Field(() => player_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregateplayerWalletsArgs {
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => [player_walletsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_walletsOrderByWithRelationInput>;
    @Field(() => player_walletsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_walletsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatetransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_in_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatetransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_out_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatewalletRequestsArgs {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<wallet_requestsOrderByWithRelationInput>;
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof wallet_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class AggregatewithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<withdrawal_transactionsOrderByWithRelationInput>;
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ObjectType()
export class All_ow_requestsCountAggregate {
    @Field(() => Int, {nullable:false})
    allOwRequestID!: number;
    @Field(() => Int, {nullable:false})
    request!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class All_ow_requestsGroupBy {
    @Field(() => String, {nullable:false})
    allOwRequestID!: string;
    @Field(() => String, {nullable:false})
    request!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => All_ow_requestsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof All_ow_requestsCountAggregate>;
    @Field(() => All_ow_requestsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof All_ow_requestsMinAggregate>;
    @Field(() => All_ow_requestsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof All_ow_requestsMaxAggregate>;
}

@ObjectType()
export class All_ow_requestsMaxAggregate {
    @Field(() => String, {nullable:true})
    allOwRequestID?: string;
    @Field(() => String, {nullable:true})
    request?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@ObjectType()
export class All_ow_requestsMinAggregate {
    @Field(() => String, {nullable:true})
    allOwRequestID?: string;
    @Field(() => String, {nullable:true})
    request?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class BoolFieldUpdateOperationsInput {
    @Field(() => Boolean, {nullable:true})
    set?: boolean;
}

@InputType()
export class BoolFilter {
    @Field(() => Boolean, {nullable:true})
    equals?: boolean;
    @Field(() => NestedBoolFilter, {nullable:true})
    not?: InstanceType<typeof NestedBoolFilter>;
}

@InputType()
export class BoolWithAggregatesFilter {
    @Field(() => Boolean, {nullable:true})
    equals?: boolean;
    @Field(() => NestedBoolWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedBoolWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedBoolFilter, {nullable:true})
    _min?: InstanceType<typeof NestedBoolFilter>;
    @Field(() => NestedBoolFilter, {nullable:true})
    _max?: InstanceType<typeof NestedBoolFilter>;
}

@ArgsType()
export class CreateManyadminAccessesArgs {
    @Field(() => [admin_accessesCreateManyInput], {nullable:false})
    @Type(() => admin_accessesCreateManyInput)
    data!: Array<admin_accessesCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyadminBankAccountsArgs {
    @Field(() => [admin_bank_accountsCreateManyInput], {nullable:false})
    @Type(() => admin_bank_accountsCreateManyInput)
    data!: Array<admin_bank_accountsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyadminLoginLogsArgs {
    @Field(() => [admin_login_logsCreateManyInput], {nullable:false})
    @Type(() => admin_login_logsCreateManyInput)
    data!: Array<admin_login_logsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyadminRoleAccessesArgs {
    @Field(() => [admin_role_accessesCreateManyInput], {nullable:false})
    @Type(() => admin_role_accessesCreateManyInput)
    data!: Array<admin_role_accessesCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyadminRolesArgs {
    @Field(() => [admin_rolesCreateManyInput], {nullable:false})
    @Type(() => admin_rolesCreateManyInput)
    data!: Array<admin_rolesCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyagentRebatesArgs {
    @Field(() => [agent_rebatesCreateManyInput], {nullable:false})
    @Type(() => agent_rebatesCreateManyInput)
    data!: Array<agent_rebatesCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyallOwRequestsArgs {
    @Field(() => [all_ow_requestsCreateManyInput], {nullable:false})
    @Type(() => all_ow_requestsCreateManyInput)
    data!: Array<all_ow_requestsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManycurrentActivePlayersArgs {
    @Field(() => [current_active_playersCreateManyInput], {nullable:false})
    @Type(() => current_active_playersCreateManyInput)
    data!: Array<current_active_playersCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManydepositTransactionsArgs {
    @Field(() => [deposit_transactionsCreateManyInput], {nullable:false})
    @Type(() => deposit_transactionsCreateManyInput)
    data!: Array<deposit_transactionsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManygameHistoryArgs {
    @Field(() => [game_historyCreateManyInput], {nullable:false})
    @Type(() => game_historyCreateManyInput)
    data!: Array<game_historyCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManygameRebatesArgs {
    @Field(() => [game_rebatesCreateManyInput], {nullable:false})
    @Type(() => game_rebatesCreateManyInput)
    data!: Array<game_rebatesCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManymanualAdjustmentsArgs {
    @Field(() => [manual_adjustmentsCreateManyInput], {nullable:false})
    @Type(() => manual_adjustmentsCreateManyInput)
    data!: Array<manual_adjustmentsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyplayerLoginLogsArgs {
    @Field(() => [player_login_logsCreateManyInput], {nullable:false})
    @Type(() => player_login_logsCreateManyInput)
    data!: Array<player_login_logsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManyplayerWalletsArgs {
    @Field(() => [player_walletsCreateManyInput], {nullable:false})
    @Type(() => player_walletsCreateManyInput)
    data!: Array<player_walletsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManytransferInTransactionsArgs {
    @Field(() => [transfer_in_transactionsCreateManyInput], {nullable:false})
    @Type(() => transfer_in_transactionsCreateManyInput)
    data!: Array<transfer_in_transactionsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManytransferOutTransactionsArgs {
    @Field(() => [transfer_out_transactionsCreateManyInput], {nullable:false})
    @Type(() => transfer_out_transactionsCreateManyInput)
    data!: Array<transfer_out_transactionsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManywalletRequestsArgs {
    @Field(() => [wallet_requestsCreateManyInput], {nullable:false})
    @Type(() => wallet_requestsCreateManyInput)
    data!: Array<wallet_requestsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateManywithdrawalTransactionsArgs {
    @Field(() => [withdrawal_transactionsCreateManyInput], {nullable:false})
    @Type(() => withdrawal_transactionsCreateManyInput)
    data!: Array<withdrawal_transactionsCreateManyInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@ArgsType()
export class CreateOneadminAccessesArgs {
    @Field(() => admin_accessesCreateInput, {nullable:false})
    @Type(() => admin_accessesCreateInput)
    data!: InstanceType<typeof admin_accessesCreateInput>;
}

@ArgsType()
export class CreateOneadminBankAccountsArgs {
    @Field(() => admin_bank_accountsCreateInput, {nullable:false})
    @Type(() => admin_bank_accountsCreateInput)
    data!: InstanceType<typeof admin_bank_accountsCreateInput>;
}

@ArgsType()
export class CreateOneadminLoginLogsArgs {
    @Field(() => admin_login_logsCreateInput, {nullable:false})
    @Type(() => admin_login_logsCreateInput)
    data!: InstanceType<typeof admin_login_logsCreateInput>;
}

@ArgsType()
export class CreateOneadminRoleAccessesArgs {
    @Field(() => admin_role_accessesCreateInput, {nullable:false})
    @Type(() => admin_role_accessesCreateInput)
    data!: InstanceType<typeof admin_role_accessesCreateInput>;
}

@ArgsType()
export class CreateOneadminRolesArgs {
    @Field(() => admin_rolesCreateInput, {nullable:false})
    @Type(() => admin_rolesCreateInput)
    data!: InstanceType<typeof admin_rolesCreateInput>;
}

@ArgsType()
export class CreateOneagentRebatesArgs {
    @Field(() => agent_rebatesCreateInput, {nullable:false})
    @Type(() => agent_rebatesCreateInput)
    data!: InstanceType<typeof agent_rebatesCreateInput>;
}

@ArgsType()
export class CreateOneallOwRequestsArgs {
    @Field(() => all_ow_requestsCreateInput, {nullable:false})
    @Type(() => all_ow_requestsCreateInput)
    data!: InstanceType<typeof all_ow_requestsCreateInput>;
}

@ArgsType()
export class CreateOnecurrentActivePlayersArgs {
    @Field(() => current_active_playersCreateInput, {nullable:false})
    @Type(() => current_active_playersCreateInput)
    data!: InstanceType<typeof current_active_playersCreateInput>;
}

@ArgsType()
export class CreateOnedepositTransactionsArgs {
    @Field(() => deposit_transactionsCreateInput, {nullable:false})
    @Type(() => deposit_transactionsCreateInput)
    data!: InstanceType<typeof deposit_transactionsCreateInput>;
}

@ArgsType()
export class CreateOnegameHistoryArgs {
    @Field(() => game_historyCreateInput, {nullable:false})
    @Type(() => game_historyCreateInput)
    data!: InstanceType<typeof game_historyCreateInput>;
}

@ArgsType()
export class CreateOnegameRebatesArgs {
    @Field(() => game_rebatesCreateInput, {nullable:false})
    @Type(() => game_rebatesCreateInput)
    data!: InstanceType<typeof game_rebatesCreateInput>;
}

@ArgsType()
export class CreateOnemanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsCreateInput, {nullable:false})
    @Type(() => manual_adjustmentsCreateInput)
    data!: InstanceType<typeof manual_adjustmentsCreateInput>;
}

@ArgsType()
export class CreateOneplayerLoginLogsArgs {
    @Field(() => player_login_logsCreateInput, {nullable:false})
    @Type(() => player_login_logsCreateInput)
    data!: InstanceType<typeof player_login_logsCreateInput>;
}

@ArgsType()
export class CreateOneplayerWalletsArgs {
    @Field(() => player_walletsCreateInput, {nullable:false})
    @Type(() => player_walletsCreateInput)
    data!: InstanceType<typeof player_walletsCreateInput>;
}

@ArgsType()
export class CreateOnetransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsCreateInput, {nullable:false})
    @Type(() => transfer_in_transactionsCreateInput)
    data!: InstanceType<typeof transfer_in_transactionsCreateInput>;
}

@ArgsType()
export class CreateOnetransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsCreateInput, {nullable:false})
    @Type(() => transfer_out_transactionsCreateInput)
    data!: InstanceType<typeof transfer_out_transactionsCreateInput>;
}

@ArgsType()
export class CreateOnewalletRequestsArgs {
    @Field(() => wallet_requestsCreateInput, {nullable:false})
    @Type(() => wallet_requestsCreateInput)
    data!: InstanceType<typeof wallet_requestsCreateInput>;
}

@ArgsType()
export class CreateOnewithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsCreateInput, {nullable:false})
    @Type(() => withdrawal_transactionsCreateInput)
    data!: InstanceType<typeof withdrawal_transactionsCreateInput>;
}

@ObjectType()
export class Current_active_playersCountAggregate {
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    lastActiveTime!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Current_active_playersGroupBy {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Date, {nullable:false})
    lastActiveTime!: Date | string;
    @Field(() => Current_active_playersCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Current_active_playersCountAggregate>;
    @Field(() => Current_active_playersMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Current_active_playersMinAggregate>;
    @Field(() => Current_active_playersMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Current_active_playersMaxAggregate>;
}

@InputType()
export class Current_active_playersListRelationFilter {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    every?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => current_active_playersWhereInput, {nullable:true})
    some?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => current_active_playersWhereInput, {nullable:true})
    none?: InstanceType<typeof current_active_playersWhereInput>;
}

@ObjectType()
export class Current_active_playersMaxAggregate {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Date, {nullable:true})
    lastActiveTime?: Date | string;
}

@ObjectType()
export class Current_active_playersMinAggregate {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Date, {nullable:true})
    lastActiveTime?: Date | string;
}

@InputType()
export class DateTimeFieldUpdateOperationsInput {
    @Field(() => Date, {nullable:true})
    set?: Date | string;
}

@InputType()
export class DateTimeFilter {
    @Field(() => Date, {nullable:true})
    equals?: Date | string;
    @Field(() => [Date], {nullable:true})
    in?: Array<Date> | Array<string>;
    @Field(() => [Date], {nullable:true})
    notIn?: Array<Date> | Array<string>;
    @Field(() => Date, {nullable:true})
    lt?: Date | string;
    @Field(() => Date, {nullable:true})
    lte?: Date | string;
    @Field(() => Date, {nullable:true})
    gt?: Date | string;
    @Field(() => Date, {nullable:true})
    gte?: Date | string;
    @Field(() => NestedDateTimeFilter, {nullable:true})
    not?: InstanceType<typeof NestedDateTimeFilter>;
}

@InputType()
export class DateTimeWithAggregatesFilter {
    @Field(() => Date, {nullable:true})
    equals?: Date | string;
    @Field(() => [Date], {nullable:true})
    in?: Array<Date> | Array<string>;
    @Field(() => [Date], {nullable:true})
    notIn?: Array<Date> | Array<string>;
    @Field(() => Date, {nullable:true})
    lt?: Date | string;
    @Field(() => Date, {nullable:true})
    lte?: Date | string;
    @Field(() => Date, {nullable:true})
    gt?: Date | string;
    @Field(() => Date, {nullable:true})
    gte?: Date | string;
    @Field(() => NestedDateTimeWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedDateTimeWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedDateTimeFilter, {nullable:true})
    _min?: InstanceType<typeof NestedDateTimeFilter>;
    @Field(() => NestedDateTimeFilter, {nullable:true})
    _max?: InstanceType<typeof NestedDateTimeFilter>;
}

@ArgsType()
export class DeleteManyadminAccessesArgs {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
}

@ArgsType()
export class DeleteManyadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
}

@ArgsType()
export class DeleteManyadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
}

@ArgsType()
export class DeleteManyadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
}

@ArgsType()
export class DeleteManyadminRolesArgs {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
}

@ArgsType()
export class DeleteManyagentRebatesArgs {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
}

@ArgsType()
export class DeleteManyallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
}

@ArgsType()
export class DeleteManycurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
}

@ArgsType()
export class DeleteManydepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
}

@ArgsType()
export class DeleteManygameHistoryArgs {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
}

@ArgsType()
export class DeleteManygameRebatesArgs {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
}

@ArgsType()
export class DeleteManymanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
}

@ArgsType()
export class DeleteManyplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
}

@ArgsType()
export class DeleteManyplayerWalletsArgs {
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
}

@ArgsType()
export class DeleteManytransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
}

@ArgsType()
export class DeleteManytransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
}

@ArgsType()
export class DeleteManywalletRequestsArgs {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
}

@ArgsType()
export class DeleteManywithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
}

@ArgsType()
export class DeleteOneadminAccessesArgs {
    @Field(() => admin_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_accessesWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: InstanceType<typeof admin_login_logsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneadminRolesArgs {
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: InstanceType<typeof admin_rolesWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneagentRebatesArgs {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: InstanceType<typeof agent_rebatesWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:false})
    @Type(() => all_ow_requestsWhereUniqueInput)
    where!: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnecurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: InstanceType<typeof current_active_playersWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnedepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnegameHistoryArgs {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: InstanceType<typeof game_historyWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnegameRebatesArgs {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: InstanceType<typeof game_rebatesWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnemanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: InstanceType<typeof player_login_logsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOneplayerWalletsArgs {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: InstanceType<typeof player_walletsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnetransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnetransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnewalletRequestsArgs {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: InstanceType<typeof wallet_requestsWhereUniqueInput>;
}

@ArgsType()
export class DeleteOnewithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
}

@ObjectType()
export class Deposit_transactionsAvgAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ObjectType()
export class Deposit_transactionsCountAggregate {
    @Field(() => Int, {nullable:false})
    depositTransactionID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    currency!: number;
    @Field(() => Int, {nullable:false})
    requestTime!: number;
    @Field(() => Int, {nullable:false})
    processTime!: number;
    @Field(() => Int, {nullable:false})
    processedBy!: number;
    @Field(() => Int, {nullable:false})
    transactionDate!: number;
    @Field(() => Int, {nullable:false})
    status!: number;
    @Field(() => Int, {nullable:false})
    adminBankAccountID!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Deposit_transactionsGroupBy {
    @Field(() => String, {nullable:false})
    depositTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
    @Field(() => Deposit_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Deposit_transactionsCountAggregate>;
    @Field(() => Deposit_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Deposit_transactionsAvgAggregate>;
    @Field(() => Deposit_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Deposit_transactionsSumAggregate>;
    @Field(() => Deposit_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Deposit_transactionsMinAggregate>;
    @Field(() => Deposit_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Deposit_transactionsMaxAggregate>;
}

@InputType()
export class Deposit_transactionsListRelationFilter {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    every?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    some?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    none?: InstanceType<typeof deposit_transactionsWhereInput>;
}

@ObjectType()
export class Deposit_transactionsMaxAggregate {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
}

@ObjectType()
export class Deposit_transactionsMinAggregate {
    @Field(() => String, {nullable:true})
    depositTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
}

@ObjectType()
export class Deposit_transactionsSumAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@InputType()
export class EnumTransactionTypeFieldUpdateOperationsInput {
    @Field(() => TransactionType, {nullable:true})
    set?: keyof typeof TransactionType;
}

@InputType()
export class EnumTransactionTypeFilter {
    @Field(() => TransactionType, {nullable:true})
    equals?: keyof typeof TransactionType;
    @Field(() => [TransactionType], {nullable:true})
    in?: Array<keyof typeof TransactionType>;
    @Field(() => [TransactionType], {nullable:true})
    notIn?: Array<keyof typeof TransactionType>;
    @Field(() => NestedEnumTransactionTypeFilter, {nullable:true})
    not?: InstanceType<typeof NestedEnumTransactionTypeFilter>;
}

@InputType()
export class EnumTransactionTypeWithAggregatesFilter {
    @Field(() => TransactionType, {nullable:true})
    equals?: keyof typeof TransactionType;
    @Field(() => [TransactionType], {nullable:true})
    in?: Array<keyof typeof TransactionType>;
    @Field(() => [TransactionType], {nullable:true})
    notIn?: Array<keyof typeof TransactionType>;
    @Field(() => NestedEnumTransactionTypeWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedEnumTransactionTypeWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedEnumTransactionTypeFilter, {nullable:true})
    _min?: InstanceType<typeof NestedEnumTransactionTypeFilter>;
    @Field(() => NestedEnumTransactionTypeFilter, {nullable:true})
    _max?: InstanceType<typeof NestedEnumTransactionTypeFilter>;
}

@ArgsType()
export class FindFirstadminAccessesOrThrowArgs {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => [admin_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_accessesOrderByWithRelationInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_accessesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_accessesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminAccessesArgs {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => [admin_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_accessesOrderByWithRelationInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_accessesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_accessesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminBankAccountsOrThrowArgs {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_bank_accountsOrderByWithRelationInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_bank_accountsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_bank_accountsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_bank_accountsOrderByWithRelationInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_bank_accountsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_bank_accountsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminLoginLogsOrThrowArgs {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_login_logsOrderByWithRelationInput>;
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_login_logsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_login_logsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_login_logsOrderByWithRelationInput>;
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_login_logsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_login_logsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminRoleAccessesOrThrowArgs {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_role_accessesOrderByWithRelationInput>;
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_role_accessesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_role_accessesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_role_accessesOrderByWithRelationInput>;
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_role_accessesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_role_accessesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminRolesOrThrowArgs {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => [admin_rolesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_rolesOrderByWithRelationInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_rolesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_rolesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_rolesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstadminRolesArgs {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => [admin_rolesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_rolesOrderByWithRelationInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_rolesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_rolesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_rolesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstagentRebatesOrThrowArgs {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agent_rebatesOrderByWithRelationInput>;
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof agent_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Agent_rebatesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Agent_rebatesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstagentRebatesArgs {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agent_rebatesOrderByWithRelationInput>;
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof agent_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Agent_rebatesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Agent_rebatesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstallOwRequestsOrThrowArgs {
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<all_ow_requestsOrderByWithRelationInput>;
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [All_ow_requestsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof All_ow_requestsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<all_ow_requestsOrderByWithRelationInput>;
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [All_ow_requestsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof All_ow_requestsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstcurrentActivePlayersOrThrowArgs {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => [current_active_playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<current_active_playersOrderByWithRelationInput>;
    @Field(() => current_active_playersWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof current_active_playersWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Current_active_playersScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Current_active_playersScalarFieldEnum>;
}

@ArgsType()
export class FindFirstcurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => [current_active_playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<current_active_playersOrderByWithRelationInput>;
    @Field(() => current_active_playersWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof current_active_playersWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Current_active_playersScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Current_active_playersScalarFieldEnum>;
}

@ArgsType()
export class FindFirstdepositTransactionsOrThrowArgs {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<deposit_transactionsOrderByWithRelationInput>;
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Deposit_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Deposit_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstdepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<deposit_transactionsOrderByWithRelationInput>;
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Deposit_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Deposit_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstgameHistoryOrThrowArgs {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => [game_historyOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_historyOrderByWithRelationInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_historyWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Game_historyScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Game_historyScalarFieldEnum>;
}

@ArgsType()
export class FindFirstgameHistoryArgs {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => [game_historyOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_historyOrderByWithRelationInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_historyWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Game_historyScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Game_historyScalarFieldEnum>;
}

@ArgsType()
export class FindFirstgameRebatesOrThrowArgs {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => [game_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_rebatesOrderByWithRelationInput>;
    @Field(() => game_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Game_rebatesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Game_rebatesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstgameRebatesArgs {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => [game_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_rebatesOrderByWithRelationInput>;
    @Field(() => game_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Game_rebatesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Game_rebatesScalarFieldEnum>;
}

@ArgsType()
export class FindFirstmanualAdjustmentsOrThrowArgs {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<manual_adjustmentsOrderByWithRelationInput>;
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Manual_adjustmentsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Manual_adjustmentsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstmanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<manual_adjustmentsOrderByWithRelationInput>;
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Manual_adjustmentsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Manual_adjustmentsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstplayerLoginLogsOrThrowArgs {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => [player_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_login_logsOrderByWithRelationInput>;
    @Field(() => player_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Player_login_logsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Player_login_logsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => [player_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_login_logsOrderByWithRelationInput>;
    @Field(() => player_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Player_login_logsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Player_login_logsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstplayerWalletsOrThrowArgs {
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => [player_walletsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_walletsOrderByWithRelationInput>;
    @Field(() => player_walletsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_walletsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Player_walletsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Player_walletsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstplayerWalletsArgs {
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => [player_walletsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_walletsOrderByWithRelationInput>;
    @Field(() => player_walletsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_walletsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Player_walletsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Player_walletsScalarFieldEnum>;
}

@ArgsType()
export class FindFirsttransferInTransactionsOrThrowArgs {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_in_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Transfer_in_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Transfer_in_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirsttransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_in_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Transfer_in_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Transfer_in_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirsttransferOutTransactionsOrThrowArgs {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_out_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Transfer_out_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Transfer_out_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirsttransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_out_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Transfer_out_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Transfer_out_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstwalletRequestsOrThrowArgs {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<wallet_requestsOrderByWithRelationInput>;
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof wallet_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Wallet_requestsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Wallet_requestsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstwalletRequestsArgs {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<wallet_requestsOrderByWithRelationInput>;
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof wallet_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Wallet_requestsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Wallet_requestsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstwithdrawalTransactionsOrThrowArgs {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<withdrawal_transactionsOrderByWithRelationInput>;
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Withdrawal_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Withdrawal_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindFirstwithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<withdrawal_transactionsOrderByWithRelationInput>;
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Withdrawal_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Withdrawal_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindManyadminAccessesArgs {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => [admin_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_accessesOrderByWithRelationInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_accessesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_accessesScalarFieldEnum>;
}

@ArgsType()
export class FindManyadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_bank_accountsOrderByWithRelationInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_bank_accountsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_bank_accountsScalarFieldEnum>;
}

@ArgsType()
export class FindManyadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_login_logsOrderByWithRelationInput>;
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_login_logsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_login_logsScalarFieldEnum>;
}

@ArgsType()
export class FindManyadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_role_accessesOrderByWithRelationInput>;
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_role_accessesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_role_accessesScalarFieldEnum>;
}

@ArgsType()
export class FindManyadminRolesArgs {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => [admin_rolesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<admin_rolesOrderByWithRelationInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof admin_rolesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Admin_rolesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Admin_rolesScalarFieldEnum>;
}

@ArgsType()
export class FindManyagentRebatesArgs {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<agent_rebatesOrderByWithRelationInput>;
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof agent_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Agent_rebatesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Agent_rebatesScalarFieldEnum>;
}

@ArgsType()
export class FindManyallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<all_ow_requestsOrderByWithRelationInput>;
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [All_ow_requestsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof All_ow_requestsScalarFieldEnum>;
}

@ArgsType()
export class FindManycurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => [current_active_playersOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<current_active_playersOrderByWithRelationInput>;
    @Field(() => current_active_playersWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof current_active_playersWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Current_active_playersScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Current_active_playersScalarFieldEnum>;
}

@ArgsType()
export class FindManydepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<deposit_transactionsOrderByWithRelationInput>;
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Deposit_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Deposit_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindManygameHistoryArgs {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => [game_historyOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_historyOrderByWithRelationInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_historyWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Game_historyScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Game_historyScalarFieldEnum>;
}

@ArgsType()
export class FindManygameRebatesArgs {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => [game_rebatesOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<game_rebatesOrderByWithRelationInput>;
    @Field(() => game_rebatesWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof game_rebatesWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Game_rebatesScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Game_rebatesScalarFieldEnum>;
}

@ArgsType()
export class FindManymanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<manual_adjustmentsOrderByWithRelationInput>;
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Manual_adjustmentsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Manual_adjustmentsScalarFieldEnum>;
}

@ArgsType()
export class FindManyplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => [player_login_logsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_login_logsOrderByWithRelationInput>;
    @Field(() => player_login_logsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_login_logsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Player_login_logsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Player_login_logsScalarFieldEnum>;
}

@ArgsType()
export class FindManyplayerWalletsArgs {
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => [player_walletsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<player_walletsOrderByWithRelationInput>;
    @Field(() => player_walletsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof player_walletsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Player_walletsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Player_walletsScalarFieldEnum>;
}

@ArgsType()
export class FindManytransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_in_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Transfer_in_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Transfer_in_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindManytransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<transfer_out_transactionsOrderByWithRelationInput>;
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Transfer_out_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Transfer_out_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindManywalletRequestsArgs {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<wallet_requestsOrderByWithRelationInput>;
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof wallet_requestsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Wallet_requestsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Wallet_requestsScalarFieldEnum>;
}

@ArgsType()
export class FindManywithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsOrderByWithRelationInput], {nullable:true})
    orderBy?: Array<withdrawal_transactionsOrderByWithRelationInput>;
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:true})
    cursor?: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
    @Field(() => [Withdrawal_transactionsScalarFieldEnum], {nullable:true})
    distinct?: Array<keyof typeof Withdrawal_transactionsScalarFieldEnum>;
}

@ArgsType()
export class FindUniqueadminAccessesOrThrowArgs {
    @Field(() => admin_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_accessesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminAccessesArgs {
    @Field(() => admin_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_accessesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminBankAccountsOrThrowArgs {
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminLoginLogsOrThrowArgs {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: InstanceType<typeof admin_login_logsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: InstanceType<typeof admin_login_logsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminRoleAccessesOrThrowArgs {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminRolesOrThrowArgs {
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: InstanceType<typeof admin_rolesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueadminRolesArgs {
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: InstanceType<typeof admin_rolesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueagentRebatesOrThrowArgs {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: InstanceType<typeof agent_rebatesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueagentRebatesArgs {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: InstanceType<typeof agent_rebatesWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueallOwRequestsOrThrowArgs {
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:false})
    @Type(() => all_ow_requestsWhereUniqueInput)
    where!: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:false})
    @Type(() => all_ow_requestsWhereUniqueInput)
    where!: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquecurrentActivePlayersOrThrowArgs {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: InstanceType<typeof current_active_playersWhereUniqueInput>;
}

@ArgsType()
export class FindUniquecurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: InstanceType<typeof current_active_playersWhereUniqueInput>;
}

@ArgsType()
export class FindUniquedepositTransactionsOrThrowArgs {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquedepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquegameHistoryOrThrowArgs {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: InstanceType<typeof game_historyWhereUniqueInput>;
}

@ArgsType()
export class FindUniquegameHistoryArgs {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: InstanceType<typeof game_historyWhereUniqueInput>;
}

@ArgsType()
export class FindUniquegameRebatesOrThrowArgs {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: InstanceType<typeof game_rebatesWhereUniqueInput>;
}

@ArgsType()
export class FindUniquegameRebatesArgs {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: InstanceType<typeof game_rebatesWhereUniqueInput>;
}

@ArgsType()
export class FindUniquemanualAdjustmentsOrThrowArgs {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquemanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueplayerLoginLogsOrThrowArgs {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: InstanceType<typeof player_login_logsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: InstanceType<typeof player_login_logsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueplayerWalletsOrThrowArgs {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: InstanceType<typeof player_walletsWhereUniqueInput>;
}

@ArgsType()
export class FindUniqueplayerWalletsArgs {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: InstanceType<typeof player_walletsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquetransferInTransactionsOrThrowArgs {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquetransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquetransferOutTransactionsOrThrowArgs {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquetransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquewalletRequestsOrThrowArgs {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: InstanceType<typeof wallet_requestsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquewalletRequestsArgs {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: InstanceType<typeof wallet_requestsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquewithdrawalTransactionsOrThrowArgs {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
}

@ArgsType()
export class FindUniquewithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
}

@InputType()
export class FloatFieldUpdateOperationsInput {
    @Field(() => Float, {nullable:true})
    set?: number;
    @Field(() => Float, {nullable:true})
    increment?: number;
    @Field(() => Float, {nullable:true})
    decrement?: number;
    @Field(() => Float, {nullable:true})
    multiply?: number;
    @Field(() => Float, {nullable:true})
    divide?: number;
}

@InputType()
export class FloatFilter {
    @Field(() => Float, {nullable:true})
    equals?: number;
    @Field(() => [Float], {nullable:true})
    in?: Array<number>;
    @Field(() => [Float], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Float, {nullable:true})
    lt?: number;
    @Field(() => Float, {nullable:true})
    lte?: number;
    @Field(() => Float, {nullable:true})
    gt?: number;
    @Field(() => Float, {nullable:true})
    gte?: number;
    @Field(() => NestedFloatFilter, {nullable:true})
    not?: InstanceType<typeof NestedFloatFilter>;
}

@InputType()
export class FloatWithAggregatesFilter {
    @Field(() => Float, {nullable:true})
    equals?: number;
    @Field(() => [Float], {nullable:true})
    in?: Array<number>;
    @Field(() => [Float], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Float, {nullable:true})
    lt?: number;
    @Field(() => Float, {nullable:true})
    lte?: number;
    @Field(() => Float, {nullable:true})
    gt?: number;
    @Field(() => Float, {nullable:true})
    gte?: number;
    @Field(() => NestedFloatWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedFloatWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _avg?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _sum?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _min?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _max?: InstanceType<typeof NestedFloatFilter>;
}

@ObjectType()
export class Game_historyAvgAggregate {
    @Field(() => Float, {nullable:true})
    betAmount?: number;
    @Field(() => Float, {nullable:true})
    winAmount?: number;
}

@ObjectType()
export class Game_historyCountAggregate {
    @Field(() => Int, {nullable:false})
    gameHistoryID!: number;
    @Field(() => Int, {nullable:false})
    gameID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    iGamedesc!: number;
    @Field(() => Int, {nullable:false})
    betAmount!: number;
    @Field(() => Int, {nullable:false})
    winAmount!: number;
    @Field(() => Int, {nullable:false})
    transactionDate!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Game_historyCount {
    @Field(() => Int, {nullable:false})
    gameRebates!: number;
}

@ObjectType()
export class Game_historyGroupBy {
    @Field(() => String, {nullable:false})
    gameHistoryID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => Float, {nullable:false})
    betAmount!: number;
    @Field(() => Float, {nullable:false})
    winAmount!: number;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Game_historyCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Game_historyCountAggregate>;
    @Field(() => Game_historyAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Game_historyAvgAggregate>;
    @Field(() => Game_historySumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Game_historySumAggregate>;
    @Field(() => Game_historyMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Game_historyMinAggregate>;
    @Field(() => Game_historyMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Game_historyMaxAggregate>;
}

@InputType()
export class Game_historyListRelationFilter {
    @Field(() => game_historyWhereInput, {nullable:true})
    every?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => game_historyWhereInput, {nullable:true})
    some?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => game_historyWhereInput, {nullable:true})
    none?: InstanceType<typeof game_historyWhereInput>;
}

@ObjectType()
export class Game_historyMaxAggregate {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:true})
    gameID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    iGamedesc?: string;
    @Field(() => Float, {nullable:true})
    betAmount?: number;
    @Field(() => Float, {nullable:true})
    winAmount?: number;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@ObjectType()
export class Game_historyMinAggregate {
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:true})
    gameID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    iGamedesc?: string;
    @Field(() => Float, {nullable:true})
    betAmount?: number;
    @Field(() => Float, {nullable:true})
    winAmount?: number;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@InputType()
export class Game_historyRelationFilter {
    @Field(() => game_historyWhereInput, {nullable:true})
    is?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => game_historyWhereInput, {nullable:true})
    isNot?: InstanceType<typeof game_historyWhereInput>;
}

@ObjectType()
export class Game_historySumAggregate {
    @Field(() => Float, {nullable:true})
    betAmount?: number;
    @Field(() => Float, {nullable:true})
    winAmount?: number;
}

@ObjectType()
export class Game_rebatesAvgAggregate {
    @Field(() => Float, {nullable:true})
    effectiveBetAmount?: number;
    @Field(() => Float, {nullable:true})
    rebateAmount?: number;
}

@ObjectType()
export class Game_rebatesCountAggregate {
    @Field(() => Int, {nullable:false})
    game_rebatesID!: number;
    @Field(() => Int, {nullable:false})
    gameHistoryID!: number;
    @Field(() => Int, {nullable:false})
    merchantID!: number;
    @Field(() => Int, {nullable:false})
    gameID!: number;
    @Field(() => Int, {nullable:false})
    category!: number;
    @Field(() => Int, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Int, {nullable:false})
    rebateAmount!: number;
    @Field(() => Int, {nullable:false})
    status!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Game_rebatesGroupBy {
    @Field(() => String, {nullable:false})
    game_rebatesID!: string;
    @Field(() => String, {nullable:false})
    gameHistoryID!: string;
    @Field(() => String, {nullable:false})
    merchantID!: string;
    @Field(() => String, {nullable:false})
    gameID!: string;
    @Field(() => String, {nullable:false})
    category!: string;
    @Field(() => Float, {nullable:false})
    effectiveBetAmount!: number;
    @Field(() => Float, {nullable:false})
    rebateAmount!: number;
    @Field(() => String, {nullable:false})
    status!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Game_rebatesCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Game_rebatesCountAggregate>;
    @Field(() => Game_rebatesAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Game_rebatesAvgAggregate>;
    @Field(() => Game_rebatesSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Game_rebatesSumAggregate>;
    @Field(() => Game_rebatesMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Game_rebatesMinAggregate>;
    @Field(() => Game_rebatesMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Game_rebatesMaxAggregate>;
}

@InputType()
export class Game_rebatesListRelationFilter {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    every?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => game_rebatesWhereInput, {nullable:true})
    some?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => game_rebatesWhereInput, {nullable:true})
    none?: InstanceType<typeof game_rebatesWhereInput>;
}

@ObjectType()
export class Game_rebatesMaxAggregate {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:true})
    merchantID?: string;
    @Field(() => String, {nullable:true})
    gameID?: string;
    @Field(() => String, {nullable:true})
    category?: string;
    @Field(() => Float, {nullable:true})
    effectiveBetAmount?: number;
    @Field(() => Float, {nullable:true})
    rebateAmount?: number;
    @Field(() => String, {nullable:true})
    status?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@ObjectType()
export class Game_rebatesMinAggregate {
    @Field(() => String, {nullable:true})
    game_rebatesID?: string;
    @Field(() => String, {nullable:true})
    gameHistoryID?: string;
    @Field(() => String, {nullable:true})
    merchantID?: string;
    @Field(() => String, {nullable:true})
    gameID?: string;
    @Field(() => String, {nullable:true})
    category?: string;
    @Field(() => Float, {nullable:true})
    effectiveBetAmount?: number;
    @Field(() => Float, {nullable:true})
    rebateAmount?: number;
    @Field(() => String, {nullable:true})
    status?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@ObjectType()
export class Game_rebatesSumAggregate {
    @Field(() => Float, {nullable:true})
    effectiveBetAmount?: number;
    @Field(() => Float, {nullable:true})
    rebateAmount?: number;
}

@ArgsType()
export class GroupByadminAccessesArgs {
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
    @Field(() => [admin_accessesOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<admin_accessesOrderByWithAggregationInput>;
    @Field(() => [Admin_accessesScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Admin_accessesScalarFieldEnum>;
    @Field(() => admin_accessesScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof admin_accessesScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
    @Field(() => [admin_bank_accountsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<admin_bank_accountsOrderByWithAggregationInput>;
    @Field(() => [Admin_bank_accountsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Admin_bank_accountsScalarFieldEnum>;
    @Field(() => admin_bank_accountsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof admin_bank_accountsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
    @Field(() => [admin_login_logsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<admin_login_logsOrderByWithAggregationInput>;
    @Field(() => [Admin_login_logsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Admin_login_logsScalarFieldEnum>;
    @Field(() => admin_login_logsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof admin_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
    @Field(() => [admin_role_accessesOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<admin_role_accessesOrderByWithAggregationInput>;
    @Field(() => [Admin_role_accessesScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Admin_role_accessesScalarFieldEnum>;
    @Field(() => admin_role_accessesScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof admin_role_accessesScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByadminRolesArgs {
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
    @Field(() => [admin_rolesOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<admin_rolesOrderByWithAggregationInput>;
    @Field(() => [Admin_rolesScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Admin_rolesScalarFieldEnum>;
    @Field(() => admin_rolesScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof admin_rolesScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByagentRebatesArgs {
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
    @Field(() => [agent_rebatesOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<agent_rebatesOrderByWithAggregationInput>;
    @Field(() => [Agent_rebatesScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Agent_rebatesScalarFieldEnum>;
    @Field(() => agent_rebatesScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof agent_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
    @Field(() => [all_ow_requestsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<all_ow_requestsOrderByWithAggregationInput>;
    @Field(() => [All_ow_requestsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof All_ow_requestsScalarFieldEnum>;
    @Field(() => all_ow_requestsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof all_ow_requestsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBycurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
    @Field(() => [current_active_playersOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<current_active_playersOrderByWithAggregationInput>;
    @Field(() => [Current_active_playersScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Current_active_playersScalarFieldEnum>;
    @Field(() => current_active_playersScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof current_active_playersScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBydepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
    @Field(() => [deposit_transactionsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<deposit_transactionsOrderByWithAggregationInput>;
    @Field(() => [Deposit_transactionsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Deposit_transactionsScalarFieldEnum>;
    @Field(() => deposit_transactionsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof deposit_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBygameHistoryArgs {
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
    @Field(() => [game_historyOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<game_historyOrderByWithAggregationInput>;
    @Field(() => [Game_historyScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Game_historyScalarFieldEnum>;
    @Field(() => game_historyScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof game_historyScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBygameRebatesArgs {
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
    @Field(() => [game_rebatesOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<game_rebatesOrderByWithAggregationInput>;
    @Field(() => [Game_rebatesScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Game_rebatesScalarFieldEnum>;
    @Field(() => game_rebatesScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof game_rebatesScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBymanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => [manual_adjustmentsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<manual_adjustmentsOrderByWithAggregationInput>;
    @Field(() => [Manual_adjustmentsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Manual_adjustmentsScalarFieldEnum>;
    @Field(() => manual_adjustmentsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof manual_adjustmentsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => [player_login_logsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<player_login_logsOrderByWithAggregationInput>;
    @Field(() => [Player_login_logsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Player_login_logsScalarFieldEnum>;
    @Field(() => player_login_logsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof player_login_logsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupByplayerWalletsArgs {
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => [player_walletsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<player_walletsOrderByWithAggregationInput>;
    @Field(() => [Player_walletsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Player_walletsScalarFieldEnum>;
    @Field(() => player_walletsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof player_walletsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBytransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<transfer_in_transactionsOrderByWithAggregationInput>;
    @Field(() => [Transfer_in_transactionsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Transfer_in_transactionsScalarFieldEnum>;
    @Field(() => transfer_in_transactionsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof transfer_in_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBytransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<transfer_out_transactionsOrderByWithAggregationInput>;
    @Field(() => [Transfer_out_transactionsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Transfer_out_transactionsScalarFieldEnum>;
    @Field(() => transfer_out_transactionsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof transfer_out_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBywalletRequestsArgs {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<wallet_requestsOrderByWithAggregationInput>;
    @Field(() => [Wallet_requestsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Wallet_requestsScalarFieldEnum>;
    @Field(() => wallet_requestsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof wallet_requestsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@ArgsType()
export class GroupBywithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsOrderByWithAggregationInput], {nullable:true})
    orderBy?: Array<withdrawal_transactionsOrderByWithAggregationInput>;
    @Field(() => [Withdrawal_transactionsScalarFieldEnum], {nullable:false})
    by!: Array<keyof typeof Withdrawal_transactionsScalarFieldEnum>;
    @Field(() => withdrawal_transactionsScalarWhereWithAggregatesInput, {nullable:true})
    having?: InstanceType<typeof withdrawal_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => Int, {nullable:true})
    take?: number;
    @Field(() => Int, {nullable:true})
    skip?: number;
}

@InputType()
export class IntFieldUpdateOperationsInput {
    @Field(() => Int, {nullable:true})
    set?: number;
    @Field(() => Int, {nullable:true})
    increment?: number;
    @Field(() => Int, {nullable:true})
    decrement?: number;
    @Field(() => Int, {nullable:true})
    multiply?: number;
    @Field(() => Int, {nullable:true})
    divide?: number;
}

@InputType()
export class IntFilter {
    @Field(() => Int, {nullable:true})
    equals?: number;
    @Field(() => [Int], {nullable:true})
    in?: Array<number>;
    @Field(() => [Int], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Int, {nullable:true})
    lt?: number;
    @Field(() => Int, {nullable:true})
    lte?: number;
    @Field(() => Int, {nullable:true})
    gt?: number;
    @Field(() => Int, {nullable:true})
    gte?: number;
    @Field(() => NestedIntFilter, {nullable:true})
    not?: InstanceType<typeof NestedIntFilter>;
}

@InputType()
export class IntWithAggregatesFilter {
    @Field(() => Int, {nullable:true})
    equals?: number;
    @Field(() => [Int], {nullable:true})
    in?: Array<number>;
    @Field(() => [Int], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Int, {nullable:true})
    lt?: number;
    @Field(() => Int, {nullable:true})
    lte?: number;
    @Field(() => Int, {nullable:true})
    gt?: number;
    @Field(() => Int, {nullable:true})
    gte?: number;
    @Field(() => NestedIntWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedIntWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _avg?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _sum?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _min?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _max?: InstanceType<typeof NestedIntFilter>;
}

@ObjectType()
export class Manual_adjustmentsAvgAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ObjectType()
export class Manual_adjustmentsCountAggregate {
    @Field(() => Int, {nullable:false})
    manualAdjustmentID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    reason!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    createdBy!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Manual_adjustmentsGroupBy {
    @Field(() => String, {nullable:false})
    manualAdjustmentID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    reason!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    createdBy!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Manual_adjustmentsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Manual_adjustmentsCountAggregate>;
    @Field(() => Manual_adjustmentsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Manual_adjustmentsAvgAggregate>;
    @Field(() => Manual_adjustmentsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Manual_adjustmentsSumAggregate>;
    @Field(() => Manual_adjustmentsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Manual_adjustmentsMinAggregate>;
    @Field(() => Manual_adjustmentsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Manual_adjustmentsMaxAggregate>;
}

@InputType()
export class Manual_adjustmentsListRelationFilter {
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    every?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    some?: InstanceType<typeof manual_adjustmentsWhereInput>;
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    none?: InstanceType<typeof manual_adjustmentsWhereInput>;
}

@ObjectType()
export class Manual_adjustmentsMaxAggregate {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    reason?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@ObjectType()
export class Manual_adjustmentsMinAggregate {
    @Field(() => String, {nullable:true})
    manualAdjustmentID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    reason?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    createdBy?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
}

@ObjectType()
export class Manual_adjustmentsSumAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@InputType()
export class NestedBoolFilter {
    @Field(() => Boolean, {nullable:true})
    equals?: boolean;
    @Field(() => NestedBoolFilter, {nullable:true})
    not?: InstanceType<typeof NestedBoolFilter>;
}

@InputType()
export class NestedBoolWithAggregatesFilter {
    @Field(() => Boolean, {nullable:true})
    equals?: boolean;
    @Field(() => NestedBoolWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedBoolWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedBoolFilter, {nullable:true})
    _min?: InstanceType<typeof NestedBoolFilter>;
    @Field(() => NestedBoolFilter, {nullable:true})
    _max?: InstanceType<typeof NestedBoolFilter>;
}

@InputType()
export class NestedDateTimeFilter {
    @Field(() => Date, {nullable:true})
    equals?: Date | string;
    @Field(() => [Date], {nullable:true})
    in?: Array<Date> | Array<string>;
    @Field(() => [Date], {nullable:true})
    notIn?: Array<Date> | Array<string>;
    @Field(() => Date, {nullable:true})
    lt?: Date | string;
    @Field(() => Date, {nullable:true})
    lte?: Date | string;
    @Field(() => Date, {nullable:true})
    gt?: Date | string;
    @Field(() => Date, {nullable:true})
    gte?: Date | string;
    @Field(() => NestedDateTimeFilter, {nullable:true})
    not?: InstanceType<typeof NestedDateTimeFilter>;
}

@InputType()
export class NestedDateTimeWithAggregatesFilter {
    @Field(() => Date, {nullable:true})
    equals?: Date | string;
    @Field(() => [Date], {nullable:true})
    in?: Array<Date> | Array<string>;
    @Field(() => [Date], {nullable:true})
    notIn?: Array<Date> | Array<string>;
    @Field(() => Date, {nullable:true})
    lt?: Date | string;
    @Field(() => Date, {nullable:true})
    lte?: Date | string;
    @Field(() => Date, {nullable:true})
    gt?: Date | string;
    @Field(() => Date, {nullable:true})
    gte?: Date | string;
    @Field(() => NestedDateTimeWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedDateTimeWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedDateTimeFilter, {nullable:true})
    _min?: InstanceType<typeof NestedDateTimeFilter>;
    @Field(() => NestedDateTimeFilter, {nullable:true})
    _max?: InstanceType<typeof NestedDateTimeFilter>;
}

@InputType()
export class NestedEnumTransactionTypeFilter {
    @Field(() => TransactionType, {nullable:true})
    equals?: keyof typeof TransactionType;
    @Field(() => [TransactionType], {nullable:true})
    in?: Array<keyof typeof TransactionType>;
    @Field(() => [TransactionType], {nullable:true})
    notIn?: Array<keyof typeof TransactionType>;
    @Field(() => NestedEnumTransactionTypeFilter, {nullable:true})
    not?: InstanceType<typeof NestedEnumTransactionTypeFilter>;
}

@InputType()
export class NestedEnumTransactionTypeWithAggregatesFilter {
    @Field(() => TransactionType, {nullable:true})
    equals?: keyof typeof TransactionType;
    @Field(() => [TransactionType], {nullable:true})
    in?: Array<keyof typeof TransactionType>;
    @Field(() => [TransactionType], {nullable:true})
    notIn?: Array<keyof typeof TransactionType>;
    @Field(() => NestedEnumTransactionTypeWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedEnumTransactionTypeWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedEnumTransactionTypeFilter, {nullable:true})
    _min?: InstanceType<typeof NestedEnumTransactionTypeFilter>;
    @Field(() => NestedEnumTransactionTypeFilter, {nullable:true})
    _max?: InstanceType<typeof NestedEnumTransactionTypeFilter>;
}

@InputType()
export class NestedFloatFilter {
    @Field(() => Float, {nullable:true})
    equals?: number;
    @Field(() => [Float], {nullable:true})
    in?: Array<number>;
    @Field(() => [Float], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Float, {nullable:true})
    lt?: number;
    @Field(() => Float, {nullable:true})
    lte?: number;
    @Field(() => Float, {nullable:true})
    gt?: number;
    @Field(() => Float, {nullable:true})
    gte?: number;
    @Field(() => NestedFloatFilter, {nullable:true})
    not?: InstanceType<typeof NestedFloatFilter>;
}

@InputType()
export class NestedFloatWithAggregatesFilter {
    @Field(() => Float, {nullable:true})
    equals?: number;
    @Field(() => [Float], {nullable:true})
    in?: Array<number>;
    @Field(() => [Float], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Float, {nullable:true})
    lt?: number;
    @Field(() => Float, {nullable:true})
    lte?: number;
    @Field(() => Float, {nullable:true})
    gt?: number;
    @Field(() => Float, {nullable:true})
    gte?: number;
    @Field(() => NestedFloatWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedFloatWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _avg?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _sum?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _min?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _max?: InstanceType<typeof NestedFloatFilter>;
}

@InputType()
export class NestedIntFilter {
    @Field(() => Int, {nullable:true})
    equals?: number;
    @Field(() => [Int], {nullable:true})
    in?: Array<number>;
    @Field(() => [Int], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Int, {nullable:true})
    lt?: number;
    @Field(() => Int, {nullable:true})
    lte?: number;
    @Field(() => Int, {nullable:true})
    gt?: number;
    @Field(() => Int, {nullable:true})
    gte?: number;
    @Field(() => NestedIntFilter, {nullable:true})
    not?: InstanceType<typeof NestedIntFilter>;
}

@InputType()
export class NestedIntNullableFilter {
    @Field(() => Int, {nullable:true})
    equals?: number;
    @Field(() => [Int], {nullable:true})
    in?: Array<number>;
    @Field(() => [Int], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Int, {nullable:true})
    lt?: number;
    @Field(() => Int, {nullable:true})
    lte?: number;
    @Field(() => Int, {nullable:true})
    gt?: number;
    @Field(() => Int, {nullable:true})
    gte?: number;
    @Field(() => NestedIntNullableFilter, {nullable:true})
    not?: InstanceType<typeof NestedIntNullableFilter>;
}

@InputType()
export class NestedIntWithAggregatesFilter {
    @Field(() => Int, {nullable:true})
    equals?: number;
    @Field(() => [Int], {nullable:true})
    in?: Array<number>;
    @Field(() => [Int], {nullable:true})
    notIn?: Array<number>;
    @Field(() => Int, {nullable:true})
    lt?: number;
    @Field(() => Int, {nullable:true})
    lte?: number;
    @Field(() => Int, {nullable:true})
    gt?: number;
    @Field(() => Int, {nullable:true})
    gte?: number;
    @Field(() => NestedIntWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedIntWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedFloatFilter, {nullable:true})
    _avg?: InstanceType<typeof NestedFloatFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _sum?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _min?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _max?: InstanceType<typeof NestedIntFilter>;
}

@InputType()
export class NestedStringFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => NestedStringFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringFilter>;
}

@InputType()
export class NestedStringNullableFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => NestedStringNullableFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringNullableFilter>;
}

@InputType()
export class NestedStringNullableWithAggregatesFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => NestedStringNullableWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringNullableWithAggregatesFilter>;
    @Field(() => NestedIntNullableFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntNullableFilter>;
    @Field(() => NestedStringNullableFilter, {nullable:true})
    _min?: InstanceType<typeof NestedStringNullableFilter>;
    @Field(() => NestedStringNullableFilter, {nullable:true})
    _max?: InstanceType<typeof NestedStringNullableFilter>;
}

@InputType()
export class NestedStringWithAggregatesFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => NestedStringWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedStringFilter, {nullable:true})
    _min?: InstanceType<typeof NestedStringFilter>;
    @Field(() => NestedStringFilter, {nullable:true})
    _max?: InstanceType<typeof NestedStringFilter>;
}

@InputType()
export class NullableStringFieldUpdateOperationsInput {
    @Field(() => String, {nullable:true})
    set?: string;
}

@ObjectType()
export class Player_login_logsCountAggregate {
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    ip!: number;
    @Field(() => Int, {nullable:false})
    loginTime!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Player_login_logsGroupBy {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    ip!: string;
    @Field(() => Date, {nullable:false})
    loginTime!: Date | string;
    @Field(() => Player_login_logsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Player_login_logsCountAggregate>;
    @Field(() => Player_login_logsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Player_login_logsMinAggregate>;
    @Field(() => Player_login_logsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Player_login_logsMaxAggregate>;
}

@InputType()
export class Player_login_logsListRelationFilter {
    @Field(() => player_login_logsWhereInput, {nullable:true})
    every?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => player_login_logsWhereInput, {nullable:true})
    some?: InstanceType<typeof player_login_logsWhereInput>;
    @Field(() => player_login_logsWhereInput, {nullable:true})
    none?: InstanceType<typeof player_login_logsWhereInput>;
}

@ObjectType()
export class Player_login_logsMaxAggregate {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    ip?: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@ObjectType()
export class Player_login_logsMinAggregate {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    ip?: string;
    @Field(() => Date, {nullable:true})
    loginTime?: Date | string;
}

@ObjectType()
export class Player_walletsAvgAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => Float, {nullable:true})
    frozenAmount?: number;
}

@ObjectType()
export class Player_walletsCountAggregate {
    @Field(() => Int, {nullable:false})
    playerWalletID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    currency!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    frozenAmount!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    udate!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Player_walletsGroupBy {
    @Field(() => String, {nullable:false})
    playerWalletID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => Float, {nullable:false})
    frozenAmount!: number;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Date, {nullable:false})
    udate!: Date | string;
    @Field(() => Player_walletsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Player_walletsCountAggregate>;
    @Field(() => Player_walletsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Player_walletsAvgAggregate>;
    @Field(() => Player_walletsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Player_walletsSumAggregate>;
    @Field(() => Player_walletsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Player_walletsMinAggregate>;
    @Field(() => Player_walletsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Player_walletsMaxAggregate>;
}

@InputType()
export class Player_walletsListRelationFilter {
    @Field(() => player_walletsWhereInput, {nullable:true})
    every?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => player_walletsWhereInput, {nullable:true})
    some?: InstanceType<typeof player_walletsWhereInput>;
    @Field(() => player_walletsWhereInput, {nullable:true})
    none?: InstanceType<typeof player_walletsWhereInput>;
}

@ObjectType()
export class Player_walletsMaxAggregate {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => Float, {nullable:true})
    frozenAmount?: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@ObjectType()
export class Player_walletsMinAggregate {
    @Field(() => String, {nullable:true})
    playerWalletID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => Float, {nullable:true})
    frozenAmount?: number;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
}

@ObjectType()
export class Player_walletsSumAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => Float, {nullable:true})
    frozenAmount?: number;
}

@ObjectType()
export class PlayersCountAggregate {
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    name!: number;
    @Field(() => Int, {nullable:false})
    tgID!: number;
    @Field(() => Int, {nullable:false})
    tgFirstName!: number;
    @Field(() => Int, {nullable:false})
    tgLastName!: number;
    @Field(() => Int, {nullable:false})
    tgUsername!: number;
    @Field(() => Int, {nullable:false})
    tgPhotoUrl!: number;
    @Field(() => Int, {nullable:false})
    userLanguage!: number;
    @Field(() => Int, {nullable:false})
    registrationIp!: number;
    @Field(() => Int, {nullable:false})
    agentID!: number;
    @Field(() => Int, {nullable:false})
    cdate!: number;
    @Field(() => Int, {nullable:false})
    udate!: number;
    @Field(() => Int, {nullable:false})
    enabled!: number;
    @Field(() => Int, {nullable:false})
    registrationDate!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class PlayersCount {
    @Field(() => Int, {nullable:false})
    playerLoginLogs!: number;
    @Field(() => Int, {nullable:false})
    currentActivePlayers!: number;
    @Field(() => Int, {nullable:false})
    gameHistory!: number;
    @Field(() => Int, {nullable:false})
    manualAdjustments!: number;
    @Field(() => Int, {nullable:false})
    playerWallets!: number;
    @Field(() => Int, {nullable:false})
    walletRequests!: number;
    @Field(() => Int, {nullable:false})
    depositTransactions!: number;
    @Field(() => Int, {nullable:false})
    withdrawalTransactions!: number;
    @Field(() => Int, {nullable:false})
    transferInTransactions!: number;
    @Field(() => Int, {nullable:false})
    transferOutTransactions!: number;
}

@ObjectType()
export class PlayersGroupBy {
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    name!: string;
    @Field(() => String, {nullable:false})
    tgID!: string;
    @Field(() => String, {nullable:false})
    tgFirstName!: string;
    @Field(() => String, {nullable:false})
    tgLastName!: string;
    @Field(() => String, {nullable:false})
    tgUsername!: string;
    @Field(() => String, {nullable:false})
    tgPhotoUrl!: string;
    @Field(() => String, {nullable:false})
    userLanguage!: string;
    @Field(() => String, {nullable:false})
    registrationIp!: string;
    @Field(() => String, {nullable:false})
    agentID!: string;
    @Field(() => Date, {nullable:false})
    cdate!: Date | string;
    @Field(() => Date, {nullable:false})
    udate!: Date | string;
    @Field(() => Boolean, {nullable:false})
    enabled!: boolean;
    @Field(() => String, {nullable:false})
    registrationDate!: string;
    @Field(() => PlayersCountAggregate, {nullable:true})
    _count?: InstanceType<typeof PlayersCountAggregate>;
    @Field(() => PlayersMinAggregate, {nullable:true})
    _min?: InstanceType<typeof PlayersMinAggregate>;
    @Field(() => PlayersMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof PlayersMaxAggregate>;
}

@InputType()
export class PlayersListRelationFilter {
    @Field(() => playersWhereInput, {nullable:true})
    every?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersWhereInput, {nullable:true})
    some?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersWhereInput, {nullable:true})
    none?: InstanceType<typeof playersWhereInput>;
}

@ObjectType()
export class PlayersMaxAggregate {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    name?: string;
    @Field(() => String, {nullable:true})
    tgID?: string;
    @Field(() => String, {nullable:true})
    tgFirstName?: string;
    @Field(() => String, {nullable:true})
    tgLastName?: string;
    @Field(() => String, {nullable:true})
    tgUsername?: string;
    @Field(() => String, {nullable:true})
    tgPhotoUrl?: string;
    @Field(() => String, {nullable:true})
    userLanguage?: string;
    @Field(() => String, {nullable:true})
    registrationIp?: string;
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    registrationDate?: string;
}

@ObjectType()
export class PlayersMinAggregate {
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    name?: string;
    @Field(() => String, {nullable:true})
    tgID?: string;
    @Field(() => String, {nullable:true})
    tgFirstName?: string;
    @Field(() => String, {nullable:true})
    tgLastName?: string;
    @Field(() => String, {nullable:true})
    tgUsername?: string;
    @Field(() => String, {nullable:true})
    tgPhotoUrl?: string;
    @Field(() => String, {nullable:true})
    userLanguage?: string;
    @Field(() => String, {nullable:true})
    registrationIp?: string;
    @Field(() => String, {nullable:true})
    agentID?: string;
    @Field(() => Date, {nullable:true})
    cdate?: Date | string;
    @Field(() => Date, {nullable:true})
    udate?: Date | string;
    @Field(() => Boolean, {nullable:true})
    enabled?: boolean;
    @Field(() => String, {nullable:true})
    registrationDate?: string;
}

@InputType()
export class PlayersRelationFilter {
    @Field(() => playersWhereInput, {nullable:true})
    is?: InstanceType<typeof playersWhereInput>;
    @Field(() => playersWhereInput, {nullable:true})
    isNot?: InstanceType<typeof playersWhereInput>;
}

@InputType()
export class SortOrderInput {
    @Field(() => SortOrder, {nullable:false})
    sort!: keyof typeof SortOrder;
    @Field(() => NullsOrder, {nullable:true})
    nulls?: keyof typeof NullsOrder;
}

@InputType()
export class StringFieldUpdateOperationsInput {
    @Field(() => String, {nullable:true})
    set?: string;
}

@InputType()
export class StringFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => QueryMode, {nullable:true})
    mode?: keyof typeof QueryMode;
    @Field(() => NestedStringFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringFilter>;
}

@InputType()
export class StringNullableFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => QueryMode, {nullable:true})
    mode?: keyof typeof QueryMode;
    @Field(() => NestedStringNullableFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringNullableFilter>;
}

@InputType()
export class StringNullableWithAggregatesFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => QueryMode, {nullable:true})
    mode?: keyof typeof QueryMode;
    @Field(() => NestedStringNullableWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringNullableWithAggregatesFilter>;
    @Field(() => NestedIntNullableFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntNullableFilter>;
    @Field(() => NestedStringNullableFilter, {nullable:true})
    _min?: InstanceType<typeof NestedStringNullableFilter>;
    @Field(() => NestedStringNullableFilter, {nullable:true})
    _max?: InstanceType<typeof NestedStringNullableFilter>;
}

@InputType()
export class StringWithAggregatesFilter {
    @Field(() => String, {nullable:true})
    equals?: string;
    @Field(() => [String], {nullable:true})
    in?: Array<string>;
    @Field(() => [String], {nullable:true})
    notIn?: Array<string>;
    @Field(() => String, {nullable:true})
    lt?: string;
    @Field(() => String, {nullable:true})
    lte?: string;
    @Field(() => String, {nullable:true})
    gt?: string;
    @Field(() => String, {nullable:true})
    gte?: string;
    @Field(() => String, {nullable:true})
    contains?: string;
    @Field(() => String, {nullable:true})
    startsWith?: string;
    @Field(() => String, {nullable:true})
    endsWith?: string;
    @Field(() => QueryMode, {nullable:true})
    mode?: keyof typeof QueryMode;
    @Field(() => NestedStringWithAggregatesFilter, {nullable:true})
    not?: InstanceType<typeof NestedStringWithAggregatesFilter>;
    @Field(() => NestedIntFilter, {nullable:true})
    _count?: InstanceType<typeof NestedIntFilter>;
    @Field(() => NestedStringFilter, {nullable:true})
    _min?: InstanceType<typeof NestedStringFilter>;
    @Field(() => NestedStringFilter, {nullable:true})
    _max?: InstanceType<typeof NestedStringFilter>;
}

@ObjectType()
export class Transfer_in_transactionsAvgAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ObjectType()
export class Transfer_in_transactionsCountAggregate {
    @Field(() => Int, {nullable:false})
    transferInTransactionID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    currency!: number;
    @Field(() => Int, {nullable:false})
    requestTime!: number;
    @Field(() => Int, {nullable:false})
    processTime!: number;
    @Field(() => Int, {nullable:false})
    processedBy!: number;
    @Field(() => Int, {nullable:false})
    transactionDate!: number;
    @Field(() => Int, {nullable:false})
    status!: number;
    @Field(() => Int, {nullable:false})
    counterpartPlatform!: number;
    @Field(() => Int, {nullable:false})
    counterpartUsername!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Transfer_in_transactionsGroupBy {
    @Field(() => String, {nullable:false})
    transferInTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
    @Field(() => Transfer_in_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Transfer_in_transactionsCountAggregate>;
    @Field(() => Transfer_in_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Transfer_in_transactionsAvgAggregate>;
    @Field(() => Transfer_in_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Transfer_in_transactionsSumAggregate>;
    @Field(() => Transfer_in_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Transfer_in_transactionsMinAggregate>;
    @Field(() => Transfer_in_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Transfer_in_transactionsMaxAggregate>;
}

@InputType()
export class Transfer_in_transactionsListRelationFilter {
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    every?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    some?: InstanceType<typeof transfer_in_transactionsWhereInput>;
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    none?: InstanceType<typeof transfer_in_transactionsWhereInput>;
}

@ObjectType()
export class Transfer_in_transactionsMaxAggregate {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    counterpartPlatform?: string;
    @Field(() => String, {nullable:true})
    counterpartUsername?: string;
}

@ObjectType()
export class Transfer_in_transactionsMinAggregate {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    counterpartPlatform?: string;
    @Field(() => String, {nullable:true})
    counterpartUsername?: string;
}

@ObjectType()
export class Transfer_in_transactionsSumAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ObjectType()
export class Transfer_out_transactionsAvgAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ObjectType()
export class Transfer_out_transactionsCountAggregate {
    @Field(() => Int, {nullable:false})
    transferOutTransactionID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    currency!: number;
    @Field(() => Int, {nullable:false})
    requestTime!: number;
    @Field(() => Int, {nullable:false})
    processTime!: number;
    @Field(() => Int, {nullable:false})
    processedBy!: number;
    @Field(() => Int, {nullable:false})
    transactionDate!: number;
    @Field(() => Int, {nullable:false})
    status!: number;
    @Field(() => Int, {nullable:false})
    counterpartPlatform!: number;
    @Field(() => Int, {nullable:false})
    counterpartUsername!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Transfer_out_transactionsGroupBy {
    @Field(() => String, {nullable:false})
    transferOutTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
    @Field(() => Transfer_out_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Transfer_out_transactionsCountAggregate>;
    @Field(() => Transfer_out_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Transfer_out_transactionsAvgAggregate>;
    @Field(() => Transfer_out_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Transfer_out_transactionsSumAggregate>;
    @Field(() => Transfer_out_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Transfer_out_transactionsMinAggregate>;
    @Field(() => Transfer_out_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Transfer_out_transactionsMaxAggregate>;
}

@InputType()
export class Transfer_out_transactionsListRelationFilter {
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    every?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    some?: InstanceType<typeof transfer_out_transactionsWhereInput>;
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    none?: InstanceType<typeof transfer_out_transactionsWhereInput>;
}

@ObjectType()
export class Transfer_out_transactionsMaxAggregate {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    counterpartPlatform?: string;
    @Field(() => String, {nullable:true})
    counterpartUsername?: string;
}

@ObjectType()
export class Transfer_out_transactionsMinAggregate {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    counterpartPlatform?: string;
    @Field(() => String, {nullable:true})
    counterpartUsername?: string;
}

@ObjectType()
export class Transfer_out_transactionsSumAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ArgsType()
export class UpdateManyadminAccessesArgs {
    @Field(() => admin_accessesUpdateManyMutationInput, {nullable:false})
    @Type(() => admin_accessesUpdateManyMutationInput)
    data!: InstanceType<typeof admin_accessesUpdateManyMutationInput>;
    @Field(() => admin_accessesWhereInput, {nullable:true})
    @Type(() => admin_accessesWhereInput)
    where?: InstanceType<typeof admin_accessesWhereInput>;
}

@ArgsType()
export class UpdateManyadminBankAccountsArgs {
    @Field(() => admin_bank_accountsUpdateManyMutationInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateManyMutationInput)
    data!: InstanceType<typeof admin_bank_accountsUpdateManyMutationInput>;
    @Field(() => admin_bank_accountsWhereInput, {nullable:true})
    @Type(() => admin_bank_accountsWhereInput)
    where?: InstanceType<typeof admin_bank_accountsWhereInput>;
}

@ArgsType()
export class UpdateManyadminLoginLogsArgs {
    @Field(() => admin_login_logsUpdateManyMutationInput, {nullable:false})
    @Type(() => admin_login_logsUpdateManyMutationInput)
    data!: InstanceType<typeof admin_login_logsUpdateManyMutationInput>;
    @Field(() => admin_login_logsWhereInput, {nullable:true})
    @Type(() => admin_login_logsWhereInput)
    where?: InstanceType<typeof admin_login_logsWhereInput>;
}

@ArgsType()
export class UpdateManyadminRoleAccessesArgs {
    @Field(() => admin_role_accessesUncheckedUpdateManyInput, {nullable:false})
    @Type(() => admin_role_accessesUncheckedUpdateManyInput)
    data!: InstanceType<typeof admin_role_accessesUncheckedUpdateManyInput>;
    @Field(() => admin_role_accessesWhereInput, {nullable:true})
    @Type(() => admin_role_accessesWhereInput)
    where?: InstanceType<typeof admin_role_accessesWhereInput>;
}

@ArgsType()
export class UpdateManyadminRolesArgs {
    @Field(() => admin_rolesUpdateManyMutationInput, {nullable:false})
    @Type(() => admin_rolesUpdateManyMutationInput)
    data!: InstanceType<typeof admin_rolesUpdateManyMutationInput>;
    @Field(() => admin_rolesWhereInput, {nullable:true})
    @Type(() => admin_rolesWhereInput)
    where?: InstanceType<typeof admin_rolesWhereInput>;
}

@ArgsType()
export class UpdateManyagentRebatesArgs {
    @Field(() => agent_rebatesUpdateManyMutationInput, {nullable:false})
    @Type(() => agent_rebatesUpdateManyMutationInput)
    data!: InstanceType<typeof agent_rebatesUpdateManyMutationInput>;
    @Field(() => agent_rebatesWhereInput, {nullable:true})
    @Type(() => agent_rebatesWhereInput)
    where?: InstanceType<typeof agent_rebatesWhereInput>;
}

@ArgsType()
export class UpdateManyallOwRequestsArgs {
    @Field(() => all_ow_requestsUpdateManyMutationInput, {nullable:false})
    @Type(() => all_ow_requestsUpdateManyMutationInput)
    data!: InstanceType<typeof all_ow_requestsUpdateManyMutationInput>;
    @Field(() => all_ow_requestsWhereInput, {nullable:true})
    @Type(() => all_ow_requestsWhereInput)
    where?: InstanceType<typeof all_ow_requestsWhereInput>;
}

@ArgsType()
export class UpdateManycurrentActivePlayersArgs {
    @Field(() => current_active_playersUpdateManyMutationInput, {nullable:false})
    @Type(() => current_active_playersUpdateManyMutationInput)
    data!: InstanceType<typeof current_active_playersUpdateManyMutationInput>;
    @Field(() => current_active_playersWhereInput, {nullable:true})
    @Type(() => current_active_playersWhereInput)
    where?: InstanceType<typeof current_active_playersWhereInput>;
}

@ArgsType()
export class UpdateManydepositTransactionsArgs {
    @Field(() => deposit_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof deposit_transactionsUpdateManyMutationInput>;
    @Field(() => deposit_transactionsWhereInput, {nullable:true})
    @Type(() => deposit_transactionsWhereInput)
    where?: InstanceType<typeof deposit_transactionsWhereInput>;
}

@ArgsType()
export class UpdateManygameHistoryArgs {
    @Field(() => game_historyUpdateManyMutationInput, {nullable:false})
    @Type(() => game_historyUpdateManyMutationInput)
    data!: InstanceType<typeof game_historyUpdateManyMutationInput>;
    @Field(() => game_historyWhereInput, {nullable:true})
    @Type(() => game_historyWhereInput)
    where?: InstanceType<typeof game_historyWhereInput>;
}

@ArgsType()
export class UpdateManygameRebatesArgs {
    @Field(() => game_rebatesUpdateManyMutationInput, {nullable:false})
    @Type(() => game_rebatesUpdateManyMutationInput)
    data!: InstanceType<typeof game_rebatesUpdateManyMutationInput>;
    @Field(() => game_rebatesWhereInput, {nullable:true})
    @Type(() => game_rebatesWhereInput)
    where?: InstanceType<typeof game_rebatesWhereInput>;
}

@ArgsType()
export class UpdateManymanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsUpdateManyMutationInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateManyMutationInput)
    data!: InstanceType<typeof manual_adjustmentsUpdateManyMutationInput>;
    @Field(() => manual_adjustmentsWhereInput, {nullable:true})
    @Type(() => manual_adjustmentsWhereInput)
    where?: InstanceType<typeof manual_adjustmentsWhereInput>;
}

@ArgsType()
export class UpdateManyplayerLoginLogsArgs {
    @Field(() => player_login_logsUpdateManyMutationInput, {nullable:false})
    @Type(() => player_login_logsUpdateManyMutationInput)
    data!: InstanceType<typeof player_login_logsUpdateManyMutationInput>;
    @Field(() => player_login_logsWhereInput, {nullable:true})
    @Type(() => player_login_logsWhereInput)
    where?: InstanceType<typeof player_login_logsWhereInput>;
}

@ArgsType()
export class UpdateManyplayerWalletsArgs {
    @Field(() => player_walletsUpdateManyMutationInput, {nullable:false})
    @Type(() => player_walletsUpdateManyMutationInput)
    data!: InstanceType<typeof player_walletsUpdateManyMutationInput>;
    @Field(() => player_walletsWhereInput, {nullable:true})
    @Type(() => player_walletsWhereInput)
    where?: InstanceType<typeof player_walletsWhereInput>;
}

@ArgsType()
export class UpdateManytransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => transfer_in_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof transfer_in_transactionsUpdateManyMutationInput>;
    @Field(() => transfer_in_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_in_transactionsWhereInput)
    where?: InstanceType<typeof transfer_in_transactionsWhereInput>;
}

@ArgsType()
export class UpdateManytransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => transfer_out_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof transfer_out_transactionsUpdateManyMutationInput>;
    @Field(() => transfer_out_transactionsWhereInput, {nullable:true})
    @Type(() => transfer_out_transactionsWhereInput)
    where?: InstanceType<typeof transfer_out_transactionsWhereInput>;
}

@ArgsType()
export class UpdateManywalletRequestsArgs {
    @Field(() => wallet_requestsUpdateManyMutationInput, {nullable:false})
    @Type(() => wallet_requestsUpdateManyMutationInput)
    data!: InstanceType<typeof wallet_requestsUpdateManyMutationInput>;
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    @Type(() => wallet_requestsWhereInput)
    where?: InstanceType<typeof wallet_requestsWhereInput>;
}

@ArgsType()
export class UpdateManywithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof withdrawal_transactionsUpdateManyMutationInput>;
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    @Type(() => withdrawal_transactionsWhereInput)
    where?: InstanceType<typeof withdrawal_transactionsWhereInput>;
}

@ArgsType()
export class UpdateOneadminAccessesArgs {
    @Field(() => admin_accessesUpdateInput, {nullable:false})
    @Type(() => admin_accessesUpdateInput)
    data!: InstanceType<typeof admin_accessesUpdateInput>;
    @Field(() => admin_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_accessesWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneadminBankAccountsArgs {
    @Field(() => admin_bank_accountsUpdateInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateInput)
    data!: InstanceType<typeof admin_bank_accountsUpdateInput>;
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneadminLoginLogsArgs {
    @Field(() => admin_login_logsUpdateInput, {nullable:false})
    @Type(() => admin_login_logsUpdateInput)
    data!: InstanceType<typeof admin_login_logsUpdateInput>;
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: InstanceType<typeof admin_login_logsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneadminRoleAccessesArgs {
    @Field(() => admin_role_accessesUpdateInput, {nullable:false})
    @Type(() => admin_role_accessesUpdateInput)
    data!: InstanceType<typeof admin_role_accessesUpdateInput>;
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneadminRolesArgs {
    @Field(() => admin_rolesUpdateInput, {nullable:false})
    @Type(() => admin_rolesUpdateInput)
    data!: InstanceType<typeof admin_rolesUpdateInput>;
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: InstanceType<typeof admin_rolesWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneagentRebatesArgs {
    @Field(() => agent_rebatesUpdateInput, {nullable:false})
    @Type(() => agent_rebatesUpdateInput)
    data!: InstanceType<typeof agent_rebatesUpdateInput>;
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: InstanceType<typeof agent_rebatesWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneallOwRequestsArgs {
    @Field(() => all_ow_requestsUpdateInput, {nullable:false})
    @Type(() => all_ow_requestsUpdateInput)
    data!: InstanceType<typeof all_ow_requestsUpdateInput>;
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:false})
    @Type(() => all_ow_requestsWhereUniqueInput)
    where!: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnecurrentActivePlayersArgs {
    @Field(() => current_active_playersUpdateInput, {nullable:false})
    @Type(() => current_active_playersUpdateInput)
    data!: InstanceType<typeof current_active_playersUpdateInput>;
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: InstanceType<typeof current_active_playersWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnedepositTransactionsArgs {
    @Field(() => deposit_transactionsUpdateInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateInput)
    data!: InstanceType<typeof deposit_transactionsUpdateInput>;
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnegameHistoryArgs {
    @Field(() => game_historyUpdateInput, {nullable:false})
    @Type(() => game_historyUpdateInput)
    data!: InstanceType<typeof game_historyUpdateInput>;
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: InstanceType<typeof game_historyWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnegameRebatesArgs {
    @Field(() => game_rebatesUpdateInput, {nullable:false})
    @Type(() => game_rebatesUpdateInput)
    data!: InstanceType<typeof game_rebatesUpdateInput>;
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: InstanceType<typeof game_rebatesWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnemanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsUpdateInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateInput)
    data!: InstanceType<typeof manual_adjustmentsUpdateInput>;
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneplayerLoginLogsArgs {
    @Field(() => player_login_logsUpdateInput, {nullable:false})
    @Type(() => player_login_logsUpdateInput)
    data!: InstanceType<typeof player_login_logsUpdateInput>;
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: InstanceType<typeof player_login_logsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOneplayerWalletsArgs {
    @Field(() => player_walletsUpdateInput, {nullable:false})
    @Type(() => player_walletsUpdateInput)
    data!: InstanceType<typeof player_walletsUpdateInput>;
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: InstanceType<typeof player_walletsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnetransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsUpdateInput, {nullable:false})
    @Type(() => transfer_in_transactionsUpdateInput)
    data!: InstanceType<typeof transfer_in_transactionsUpdateInput>;
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnetransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsUpdateInput, {nullable:false})
    @Type(() => transfer_out_transactionsUpdateInput)
    data!: InstanceType<typeof transfer_out_transactionsUpdateInput>;
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnewalletRequestsArgs {
    @Field(() => wallet_requestsUpdateInput, {nullable:false})
    @Type(() => wallet_requestsUpdateInput)
    data!: InstanceType<typeof wallet_requestsUpdateInput>;
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: InstanceType<typeof wallet_requestsWhereUniqueInput>;
}

@ArgsType()
export class UpdateOnewithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsUpdateInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateInput)
    data!: InstanceType<typeof withdrawal_transactionsUpdateInput>;
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
}

@ArgsType()
export class UpsertOneadminAccessesArgs {
    @Field(() => admin_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_accessesWhereUniqueInput>;
    @Field(() => admin_accessesCreateInput, {nullable:false})
    @Type(() => admin_accessesCreateInput)
    create!: InstanceType<typeof admin_accessesCreateInput>;
    @Field(() => admin_accessesUpdateInput, {nullable:false})
    @Type(() => admin_accessesUpdateInput)
    update!: InstanceType<typeof admin_accessesUpdateInput>;
}

@ArgsType()
export class UpsertOneadminBankAccountsArgs {
    @Field(() => admin_bank_accountsWhereUniqueInput, {nullable:false})
    @Type(() => admin_bank_accountsWhereUniqueInput)
    where!: InstanceType<typeof admin_bank_accountsWhereUniqueInput>;
    @Field(() => admin_bank_accountsCreateInput, {nullable:false})
    @Type(() => admin_bank_accountsCreateInput)
    create!: InstanceType<typeof admin_bank_accountsCreateInput>;
    @Field(() => admin_bank_accountsUpdateInput, {nullable:false})
    @Type(() => admin_bank_accountsUpdateInput)
    update!: InstanceType<typeof admin_bank_accountsUpdateInput>;
}

@ArgsType()
export class UpsertOneadminLoginLogsArgs {
    @Field(() => admin_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => admin_login_logsWhereUniqueInput)
    where!: InstanceType<typeof admin_login_logsWhereUniqueInput>;
    @Field(() => admin_login_logsCreateInput, {nullable:false})
    @Type(() => admin_login_logsCreateInput)
    create!: InstanceType<typeof admin_login_logsCreateInput>;
    @Field(() => admin_login_logsUpdateInput, {nullable:false})
    @Type(() => admin_login_logsUpdateInput)
    update!: InstanceType<typeof admin_login_logsUpdateInput>;
}

@ArgsType()
export class UpsertOneadminRoleAccessesArgs {
    @Field(() => admin_role_accessesWhereUniqueInput, {nullable:false})
    @Type(() => admin_role_accessesWhereUniqueInput)
    where!: InstanceType<typeof admin_role_accessesWhereUniqueInput>;
    @Field(() => admin_role_accessesCreateInput, {nullable:false})
    @Type(() => admin_role_accessesCreateInput)
    create!: InstanceType<typeof admin_role_accessesCreateInput>;
    @Field(() => admin_role_accessesUpdateInput, {nullable:false})
    @Type(() => admin_role_accessesUpdateInput)
    update!: InstanceType<typeof admin_role_accessesUpdateInput>;
}

@ArgsType()
export class UpsertOneadminRolesArgs {
    @Field(() => admin_rolesWhereUniqueInput, {nullable:false})
    @Type(() => admin_rolesWhereUniqueInput)
    where!: InstanceType<typeof admin_rolesWhereUniqueInput>;
    @Field(() => admin_rolesCreateInput, {nullable:false})
    @Type(() => admin_rolesCreateInput)
    create!: InstanceType<typeof admin_rolesCreateInput>;
    @Field(() => admin_rolesUpdateInput, {nullable:false})
    @Type(() => admin_rolesUpdateInput)
    update!: InstanceType<typeof admin_rolesUpdateInput>;
}

@ArgsType()
export class UpsertOneagentRebatesArgs {
    @Field(() => agent_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => agent_rebatesWhereUniqueInput)
    where!: InstanceType<typeof agent_rebatesWhereUniqueInput>;
    @Field(() => agent_rebatesCreateInput, {nullable:false})
    @Type(() => agent_rebatesCreateInput)
    create!: InstanceType<typeof agent_rebatesCreateInput>;
    @Field(() => agent_rebatesUpdateInput, {nullable:false})
    @Type(() => agent_rebatesUpdateInput)
    update!: InstanceType<typeof agent_rebatesUpdateInput>;
}

@ArgsType()
export class UpsertOneallOwRequestsArgs {
    @Field(() => all_ow_requestsWhereUniqueInput, {nullable:false})
    @Type(() => all_ow_requestsWhereUniqueInput)
    where!: InstanceType<typeof all_ow_requestsWhereUniqueInput>;
    @Field(() => all_ow_requestsCreateInput, {nullable:false})
    @Type(() => all_ow_requestsCreateInput)
    create!: InstanceType<typeof all_ow_requestsCreateInput>;
    @Field(() => all_ow_requestsUpdateInput, {nullable:false})
    @Type(() => all_ow_requestsUpdateInput)
    update!: InstanceType<typeof all_ow_requestsUpdateInput>;
}

@ArgsType()
export class UpsertOnecurrentActivePlayersArgs {
    @Field(() => current_active_playersWhereUniqueInput, {nullable:false})
    @Type(() => current_active_playersWhereUniqueInput)
    where!: InstanceType<typeof current_active_playersWhereUniqueInput>;
    @Field(() => current_active_playersCreateInput, {nullable:false})
    @Type(() => current_active_playersCreateInput)
    create!: InstanceType<typeof current_active_playersCreateInput>;
    @Field(() => current_active_playersUpdateInput, {nullable:false})
    @Type(() => current_active_playersUpdateInput)
    update!: InstanceType<typeof current_active_playersUpdateInput>;
}

@ArgsType()
export class UpsertOnedepositTransactionsArgs {
    @Field(() => deposit_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => deposit_transactionsWhereUniqueInput)
    where!: InstanceType<typeof deposit_transactionsWhereUniqueInput>;
    @Field(() => deposit_transactionsCreateInput, {nullable:false})
    @Type(() => deposit_transactionsCreateInput)
    create!: InstanceType<typeof deposit_transactionsCreateInput>;
    @Field(() => deposit_transactionsUpdateInput, {nullable:false})
    @Type(() => deposit_transactionsUpdateInput)
    update!: InstanceType<typeof deposit_transactionsUpdateInput>;
}

@ArgsType()
export class UpsertOnegameHistoryArgs {
    @Field(() => game_historyWhereUniqueInput, {nullable:false})
    @Type(() => game_historyWhereUniqueInput)
    where!: InstanceType<typeof game_historyWhereUniqueInput>;
    @Field(() => game_historyCreateInput, {nullable:false})
    @Type(() => game_historyCreateInput)
    create!: InstanceType<typeof game_historyCreateInput>;
    @Field(() => game_historyUpdateInput, {nullable:false})
    @Type(() => game_historyUpdateInput)
    update!: InstanceType<typeof game_historyUpdateInput>;
}

@ArgsType()
export class UpsertOnegameRebatesArgs {
    @Field(() => game_rebatesWhereUniqueInput, {nullable:false})
    @Type(() => game_rebatesWhereUniqueInput)
    where!: InstanceType<typeof game_rebatesWhereUniqueInput>;
    @Field(() => game_rebatesCreateInput, {nullable:false})
    @Type(() => game_rebatesCreateInput)
    create!: InstanceType<typeof game_rebatesCreateInput>;
    @Field(() => game_rebatesUpdateInput, {nullable:false})
    @Type(() => game_rebatesUpdateInput)
    update!: InstanceType<typeof game_rebatesUpdateInput>;
}

@ArgsType()
export class UpsertOnemanualAdjustmentsArgs {
    @Field(() => manual_adjustmentsWhereUniqueInput, {nullable:false})
    @Type(() => manual_adjustmentsWhereUniqueInput)
    where!: InstanceType<typeof manual_adjustmentsWhereUniqueInput>;
    @Field(() => manual_adjustmentsCreateInput, {nullable:false})
    @Type(() => manual_adjustmentsCreateInput)
    create!: InstanceType<typeof manual_adjustmentsCreateInput>;
    @Field(() => manual_adjustmentsUpdateInput, {nullable:false})
    @Type(() => manual_adjustmentsUpdateInput)
    update!: InstanceType<typeof manual_adjustmentsUpdateInput>;
}

@ArgsType()
export class UpsertOneplayerLoginLogsArgs {
    @Field(() => player_login_logsWhereUniqueInput, {nullable:false})
    @Type(() => player_login_logsWhereUniqueInput)
    where!: InstanceType<typeof player_login_logsWhereUniqueInput>;
    @Field(() => player_login_logsCreateInput, {nullable:false})
    @Type(() => player_login_logsCreateInput)
    create!: InstanceType<typeof player_login_logsCreateInput>;
    @Field(() => player_login_logsUpdateInput, {nullable:false})
    @Type(() => player_login_logsUpdateInput)
    update!: InstanceType<typeof player_login_logsUpdateInput>;
}

@ArgsType()
export class UpsertOneplayerWalletsArgs {
    @Field(() => player_walletsWhereUniqueInput, {nullable:false})
    @Type(() => player_walletsWhereUniqueInput)
    where!: InstanceType<typeof player_walletsWhereUniqueInput>;
    @Field(() => player_walletsCreateInput, {nullable:false})
    @Type(() => player_walletsCreateInput)
    create!: InstanceType<typeof player_walletsCreateInput>;
    @Field(() => player_walletsUpdateInput, {nullable:false})
    @Type(() => player_walletsUpdateInput)
    update!: InstanceType<typeof player_walletsUpdateInput>;
}

@ArgsType()
export class UpsertOnetransferInTransactionsArgs {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_in_transactionsWhereUniqueInput>;
    @Field(() => transfer_in_transactionsCreateInput, {nullable:false})
    @Type(() => transfer_in_transactionsCreateInput)
    create!: InstanceType<typeof transfer_in_transactionsCreateInput>;
    @Field(() => transfer_in_transactionsUpdateInput, {nullable:false})
    @Type(() => transfer_in_transactionsUpdateInput)
    update!: InstanceType<typeof transfer_in_transactionsUpdateInput>;
}

@ArgsType()
export class UpsertOnetransferOutTransactionsArgs {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: InstanceType<typeof transfer_out_transactionsWhereUniqueInput>;
    @Field(() => transfer_out_transactionsCreateInput, {nullable:false})
    @Type(() => transfer_out_transactionsCreateInput)
    create!: InstanceType<typeof transfer_out_transactionsCreateInput>;
    @Field(() => transfer_out_transactionsUpdateInput, {nullable:false})
    @Type(() => transfer_out_transactionsUpdateInput)
    update!: InstanceType<typeof transfer_out_transactionsUpdateInput>;
}

@ArgsType()
export class UpsertOnewalletRequestsArgs {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: InstanceType<typeof wallet_requestsWhereUniqueInput>;
    @Field(() => wallet_requestsCreateInput, {nullable:false})
    @Type(() => wallet_requestsCreateInput)
    create!: InstanceType<typeof wallet_requestsCreateInput>;
    @Field(() => wallet_requestsUpdateInput, {nullable:false})
    @Type(() => wallet_requestsUpdateInput)
    update!: InstanceType<typeof wallet_requestsUpdateInput>;
}

@ArgsType()
export class UpsertOnewithdrawalTransactionsArgs {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: InstanceType<typeof withdrawal_transactionsWhereUniqueInput>;
    @Field(() => withdrawal_transactionsCreateInput, {nullable:false})
    @Type(() => withdrawal_transactionsCreateInput)
    create!: InstanceType<typeof withdrawal_transactionsCreateInput>;
    @Field(() => withdrawal_transactionsUpdateInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateInput)
    update!: InstanceType<typeof withdrawal_transactionsUpdateInput>;
}

@ObjectType()
export class Wallet_requestsAvgAggregate {
    @Field(() => Float, {nullable:true})
    jackpotWin?: number;
}

@ObjectType()
export class Wallet_requestsCountAggregate {
    @Field(() => Int, {nullable:false})
    walletRequestID!: number;
    @Field(() => Int, {nullable:false})
    tID!: number;
    @Field(() => Int, {nullable:false})
    type!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    currency!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    iGameID!: number;
    @Field(() => Int, {nullable:false})
    iExtparam!: number;
    @Field(() => Int, {nullable:false})
    iRollback!: number;
    @Field(() => Int, {nullable:false})
    iGamedesc!: number;
    @Field(() => Int, {nullable:false})
    iActionID!: number;
    @Field(() => Int, {nullable:false})
    iReferenceActionID!: number;
    @Field(() => Int, {nullable:false})
    roundStart!: number;
    @Field(() => Int, {nullable:false})
    roundEnded!: number;
    @Field(() => Int, {nullable:false})
    gameExtra!: number;
    @Field(() => Int, {nullable:false})
    subtype!: number;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => Int, {nullable:false})
    hmac!: number;
    @Field(() => Int, {nullable:false})
    response!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Wallet_requestsGroupBy {
    @Field(() => String, {nullable:false})
    walletRequestID!: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
    @Field(() => Wallet_requestsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Wallet_requestsCountAggregate>;
    @Field(() => Wallet_requestsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Wallet_requestsAvgAggregate>;
    @Field(() => Wallet_requestsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Wallet_requestsSumAggregate>;
    @Field(() => Wallet_requestsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Wallet_requestsMinAggregate>;
    @Field(() => Wallet_requestsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Wallet_requestsMaxAggregate>;
}

@InputType()
export class Wallet_requestsListRelationFilter {
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    every?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    some?: InstanceType<typeof wallet_requestsWhereInput>;
    @Field(() => wallet_requestsWhereInput, {nullable:true})
    none?: InstanceType<typeof wallet_requestsWhereInput>;
}

@ObjectType()
export class Wallet_requestsMaxAggregate {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:true})
    tID?: string;
    @Field(() => String, {nullable:true})
    type?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => String, {nullable:true})
    amount?: string;
    @Field(() => String, {nullable:true})
    iGameID?: string;
    @Field(() => String, {nullable:true})
    iExtparam?: string;
    @Field(() => String, {nullable:true})
    iRollback?: string;
    @Field(() => String, {nullable:true})
    iGamedesc?: string;
    @Field(() => String, {nullable:true})
    iActionID?: string;
    @Field(() => String, {nullable:true})
    iReferenceActionID?: string;
    @Field(() => Boolean, {nullable:true})
    roundStart?: boolean;
    @Field(() => Boolean, {nullable:true})
    roundEnded?: boolean;
    @Field(() => String, {nullable:true})
    gameExtra?: string;
    @Field(() => String, {nullable:true})
    subtype?: string;
    @Field(() => Int, {nullable:true})
    jackpotWin?: number;
    @Field(() => String, {nullable:true})
    hmac?: string;
    @Field(() => String, {nullable:true})
    response?: string;
}

@ObjectType()
export class Wallet_requestsMinAggregate {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:true})
    tID?: string;
    @Field(() => String, {nullable:true})
    type?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => String, {nullable:true})
    amount?: string;
    @Field(() => String, {nullable:true})
    iGameID?: string;
    @Field(() => String, {nullable:true})
    iExtparam?: string;
    @Field(() => String, {nullable:true})
    iRollback?: string;
    @Field(() => String, {nullable:true})
    iGamedesc?: string;
    @Field(() => String, {nullable:true})
    iActionID?: string;
    @Field(() => String, {nullable:true})
    iReferenceActionID?: string;
    @Field(() => Boolean, {nullable:true})
    roundStart?: boolean;
    @Field(() => Boolean, {nullable:true})
    roundEnded?: boolean;
    @Field(() => String, {nullable:true})
    gameExtra?: string;
    @Field(() => String, {nullable:true})
    subtype?: string;
    @Field(() => Int, {nullable:true})
    jackpotWin?: number;
    @Field(() => String, {nullable:true})
    hmac?: string;
    @Field(() => String, {nullable:true})
    response?: string;
}

@ObjectType()
export class Wallet_requestsSumAggregate {
    @Field(() => Int, {nullable:true})
    jackpotWin?: number;
}

@ObjectType()
export class Withdrawal_transactionsAvgAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@ObjectType()
export class Withdrawal_transactionsCountAggregate {
    @Field(() => Int, {nullable:false})
    withdrawalTransactionID!: number;
    @Field(() => Int, {nullable:false})
    playerID!: number;
    @Field(() => Int, {nullable:false})
    amount!: number;
    @Field(() => Int, {nullable:false})
    currency!: number;
    @Field(() => Int, {nullable:false})
    requestTime!: number;
    @Field(() => Int, {nullable:false})
    processTime!: number;
    @Field(() => Int, {nullable:false})
    processedBy!: number;
    @Field(() => Int, {nullable:false})
    transactionDate!: number;
    @Field(() => Int, {nullable:false})
    status!: number;
    @Field(() => Int, {nullable:false})
    adminBankAccountID!: number;
    @Field(() => Int, {nullable:false})
    _all!: number;
}

@ObjectType()
export class Withdrawal_transactionsGroupBy {
    @Field(() => String, {nullable:false})
    withdrawalTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
    @Field(() => Withdrawal_transactionsCountAggregate, {nullable:true})
    _count?: InstanceType<typeof Withdrawal_transactionsCountAggregate>;
    @Field(() => Withdrawal_transactionsAvgAggregate, {nullable:true})
    _avg?: InstanceType<typeof Withdrawal_transactionsAvgAggregate>;
    @Field(() => Withdrawal_transactionsSumAggregate, {nullable:true})
    _sum?: InstanceType<typeof Withdrawal_transactionsSumAggregate>;
    @Field(() => Withdrawal_transactionsMinAggregate, {nullable:true})
    _min?: InstanceType<typeof Withdrawal_transactionsMinAggregate>;
    @Field(() => Withdrawal_transactionsMaxAggregate, {nullable:true})
    _max?: InstanceType<typeof Withdrawal_transactionsMaxAggregate>;
}

@InputType()
export class Withdrawal_transactionsListRelationFilter {
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    every?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    some?: InstanceType<typeof withdrawal_transactionsWhereInput>;
    @Field(() => withdrawal_transactionsWhereInput, {nullable:true})
    none?: InstanceType<typeof withdrawal_transactionsWhereInput>;
}

@ObjectType()
export class Withdrawal_transactionsMaxAggregate {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
}

@ObjectType()
export class Withdrawal_transactionsMinAggregate {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => String, {nullable:true})
    playerID?: string;
    @Field(() => Float, {nullable:true})
    amount?: number;
    @Field(() => String, {nullable:true})
    currency?: string;
    @Field(() => Date, {nullable:true})
    requestTime?: Date | string;
    @Field(() => Date, {nullable:true})
    processTime?: Date | string;
    @Field(() => String, {nullable:true})
    processedBy?: string;
    @Field(() => String, {nullable:true})
    transactionDate?: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:true})
    adminBankAccountID?: string;
}

@ObjectType()
export class Withdrawal_transactionsSumAggregate {
    @Field(() => Float, {nullable:true})
    amount?: number;
}

@InputType()
export class transfer_in_transactionsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class transfer_in_transactionsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    transferInTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
}

@InputType()
export class transfer_in_transactionsCreateManyPlayersInputEnvelope {
    @Field(() => [transfer_in_transactionsCreateManyPlayersInput], {nullable:false})
    @Type(() => transfer_in_transactionsCreateManyPlayersInput)
    data!: Array<transfer_in_transactionsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class transfer_in_transactionsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_in_transactionsCreateManyInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_in_transactionsCreateNestedManyWithoutPlayersInput {
    @Field(() => [transfer_in_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_in_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_in_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_in_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_in_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
}

@InputType()
export class transfer_in_transactionsCreateOrConnectWithoutPlayersInput {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>;
    @Field(() => transfer_in_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_in_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof transfer_in_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class transfer_in_transactionsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_in_transactionsCreateInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
    @Field(() => playersCreateNestedOneWithoutTransferInTransactionsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutTransferInTransactionsInput>;
}

@InputType()
export class transfer_in_transactionsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    transferInTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
}

@InputType()
export class transfer_in_transactionsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    transferInTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
}

@InputType()
export class transfer_in_transactionsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class transfer_in_transactionsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    transferInTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
    @Field(() => transfer_in_transactionsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof transfer_in_transactionsCountOrderByAggregateInput>;
    @Field(() => transfer_in_transactionsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof transfer_in_transactionsAvgOrderByAggregateInput>;
    @Field(() => transfer_in_transactionsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof transfer_in_transactionsMaxOrderByAggregateInput>;
    @Field(() => transfer_in_transactionsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof transfer_in_transactionsMinOrderByAggregateInput>;
    @Field(() => transfer_in_transactionsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof transfer_in_transactionsSumOrderByAggregateInput>;
}

@InputType()
export class transfer_in_transactionsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    transferInTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
}

@InputType()
export class transfer_in_transactionsScalarWhereWithAggregatesInput {
    @Field(() => [transfer_in_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<transfer_in_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [transfer_in_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<transfer_in_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [transfer_in_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<transfer_in_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    currency?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => EnumTransactionTypeWithAggregatesFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class transfer_in_transactionsScalarWhereInput {
    @Field(() => [transfer_in_transactionsScalarWhereInput], {nullable:true})
    AND?: Array<transfer_in_transactionsScalarWhereInput>;
    @Field(() => [transfer_in_transactionsScalarWhereInput], {nullable:true})
    OR?: Array<transfer_in_transactionsScalarWhereInput>;
    @Field(() => [transfer_in_transactionsScalarWhereInput], {nullable:true})
    NOT?: Array<transfer_in_transactionsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFilter>;
}

@InputType()
export class transfer_in_transactionsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class transfer_in_transactionsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [transfer_in_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_in_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_in_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_in_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_in_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
}

@InputType()
export class transfer_in_transactionsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_in_transactionsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_in_transactionsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [transfer_in_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_in_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_in_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_in_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_in_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsScalarWhereInput], {nullable:true})
    @Type(() => transfer_in_transactionsScalarWhereInput)
    deleteMany?: Array<transfer_in_transactionsScalarWhereInput>;
}

@InputType()
export class transfer_in_transactionsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_in_transactionsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_in_transactionsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_in_transactionsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_in_transactionsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => transfer_in_transactionsScalarWhereInput, {nullable:false})
    @Type(() => transfer_in_transactionsScalarWhereInput)
    where!: InstanceType<typeof transfer_in_transactionsScalarWhereInput>;
    @Field(() => transfer_in_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => transfer_in_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof transfer_in_transactionsUpdateManyMutationInput>;
}

@InputType()
export class transfer_in_transactionsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [transfer_in_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_in_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_in_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_in_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_in_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>>;
    @Field(() => [transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<transfer_in_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [transfer_in_transactionsScalarWhereInput], {nullable:true})
    @Type(() => transfer_in_transactionsScalarWhereInput)
    deleteMany?: Array<transfer_in_transactionsScalarWhereInput>;
}

@InputType()
export class transfer_in_transactionsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>;
    @Field(() => transfer_in_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_in_transactionsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof transfer_in_transactionsUpdateWithoutPlayersInput>;
}

@InputType()
export class transfer_in_transactionsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_in_transactionsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutTransferInTransactionsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutTransferInTransactionsNestedInput>;
}

@InputType()
export class transfer_in_transactionsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => transfer_in_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_in_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<transfer_in_transactionsWhereUniqueInput, 'transferInTransactionID'>;
    @Field(() => transfer_in_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_in_transactionsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof transfer_in_transactionsUpdateWithoutPlayersInput>;
    @Field(() => transfer_in_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_in_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof transfer_in_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class transfer_in_transactionsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    transferInTransactionID?: string;
    @Field(() => [transfer_in_transactionsWhereInput], {nullable:true})
    AND?: Array<transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsWhereInput], {nullable:true})
    OR?: Array<transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsWhereInput], {nullable:true})
    NOT?: Array<transfer_in_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@InputType()
export class transfer_in_transactionsWhereInput {
    @Field(() => [transfer_in_transactionsWhereInput], {nullable:true})
    AND?: Array<transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsWhereInput], {nullable:true})
    OR?: Array<transfer_in_transactionsWhereInput>;
    @Field(() => [transfer_in_transactionsWhereInput], {nullable:true})
    NOT?: Array<transfer_in_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    transferInTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@ObjectType()
export class transfer_in_transactions {
    @Field(() => ID, {nullable:false})
    transferInTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date;
    @Field(() => Date, {nullable:false})
    processTime!: Date;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false,defaultValue:'PENDING'})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
}

@InputType()
export class transfer_out_transactionsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class transfer_out_transactionsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    transferOutTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
}

@InputType()
export class transfer_out_transactionsCreateManyPlayersInputEnvelope {
    @Field(() => [transfer_out_transactionsCreateManyPlayersInput], {nullable:false})
    @Type(() => transfer_out_transactionsCreateManyPlayersInput)
    data!: Array<transfer_out_transactionsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class transfer_out_transactionsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_out_transactionsCreateManyInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_out_transactionsCreateNestedManyWithoutPlayersInput {
    @Field(() => [transfer_out_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_out_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_out_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_out_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_out_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
}

@InputType()
export class transfer_out_transactionsCreateOrConnectWithoutPlayersInput {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>;
    @Field(() => transfer_out_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_out_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof transfer_out_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class transfer_out_transactionsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_out_transactionsCreateInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
    @Field(() => playersCreateNestedOneWithoutTransferOutTransactionsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutTransferOutTransactionsInput>;
}

@InputType()
export class transfer_out_transactionsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    transferOutTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
}

@InputType()
export class transfer_out_transactionsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    transferOutTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
}

@InputType()
export class transfer_out_transactionsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class transfer_out_transactionsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    transferOutTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
    @Field(() => transfer_out_transactionsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof transfer_out_transactionsCountOrderByAggregateInput>;
    @Field(() => transfer_out_transactionsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof transfer_out_transactionsAvgOrderByAggregateInput>;
    @Field(() => transfer_out_transactionsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof transfer_out_transactionsMaxOrderByAggregateInput>;
    @Field(() => transfer_out_transactionsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof transfer_out_transactionsMinOrderByAggregateInput>;
    @Field(() => transfer_out_transactionsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof transfer_out_transactionsSumOrderByAggregateInput>;
}

@InputType()
export class transfer_out_transactionsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    transferOutTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartPlatform?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    counterpartUsername?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
}

@InputType()
export class transfer_out_transactionsScalarWhereWithAggregatesInput {
    @Field(() => [transfer_out_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<transfer_out_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [transfer_out_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<transfer_out_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [transfer_out_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<transfer_out_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    currency?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => EnumTransactionTypeWithAggregatesFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class transfer_out_transactionsScalarWhereInput {
    @Field(() => [transfer_out_transactionsScalarWhereInput], {nullable:true})
    AND?: Array<transfer_out_transactionsScalarWhereInput>;
    @Field(() => [transfer_out_transactionsScalarWhereInput], {nullable:true})
    OR?: Array<transfer_out_transactionsScalarWhereInput>;
    @Field(() => [transfer_out_transactionsScalarWhereInput], {nullable:true})
    NOT?: Array<transfer_out_transactionsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFilter>;
}

@InputType()
export class transfer_out_transactionsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class transfer_out_transactionsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [transfer_out_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_out_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_out_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_out_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_out_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
}

@InputType()
export class transfer_out_transactionsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_out_transactionsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
}

@InputType()
export class transfer_out_transactionsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [transfer_out_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_out_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_out_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_out_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_out_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsScalarWhereInput], {nullable:true})
    @Type(() => transfer_out_transactionsScalarWhereInput)
    deleteMany?: Array<transfer_out_transactionsScalarWhereInput>;
}

@InputType()
export class transfer_out_transactionsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_out_transactionsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_out_transactionsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_out_transactionsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_out_transactionsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => transfer_out_transactionsScalarWhereInput, {nullable:false})
    @Type(() => transfer_out_transactionsScalarWhereInput)
    where!: InstanceType<typeof transfer_out_transactionsScalarWhereInput>;
    @Field(() => transfer_out_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => transfer_out_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof transfer_out_transactionsUpdateManyMutationInput>;
}

@InputType()
export class transfer_out_transactionsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [transfer_out_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateWithoutPlayersInput)
    create?: Array<transfer_out_transactionsCreateWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<transfer_out_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => transfer_out_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof transfer_out_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>>;
    @Field(() => [transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<transfer_out_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [transfer_out_transactionsScalarWhereInput], {nullable:true})
    @Type(() => transfer_out_transactionsScalarWhereInput)
    deleteMany?: Array<transfer_out_transactionsScalarWhereInput>;
}

@InputType()
export class transfer_out_transactionsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>;
    @Field(() => transfer_out_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_out_transactionsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof transfer_out_transactionsUpdateWithoutPlayersInput>;
}

@InputType()
export class transfer_out_transactionsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class transfer_out_transactionsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutTransferOutTransactionsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutTransferOutTransactionsNestedInput>;
}

@InputType()
export class transfer_out_transactionsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => transfer_out_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => transfer_out_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<transfer_out_transactionsWhereUniqueInput, 'transferOutTransactionID'>;
    @Field(() => transfer_out_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_out_transactionsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof transfer_out_transactionsUpdateWithoutPlayersInput>;
    @Field(() => transfer_out_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => transfer_out_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof transfer_out_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class transfer_out_transactionsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    transferOutTransactionID?: string;
    @Field(() => [transfer_out_transactionsWhereInput], {nullable:true})
    AND?: Array<transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsWhereInput], {nullable:true})
    OR?: Array<transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsWhereInput], {nullable:true})
    NOT?: Array<transfer_out_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@InputType()
export class transfer_out_transactionsWhereInput {
    @Field(() => [transfer_out_transactionsWhereInput], {nullable:true})
    AND?: Array<transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsWhereInput], {nullable:true})
    OR?: Array<transfer_out_transactionsWhereInput>;
    @Field(() => [transfer_out_transactionsWhereInput], {nullable:true})
    NOT?: Array<transfer_out_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    transferOutTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartPlatform?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    counterpartUsername?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@ObjectType()
export class transfer_out_transactions {
    @Field(() => ID, {nullable:false})
    transferOutTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date;
    @Field(() => Date, {nullable:false})
    processTime!: Date;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false,defaultValue:'PENDING'})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    counterpartPlatform!: string;
    @Field(() => String, {nullable:false})
    counterpartUsername!: string;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
}

@InputType()
export class wallet_requestsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
}

@InputType()
export class wallet_requestsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    walletRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    type?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iExtparam?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iRollback?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iReferenceActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundStart?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundEnded?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameExtra?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    subtype?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    hmac?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    response?: keyof typeof SortOrder;
}

@InputType()
export class wallet_requestsCreateManyPlayersInputEnvelope {
    @Field(() => [wallet_requestsCreateManyPlayersInput], {nullable:false})
    @Type(() => wallet_requestsCreateManyPlayersInput)
    data!: Array<wallet_requestsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class wallet_requestsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
}

@InputType()
export class wallet_requestsCreateManyInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
}

@InputType()
export class wallet_requestsCreateNestedManyWithoutPlayersInput {
    @Field(() => [wallet_requestsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateWithoutPlayersInput)
    create?: Array<wallet_requestsCreateWithoutPlayersInput>;
    @Field(() => [wallet_requestsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<wallet_requestsCreateOrConnectWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => wallet_requestsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof wallet_requestsCreateManyPlayersInputEnvelope>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
}

@InputType()
export class wallet_requestsCreateOrConnectWithoutPlayersInput {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>;
    @Field(() => wallet_requestsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => wallet_requestsCreateWithoutPlayersInput)
    create!: InstanceType<typeof wallet_requestsCreateWithoutPlayersInput>;
}

@InputType()
export class wallet_requestsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
}

@InputType()
export class wallet_requestsCreateInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
    @Field(() => playersCreateNestedOneWithoutWalletRequestsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutWalletRequestsInput>;
}

@InputType()
export class wallet_requestsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    walletRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    type?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iExtparam?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iRollback?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iReferenceActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundStart?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundEnded?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameExtra?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    subtype?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    hmac?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    response?: keyof typeof SortOrder;
}

@InputType()
export class wallet_requestsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    walletRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    type?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iExtparam?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iRollback?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iReferenceActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundStart?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundEnded?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameExtra?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    subtype?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    hmac?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    response?: keyof typeof SortOrder;
}

@InputType()
export class wallet_requestsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class wallet_requestsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    walletRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    type?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iExtparam?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iRollback?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iReferenceActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundStart?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundEnded?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameExtra?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    subtype?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    hmac?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    response?: keyof typeof SortOrder;
    @Field(() => wallet_requestsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof wallet_requestsCountOrderByAggregateInput>;
    @Field(() => wallet_requestsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof wallet_requestsAvgOrderByAggregateInput>;
    @Field(() => wallet_requestsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof wallet_requestsMaxOrderByAggregateInput>;
    @Field(() => wallet_requestsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof wallet_requestsMinOrderByAggregateInput>;
    @Field(() => wallet_requestsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof wallet_requestsSumOrderByAggregateInput>;
}

@InputType()
export class wallet_requestsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    walletRequestID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    tID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    type?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGameID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iExtparam?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iRollback?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iGamedesc?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    iReferenceActionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundStart?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    roundEnded?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    gameExtra?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    subtype?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    hmac?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    response?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
}

@InputType()
export class wallet_requestsScalarWhereWithAggregatesInput {
    @Field(() => [wallet_requestsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<wallet_requestsScalarWhereWithAggregatesInput>;
    @Field(() => [wallet_requestsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<wallet_requestsScalarWhereWithAggregatesInput>;
    @Field(() => [wallet_requestsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<wallet_requestsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    walletRequestID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    tID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    type?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    currency?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iGameID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iExtparam?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iRollback?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iActionID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    roundStart?: InstanceType<typeof BoolWithAggregatesFilter>;
    @Field(() => BoolWithAggregatesFilter, {nullable:true})
    roundEnded?: InstanceType<typeof BoolWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    gameExtra?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    subtype?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => IntWithAggregatesFilter, {nullable:true})
    jackpotWin?: InstanceType<typeof IntWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    hmac?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    response?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class wallet_requestsScalarWhereInput {
    @Field(() => [wallet_requestsScalarWhereInput], {nullable:true})
    AND?: Array<wallet_requestsScalarWhereInput>;
    @Field(() => [wallet_requestsScalarWhereInput], {nullable:true})
    OR?: Array<wallet_requestsScalarWhereInput>;
    @Field(() => [wallet_requestsScalarWhereInput], {nullable:true})
    NOT?: Array<wallet_requestsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    type?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    amount?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iExtparam?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iRollback?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iActionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFilter>;
    @Field(() => BoolFilter, {nullable:true})
    roundStart?: InstanceType<typeof BoolFilter>;
    @Field(() => BoolFilter, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameExtra?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    subtype?: InstanceType<typeof StringFilter>;
    @Field(() => IntFilter, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFilter>;
    @Field(() => StringFilter, {nullable:true})
    hmac?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    response?: InstanceType<typeof StringFilter>;
}

@InputType()
export class wallet_requestsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    jackpotWin?: keyof typeof SortOrder;
}

@InputType()
export class wallet_requestsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [wallet_requestsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateWithoutPlayersInput)
    create?: Array<wallet_requestsCreateWithoutPlayersInput>;
    @Field(() => [wallet_requestsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<wallet_requestsCreateOrConnectWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => wallet_requestsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof wallet_requestsCreateManyPlayersInputEnvelope>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
}

@InputType()
export class wallet_requestsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
}

@InputType()
export class wallet_requestsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
}

@InputType()
export class wallet_requestsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [wallet_requestsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateWithoutPlayersInput)
    create?: Array<wallet_requestsCreateWithoutPlayersInput>;
    @Field(() => [wallet_requestsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<wallet_requestsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => wallet_requestsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof wallet_requestsCreateManyPlayersInputEnvelope>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [wallet_requestsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<wallet_requestsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [wallet_requestsScalarWhereInput], {nullable:true})
    @Type(() => wallet_requestsScalarWhereInput)
    deleteMany?: Array<wallet_requestsScalarWhereInput>;
}

@InputType()
export class wallet_requestsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class wallet_requestsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class wallet_requestsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class wallet_requestsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class wallet_requestsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class wallet_requestsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => wallet_requestsScalarWhereInput, {nullable:false})
    @Type(() => wallet_requestsScalarWhereInput)
    where!: InstanceType<typeof wallet_requestsScalarWhereInput>;
    @Field(() => wallet_requestsUpdateManyMutationInput, {nullable:false})
    @Type(() => wallet_requestsUpdateManyMutationInput)
    data!: InstanceType<typeof wallet_requestsUpdateManyMutationInput>;
}

@InputType()
export class wallet_requestsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [wallet_requestsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateWithoutPlayersInput)
    create?: Array<wallet_requestsCreateWithoutPlayersInput>;
    @Field(() => [wallet_requestsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<wallet_requestsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => wallet_requestsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof wallet_requestsCreateManyPlayersInputEnvelope>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsWhereUniqueInput], {nullable:true})
    @Type(() => wallet_requestsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>>;
    @Field(() => [wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [wallet_requestsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => wallet_requestsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<wallet_requestsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [wallet_requestsScalarWhereInput], {nullable:true})
    @Type(() => wallet_requestsScalarWhereInput)
    deleteMany?: Array<wallet_requestsScalarWhereInput>;
}

@InputType()
export class wallet_requestsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>;
    @Field(() => wallet_requestsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => wallet_requestsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof wallet_requestsUpdateWithoutPlayersInput>;
}

@InputType()
export class wallet_requestsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class wallet_requestsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    tID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    type?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGameID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iExtparam?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iRollback?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundStart?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => BoolFieldUpdateOperationsInput, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    gameExtra?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    subtype?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => IntFieldUpdateOperationsInput, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    hmac?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    response?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutWalletRequestsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutWalletRequestsNestedInput>;
}

@InputType()
export class wallet_requestsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => wallet_requestsWhereUniqueInput, {nullable:false})
    @Type(() => wallet_requestsWhereUniqueInput)
    where!: Prisma.AtLeast<wallet_requestsWhereUniqueInput, 'walletRequestID'>;
    @Field(() => wallet_requestsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => wallet_requestsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof wallet_requestsUpdateWithoutPlayersInput>;
    @Field(() => wallet_requestsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => wallet_requestsCreateWithoutPlayersInput)
    create!: InstanceType<typeof wallet_requestsCreateWithoutPlayersInput>;
}

@InputType()
export class wallet_requestsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    walletRequestID?: string;
    @Field(() => [wallet_requestsWhereInput], {nullable:true})
    AND?: Array<wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsWhereInput], {nullable:true})
    OR?: Array<wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsWhereInput], {nullable:true})
    NOT?: Array<wallet_requestsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    tID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    type?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    amount?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iExtparam?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iRollback?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iActionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFilter>;
    @Field(() => BoolFilter, {nullable:true})
    roundStart?: InstanceType<typeof BoolFilter>;
    @Field(() => BoolFilter, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameExtra?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    subtype?: InstanceType<typeof StringFilter>;
    @Field(() => IntFilter, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFilter>;
    @Field(() => StringFilter, {nullable:true})
    hmac?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    response?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@InputType()
export class wallet_requestsWhereInput {
    @Field(() => [wallet_requestsWhereInput], {nullable:true})
    AND?: Array<wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsWhereInput], {nullable:true})
    OR?: Array<wallet_requestsWhereInput>;
    @Field(() => [wallet_requestsWhereInput], {nullable:true})
    NOT?: Array<wallet_requestsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    walletRequestID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    tID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    type?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    amount?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGameID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iExtparam?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iRollback?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iGamedesc?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iActionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    iReferenceActionID?: InstanceType<typeof StringFilter>;
    @Field(() => BoolFilter, {nullable:true})
    roundStart?: InstanceType<typeof BoolFilter>;
    @Field(() => BoolFilter, {nullable:true})
    roundEnded?: InstanceType<typeof BoolFilter>;
    @Field(() => StringFilter, {nullable:true})
    gameExtra?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    subtype?: InstanceType<typeof StringFilter>;
    @Field(() => IntFilter, {nullable:true})
    jackpotWin?: InstanceType<typeof IntFilter>;
    @Field(() => StringFilter, {nullable:true})
    hmac?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    response?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
}

@ObjectType()
export class wallet_requests {
    @Field(() => ID, {nullable:false})
    walletRequestID!: string;
    @Field(() => String, {nullable:false})
    tID!: string;
    @Field(() => String, {nullable:false})
    type!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => String, {nullable:false})
    amount!: string;
    @Field(() => String, {nullable:false})
    iGameID!: string;
    @Field(() => String, {nullable:false})
    iExtparam!: string;
    @Field(() => String, {nullable:false})
    iRollback!: string;
    @Field(() => String, {nullable:false})
    iGamedesc!: string;
    @Field(() => String, {nullable:false})
    iActionID!: string;
    @Field(() => String, {nullable:false})
    iReferenceActionID!: string;
    @Field(() => Boolean, {nullable:false})
    roundStart!: boolean;
    @Field(() => Boolean, {nullable:false})
    roundEnded!: boolean;
    @Field(() => String, {nullable:false})
    gameExtra!: string;
    @Field(() => String, {nullable:false})
    subtype!: string;
    @Field(() => Int, {nullable:false})
    jackpotWin!: number;
    @Field(() => String, {nullable:false})
    hmac!: string;
    @Field(() => String, {nullable:false})
    response!: string;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
}

@InputType()
export class withdrawal_transactionsAvgOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class withdrawal_transactionsCountOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    withdrawalTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
}

@InputType()
export class withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope {
    @Field(() => [withdrawal_transactionsCreateManyAdminBankAccountsInput], {nullable:false})
    @Type(() => withdrawal_transactionsCreateManyAdminBankAccountsInput)
    data!: Array<withdrawal_transactionsCreateManyAdminBankAccountsInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class withdrawal_transactionsCreateManyAdminBankAccountsInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
}

@InputType()
export class withdrawal_transactionsCreateManyPlayersInputEnvelope {
    @Field(() => [withdrawal_transactionsCreateManyPlayersInput], {nullable:false})
    @Type(() => withdrawal_transactionsCreateManyPlayersInput)
    data!: Array<withdrawal_transactionsCreateManyPlayersInput>;
    @Field(() => Boolean, {nullable:true})
    skipDuplicates?: boolean;
}

@InputType()
export class withdrawal_transactionsCreateManyPlayersInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class withdrawal_transactionsCreateManyInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class withdrawal_transactionsCreateNestedManyWithoutAdminBankAccountsInput {
    @Field(() => [withdrawal_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<withdrawal_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
}

@InputType()
export class withdrawal_transactionsCreateNestedManyWithoutPlayersInput {
    @Field(() => [withdrawal_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutPlayersInput)
    create?: Array<withdrawal_transactionsCreateWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
}

@InputType()
export class withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>;
    @Field(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput)
    create!: InstanceType<typeof withdrawal_transactionsCreateWithoutAdminBankAccountsInput>;
}

@InputType()
export class withdrawal_transactionsCreateOrConnectWithoutPlayersInput {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>;
    @Field(() => withdrawal_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => withdrawal_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof withdrawal_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class withdrawal_transactionsCreateWithoutAdminBankAccountsInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => playersCreateNestedOneWithoutWithdrawalTransactionsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class withdrawal_transactionsCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => admin_bank_accountsCreateNestedOneWithoutWithdrawalTransactionsInput, {nullable:false})
    adminBankAccounts!: InstanceType<typeof admin_bank_accountsCreateNestedOneWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class withdrawal_transactionsCreateInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => playersCreateNestedOneWithoutWithdrawalTransactionsInput, {nullable:false})
    players!: InstanceType<typeof playersCreateNestedOneWithoutWithdrawalTransactionsInput>;
    @Field(() => admin_bank_accountsCreateNestedOneWithoutWithdrawalTransactionsInput, {nullable:false})
    adminBankAccounts!: InstanceType<typeof admin_bank_accountsCreateNestedOneWithoutWithdrawalTransactionsInput>;
}

@InputType()
export class withdrawal_transactionsMaxOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    withdrawalTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
}

@InputType()
export class withdrawal_transactionsMinOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    withdrawalTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
}

@InputType()
export class withdrawal_transactionsOrderByRelationAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    _count?: keyof typeof SortOrder;
}

@InputType()
export class withdrawal_transactionsOrderByWithAggregationInput {
    @Field(() => SortOrder, {nullable:true})
    withdrawalTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => withdrawal_transactionsCountOrderByAggregateInput, {nullable:true})
    _count?: InstanceType<typeof withdrawal_transactionsCountOrderByAggregateInput>;
    @Field(() => withdrawal_transactionsAvgOrderByAggregateInput, {nullable:true})
    _avg?: InstanceType<typeof withdrawal_transactionsAvgOrderByAggregateInput>;
    @Field(() => withdrawal_transactionsMaxOrderByAggregateInput, {nullable:true})
    _max?: InstanceType<typeof withdrawal_transactionsMaxOrderByAggregateInput>;
    @Field(() => withdrawal_transactionsMinOrderByAggregateInput, {nullable:true})
    _min?: InstanceType<typeof withdrawal_transactionsMinOrderByAggregateInput>;
    @Field(() => withdrawal_transactionsSumOrderByAggregateInput, {nullable:true})
    _sum?: InstanceType<typeof withdrawal_transactionsSumOrderByAggregateInput>;
}

@InputType()
export class withdrawal_transactionsOrderByWithRelationInput {
    @Field(() => SortOrder, {nullable:true})
    withdrawalTransactionID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    playerID?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    currency?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    requestTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processTime?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    processedBy?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    transactionDate?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    status?: keyof typeof SortOrder;
    @Field(() => SortOrder, {nullable:true})
    adminBankAccountID?: keyof typeof SortOrder;
    @Field(() => playersOrderByWithRelationInput, {nullable:true})
    players?: InstanceType<typeof playersOrderByWithRelationInput>;
    @Field(() => admin_bank_accountsOrderByWithRelationInput, {nullable:true})
    adminBankAccounts?: InstanceType<typeof admin_bank_accountsOrderByWithRelationInput>;
}

@InputType()
export class withdrawal_transactionsScalarWhereWithAggregatesInput {
    @Field(() => [withdrawal_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    AND?: Array<withdrawal_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [withdrawal_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    OR?: Array<withdrawal_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => [withdrawal_transactionsScalarWhereWithAggregatesInput], {nullable:true})
    NOT?: Array<withdrawal_transactionsScalarWhereWithAggregatesInput>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    playerID?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => FloatWithAggregatesFilter, {nullable:true})
    amount?: InstanceType<typeof FloatWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    currency?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => DateTimeWithAggregatesFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringWithAggregatesFilter>;
    @Field(() => EnumTransactionTypeWithAggregatesFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeWithAggregatesFilter>;
    @Field(() => StringWithAggregatesFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringWithAggregatesFilter>;
}

@InputType()
export class withdrawal_transactionsScalarWhereInput {
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    AND?: Array<withdrawal_transactionsScalarWhereInput>;
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    OR?: Array<withdrawal_transactionsScalarWhereInput>;
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    NOT?: Array<withdrawal_transactionsScalarWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
}

@InputType()
export class withdrawal_transactionsSumOrderByAggregateInput {
    @Field(() => SortOrder, {nullable:true})
    amount?: keyof typeof SortOrder;
}

@InputType()
export class withdrawal_transactionsUncheckedCreateNestedManyWithoutAdminBankAccountsInput {
    @Field(() => [withdrawal_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<withdrawal_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
}

@InputType()
export class withdrawal_transactionsUncheckedCreateNestedManyWithoutPlayersInput {
    @Field(() => [withdrawal_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutPlayersInput)
    create?: Array<withdrawal_transactionsCreateWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
}

@InputType()
export class withdrawal_transactionsUncheckedCreateWithoutAdminBankAccountsInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
}

@InputType()
export class withdrawal_transactionsUncheckedCreateWithoutPlayersInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class withdrawal_transactionsUncheckedCreateInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date | string;
    @Field(() => Date, {nullable:false})
    processTime!: Date | string;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:true})
    status?: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateManyWithoutAdminBankAccountsNestedInput {
    @Field(() => [withdrawal_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<withdrawal_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput)
    upsert?: Array<withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput)
    update?: Array<withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput)
    updateMany?: Array<withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    @Type(() => withdrawal_transactionsScalarWhereInput)
    deleteMany?: Array<withdrawal_transactionsScalarWhereInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateManyWithoutAdminBankAccountsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateManyWithoutPlayersNestedInput {
    @Field(() => [withdrawal_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutPlayersInput)
    create?: Array<withdrawal_transactionsCreateWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    @Type(() => withdrawal_transactionsScalarWhereInput)
    deleteMany?: Array<withdrawal_transactionsScalarWhereInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateManyWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateManyInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateWithoutAdminBankAccountsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUncheckedUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    playerID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUpdateManyMutationInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
}

@InputType()
export class withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput {
    @Field(() => withdrawal_transactionsScalarWhereInput, {nullable:false})
    @Type(() => withdrawal_transactionsScalarWhereInput)
    where!: InstanceType<typeof withdrawal_transactionsScalarWhereInput>;
    @Field(() => withdrawal_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof withdrawal_transactionsUpdateManyMutationInput>;
}

@InputType()
export class withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput {
    @Field(() => withdrawal_transactionsScalarWhereInput, {nullable:false})
    @Type(() => withdrawal_transactionsScalarWhereInput)
    where!: InstanceType<typeof withdrawal_transactionsScalarWhereInput>;
    @Field(() => withdrawal_transactionsUpdateManyMutationInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateManyMutationInput)
    data!: InstanceType<typeof withdrawal_transactionsUpdateManyMutationInput>;
}

@InputType()
export class withdrawal_transactionsUpdateManyWithoutAdminBankAccountsNestedInput {
    @Field(() => [withdrawal_transactionsCreateWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput)
    create?: Array<withdrawal_transactionsCreateWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput)
    upsert?: Array<withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyAdminBankAccountsInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput)
    update?: Array<withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput)
    updateMany?: Array<withdrawal_transactionsUpdateManyWithWhereWithoutAdminBankAccountsInput>;
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    @Type(() => withdrawal_transactionsScalarWhereInput)
    deleteMany?: Array<withdrawal_transactionsScalarWhereInput>;
}

@InputType()
export class withdrawal_transactionsUpdateManyWithoutPlayersNestedInput {
    @Field(() => [withdrawal_transactionsCreateWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateWithoutPlayersInput)
    create?: Array<withdrawal_transactionsCreateWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsCreateOrConnectWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsCreateOrConnectWithoutPlayersInput)
    connectOrCreate?: Array<withdrawal_transactionsCreateOrConnectWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput)
    upsert?: Array<withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateManyPlayersInputEnvelope, {nullable:true})
    @Type(() => withdrawal_transactionsCreateManyPlayersInputEnvelope)
    createMany?: InstanceType<typeof withdrawal_transactionsCreateManyPlayersInputEnvelope>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    set?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    disconnect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    delete?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsWhereUniqueInput], {nullable:true})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    connect?: Array<Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>>;
    @Field(() => [withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput)
    update?: Array<withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput], {nullable:true})
    @Type(() => withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput)
    updateMany?: Array<withdrawal_transactionsUpdateManyWithWhereWithoutPlayersInput>;
    @Field(() => [withdrawal_transactionsScalarWhereInput], {nullable:true})
    @Type(() => withdrawal_transactionsScalarWhereInput)
    deleteMany?: Array<withdrawal_transactionsScalarWhereInput>;
}

@InputType()
export class withdrawal_transactionsUpdateWithWhereUniqueWithoutAdminBankAccountsInput {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>;
    @Field(() => withdrawal_transactionsUpdateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateWithoutAdminBankAccountsInput)
    data!: InstanceType<typeof withdrawal_transactionsUpdateWithoutAdminBankAccountsInput>;
}

@InputType()
export class withdrawal_transactionsUpdateWithWhereUniqueWithoutPlayersInput {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>;
    @Field(() => withdrawal_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateWithoutPlayersInput)
    data!: InstanceType<typeof withdrawal_transactionsUpdateWithoutPlayersInput>;
}

@InputType()
export class withdrawal_transactionsUpdateWithoutAdminBankAccountsInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput>;
}

@InputType()
export class withdrawal_transactionsUpdateWithoutPlayersInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => admin_bank_accountsUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput, {nullable:true})
    adminBankAccounts?: InstanceType<typeof admin_bank_accountsUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput>;
}

@InputType()
export class withdrawal_transactionsUpdateInput {
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => FloatFieldUpdateOperationsInput, {nullable:true})
    amount?: InstanceType<typeof FloatFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    currency?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => DateTimeFieldUpdateOperationsInput, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    processedBy?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => StringFieldUpdateOperationsInput, {nullable:true})
    transactionDate?: InstanceType<typeof StringFieldUpdateOperationsInput>;
    @Field(() => EnumTransactionTypeFieldUpdateOperationsInput, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFieldUpdateOperationsInput>;
    @Field(() => playersUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput, {nullable:true})
    players?: InstanceType<typeof playersUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput>;
    @Field(() => admin_bank_accountsUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput, {nullable:true})
    adminBankAccounts?: InstanceType<typeof admin_bank_accountsUpdateOneRequiredWithoutWithdrawalTransactionsNestedInput>;
}

@InputType()
export class withdrawal_transactionsUpsertWithWhereUniqueWithoutAdminBankAccountsInput {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>;
    @Field(() => withdrawal_transactionsUpdateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateWithoutAdminBankAccountsInput)
    update!: InstanceType<typeof withdrawal_transactionsUpdateWithoutAdminBankAccountsInput>;
    @Field(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput, {nullable:false})
    @Type(() => withdrawal_transactionsCreateWithoutAdminBankAccountsInput)
    create!: InstanceType<typeof withdrawal_transactionsCreateWithoutAdminBankAccountsInput>;
}

@InputType()
export class withdrawal_transactionsUpsertWithWhereUniqueWithoutPlayersInput {
    @Field(() => withdrawal_transactionsWhereUniqueInput, {nullable:false})
    @Type(() => withdrawal_transactionsWhereUniqueInput)
    where!: Prisma.AtLeast<withdrawal_transactionsWhereUniqueInput, 'withdrawalTransactionID'>;
    @Field(() => withdrawal_transactionsUpdateWithoutPlayersInput, {nullable:false})
    @Type(() => withdrawal_transactionsUpdateWithoutPlayersInput)
    update!: InstanceType<typeof withdrawal_transactionsUpdateWithoutPlayersInput>;
    @Field(() => withdrawal_transactionsCreateWithoutPlayersInput, {nullable:false})
    @Type(() => withdrawal_transactionsCreateWithoutPlayersInput)
    create!: InstanceType<typeof withdrawal_transactionsCreateWithoutPlayersInput>;
}

@InputType()
export class withdrawal_transactionsWhereUniqueInput {
    @Field(() => String, {nullable:true})
    withdrawalTransactionID?: string;
    @Field(() => [withdrawal_transactionsWhereInput], {nullable:true})
    AND?: Array<withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsWhereInput], {nullable:true})
    OR?: Array<withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsWhereInput], {nullable:true})
    NOT?: Array<withdrawal_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => Admin_bank_accountsRelationFilter, {nullable:true})
    adminBankAccounts?: InstanceType<typeof Admin_bank_accountsRelationFilter>;
}

@InputType()
export class withdrawal_transactionsWhereInput {
    @Field(() => [withdrawal_transactionsWhereInput], {nullable:true})
    AND?: Array<withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsWhereInput], {nullable:true})
    OR?: Array<withdrawal_transactionsWhereInput>;
    @Field(() => [withdrawal_transactionsWhereInput], {nullable:true})
    NOT?: Array<withdrawal_transactionsWhereInput>;
    @Field(() => StringFilter, {nullable:true})
    withdrawalTransactionID?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    playerID?: InstanceType<typeof StringFilter>;
    @Field(() => FloatFilter, {nullable:true})
    amount?: InstanceType<typeof FloatFilter>;
    @Field(() => StringFilter, {nullable:true})
    currency?: InstanceType<typeof StringFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    requestTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => DateTimeFilter, {nullable:true})
    processTime?: InstanceType<typeof DateTimeFilter>;
    @Field(() => StringFilter, {nullable:true})
    processedBy?: InstanceType<typeof StringFilter>;
    @Field(() => StringFilter, {nullable:true})
    transactionDate?: InstanceType<typeof StringFilter>;
    @Field(() => EnumTransactionTypeFilter, {nullable:true})
    status?: InstanceType<typeof EnumTransactionTypeFilter>;
    @Field(() => StringFilter, {nullable:true})
    adminBankAccountID?: InstanceType<typeof StringFilter>;
    @Field(() => PlayersRelationFilter, {nullable:true})
    players?: InstanceType<typeof PlayersRelationFilter>;
    @Field(() => Admin_bank_accountsRelationFilter, {nullable:true})
    adminBankAccounts?: InstanceType<typeof Admin_bank_accountsRelationFilter>;
}

@ObjectType()
export class withdrawal_transactions {
    @Field(() => ID, {nullable:false})
    withdrawalTransactionID!: string;
    @Field(() => String, {nullable:false})
    playerID!: string;
    @Field(() => Float, {nullable:false})
    amount!: number;
    @Field(() => String, {nullable:false})
    currency!: string;
    @Field(() => Date, {nullable:false})
    requestTime!: Date;
    @Field(() => Date, {nullable:false})
    processTime!: Date;
    @Field(() => String, {nullable:false})
    processedBy!: string;
    @Field(() => String, {nullable:false})
    transactionDate!: string;
    @Field(() => TransactionType, {nullable:false,defaultValue:'PENDING'})
    status!: keyof typeof TransactionType;
    @Field(() => String, {nullable:false})
    adminBankAccountID!: string;
    @Field(() => players, {nullable:false})
    players?: InstanceType<typeof players>;
    @Field(() => admin_bank_accounts, {nullable:false})
    adminBankAccounts?: InstanceType<typeof admin_bank_accounts>;
}
