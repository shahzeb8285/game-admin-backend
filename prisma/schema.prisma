datasource db {
  provider = "cockroachdb"

  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider           = "node node_modules/prisma-nestjs-graphql"
  output             = "../src/@generated"
  omitModelsCount    = true
  noAtomicOperations = true
}

model player_login_logs {
  player_login_log_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  players             players  @relation(fields: [player_id], references: [player_id])
  player_id           String
  ip                  String
  login_time          DateTime @default(now())
}

model admin_login_logs {
  admin_login_log_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admins             admins   @relation(fields: [admin_id], references: [admin_id])
  admin_id           String
  ip                 String
  login_time         DateTime @default(now())
}

model manual_adjustments {
  manual_adjustment_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  players              players  @relation(fields: [player_id], references: [player_id])
  player_id            String
  reason               String
  amount               Float
  admins               admins   @relation(fields: [created_by], references: [admin_id])
  created_by           String
  cdate                DateTime @default(now())
}

model players {
  player_id                 String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String?
  tg_id                     String                      @unique
  tg_first_name             String
  tg_last_name              String
  tg_username               String?                     @unique
  tg_photo_url              String?
  user_language             String
  registration_ip           String
  agent                     agents                      @relation(fields: [agent_id], references: [agent_id])
  agent_id                  String
  registration_date         String
  password                  String
  fundist_password          String
  cdate                     DateTime                    @default(now())
  udate                     DateTime                    @updatedAt
  enabled                   Boolean                     @default(true)
  deposit_transactions      deposit_transactions[]
  withdrawal_transactions   withdrawal_transactions[]
  player_login_logs         player_login_logs[]
  manual_adjustments        manual_adjustments[]
  rebate_transactions       rebate_transactions[]
  game_record_rounds        game_record_rounds[]
  wallet                    player_wallets?
  transfer_in_transactions  transfer_in_transactions[]
  transfer_out_transactions transfer_out_transactions[]
}

model agents {
  agent_id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agent_name           String                 @unique
  agent_password       String
  parent               agents?                @relation("children", fields: [parent_agent_id], references: [agent_id])
  parent_agent_id      String?
  children             agents[]               @relation("children")
  created_by           String
  cdate                DateTime               @default(now())
  udate                DateTime               @updatedAt
  enabled              Boolean                @default(true)
  players              players[]
  agent_rebate_rates   agent_rebate_rates[]
  agent_shares         agent_shares[]
  agent_records_by_day agent_records_by_day[]
}

model admins {
  admin_id                  String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admin_name                String                      @unique
  admin_password            String
  admin_roles               admin_roles                 @relation(fields: [admin_role_id], references: [admin_role_id])
  admin_role_id             String                      @db.Uuid
  created_by                String
  cdate                     DateTime                    @default(now())
  udate                     DateTime                    @updatedAt
  enabled                   Boolean                     @default(true)
  admin_login_logs          admin_login_logs[]
  manual_adjustments        manual_adjustments[]
  transfer_out_transactions transfer_out_transactions[]
  transfer_in_transactions  transfer_in_transactions[]
  deposit_transactions      deposit_transactions[]
  withdrawal_transactions   withdrawal_transactions[]
}

model admin_roles {
  admin_role_id       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admin_role_name     String                @unique
  created_by          String
  cdate               DateTime              @default(now())
  udate               DateTime              @updatedAt
  enabled             Boolean               @default(true)
  admins              admins[]
  admin_role_accesses admin_role_accesses[]
}

model admin_accesses {
  admin_access_id     String                @id @default(dbgenerated("gen_random_uuid()")) @map("adminAccessID") @db.Uuid
  access_name         String                @unique @map("accessName")
  admin_role_accesses admin_role_accesses[]
}

model admin_role_accesses {
  admin_role_access_id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admin_roles          admin_roles    @relation(fields: [admin_role_id], references: [admin_role_id])
  admin_role_id        String         @db.Uuid
  admin_accesses       admin_accesses @relation(fields: [admin_access_id], references: [admin_access_id])
  admin_access_id      String
  created_by           String
  updated_by           String
  cdate                DateTime       @default(now())
  udate                DateTime       @updatedAt
  enabled              Boolean        @default(true)
}

model exchange_rates {
  exchange_rate_id String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  real_currency    real_currency
  game_currency    game_currency
  game_per_real    Float
  cdate            DateTime      @default(now())
  udate            DateTime      @updatedAt
  enabled          Boolean       @default(true)
}

model rebate_transactions {
  rebate_transaction_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id             String
  amount                Int
  cdate                 DateTime @default(now())
  bonus_type            String?
  description           String?
  player                players  @relation(fields: [player_id], references: [player_id])
}

model agent_rebate_rates {
  agent_rebate_rate_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agents               agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id             String
  rebate_category_id   Int
  rebate               Float
  created_by           String
  cdate                DateTime @default(now())
  is_active            Boolean
}

model player_rebate_rates {
  player_rebate_rate_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id             String
  rebate_category_id    Int
  rebate                Float
  created_by            String
  cdate                 DateTime @default(now())
  is_active             Boolean
}

model agent_shares {
  agent_share_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agents         agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id       String
  shares         Float
  created_by     String
  cdate          DateTime @default(now())
  is_active      Boolean
}

model game_records_by_period {
  game_records_by_period_id String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_date                 DateTime
  game_url                  String
  player_id                 String
  rebate_category_id        Int
  effective_bet_amount      Float
  pnl                       Float
  rebate_amount             Float
  rebate_status             rebate_status @default(NOT_CALCULATED)
}

model game_records_by_day {
  game_records_by_day_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_date              DateTime @default(now())
  player_id              String
  rebate_category_id     Int
  effective_bet_amount   Float
  pnl                    Float
  rebate_amount          Float
  cdate                  DateTime @default(now())
  udate                  DateTime @updatedAt
  is_active              Boolean
}

model agent_records_by_day {
  agent_records_by_day_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_records_by_day_id  String
  game_date               DateTime @default(now())
  player_id               String
  rebate_category_id      Int
  agents                  agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id                String
  child_agent_id          String?
  effective_bet_amount    Float
  rebate_income           Float
  rebate_expense          Float
  game_pnl_income         Float
  game_pnl_expense        Float
  cdate                   DateTime @default(now())
  udate                   DateTime @updatedAt
  is_active               Boolean
}

model admin_bank_accounts {
  admin_bank_account_id String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bank_name             String
  account_number        String
  holder_name           String
  method                bank_method
  cdate                 DateTime               @default(now())
  udate                 DateTime               @updatedAt
  enabled               Boolean                @default(true)
  deposit_transactions  deposit_transactions[]
  // withdrawal_transactions withdrawal_transactions[]
}

model player_bank_accounts {
  player_bank_account_id  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id               String
  bank_name               String
  account_number          String
  holder_name             String
  method                  bank_method
  cdate                   DateTime                  @default(now())
  udate                   DateTime                  @updatedAt
  enabled                 Boolean                   @default(true)
  withdrawal_transactions withdrawal_transactions[]
}

model player_wallets {
  player_wallet_id String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id        String        @unique
  currency         game_currency
  amount           Float
  frozen_amount    Float
  cdate            DateTime?     @default(now())
  udate            DateTime?     @updatedAt
  player           players       @relation(fields: [player_id], references: [player_id])
}

model deposit_transactions {
  deposit_transaction_id String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  players                players             @relation(fields: [player_id], references: [player_id])
  player_id              String
  transaction_currency   real_currency
  transaction_amount     Float
  game_currency          game_currency
  game_amount            Float
  admin_bank_account     admin_bank_accounts @relation(fields: [admin_bank_account_id], references: [admin_bank_account_id])
  admin_bank_account_id  String
  transaction_date       String
  player_remarks         String
  comment                String?
  processed_by           String?
  processed_by_admin     admins?             @relation(fields: [processed_by], references: [admin_id])

  process_time DateTime?                 @default(now())
  status       wallet_transaction_status @default(PENDING)
  cdate        DateTime                  @default(now())
  udate        DateTime                  @updatedAt
}

model withdrawal_transactions {
  withdrawal_transaction_id String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  players                   players              @relation(fields: [player_id], references: [player_id])
  player_id                 String
  transaction_currency      real_currency
  transaction_amount        Float
  game_currency             game_currency
  game_amount               Float
  player_bank_account       player_bank_accounts @relation(fields: [player_bank_account_id], references: [player_bank_account_id])
  player_bank_account_id    String
  transaction_date          String
  player_remarks            String
  comment                   String?
  processed_by              String?
  processed_by_admin        admins?              @relation(fields: [processed_by], references: [admin_id])

  process_time DateTime?                 @default(now())
  status       wallet_transaction_status @default(PENDING)
  cdate        DateTime                  @default(now())
  udate        DateTime                  @updatedAt
  // admin_bank_accounts                      admin_bank_accounts?      @relation(fields: [admin_bank_accountsAdmin_bank_account_id], references: [admin_bank_account_id])
  // admin_bank_accountsAdmin_bank_account_id String?
}



model transfer_in_transactions {
  transfer_in_transaction_id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id                  String
  player                     players @relation(fields: [player_id], references: [player_id])
  processed_by_admin         admins? @relation(fields: [processed_by], references: [admin_id])

  transaction_currency real_currency
  transaction_amount   Float
  game_currency        game_currency
  game_amount          Float
  counterpart_platform String
  counterpart_username String
  transaction_date     String
  player_remarks       String
  comment              String?
  processed_by         String?
  process_time         DateTime?                 @default(now())
  status               wallet_transaction_status @default(PENDING)
  cdate                DateTime                  @default(now())
  udate                DateTime                  @updatedAt
}

model transfer_out_transactions {
  transfer_out_transaction_id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id                   String
  player                      players @relation(fields: [player_id], references: [player_id])

  transaction_currency real_currency
  transaction_amount   Float
  game_currency        game_currency
  game_amount          Float
  counterpart_platform String
  counterpart_username String
  transaction_date     String
  player_remarks       String
  comment              String?

  processed_by       String?
  processed_by_admin admins? @relation(fields: [processed_by], references: [admin_id])

  process_time DateTime?                 @default(now())
  status       wallet_transaction_status @default(PENDING)
  cdate        DateTime                  @default(now())
  udate        DateTime                  @updatedAt
}

model all_ow_requests {
  all_ow_request_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  request           String
  cdate             DateTime @default(now())
}

model wallet_requests {
  wallet_request_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tid                   String
  type                  String
  player_id             String
  currency              String
  amount                String
  i_game_id             String
  i_extparam            String?
  i_rollback            String
  i_gamedesc            String
  i_action_id           String
  i_reference_action_id String
  round_start           Boolean
  round_ended           Boolean
  game_extra            String?
  subtype               String
  jackpot_win           Int?
  hmac                  String
  response              String
  cdate                 DateTime @default(now())
}

model game_actions {
  game_action_id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  actid              String
  type               String
  amount             String
  timestamp          String
  game_round_info_id String
}

model game_round_infos {
  game_round_info_id String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_id            String
  player_id          String
  i_gamedesc         String
  i_extparam         String?
  game_extra         String?
  cdate              DateTime             @default(now())
  game_record_rounds game_record_rounds[]
}

model unprocessed_game_round_infos {
  game_round_info_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model game_record_rounds {
  game_round_info_id String
  game_round         game_round_infos @relation(fields: [game_round_info_id], references: [game_round_info_id])

  game_date                 DateTime      @default(now())
  game_url                  String
  // game                      sg_games      @relation(fields: [game_url], references: [url])
  player_id                 String
  rebate_category_id        Int
  category                  fl_categories @relation(fields: [rebate_category_id], references: [category_id])
  bet_amount                Float?
  payout                    Float
  effective_bet_amount      Float?
  is_processed              Boolean
  player                    players       @relation(fields: [player_id], references: [player_id])
  game_records_by_period_id String

  @@id([game_round_info_id, game_date, game_url, player_id, rebate_category_id, game_records_by_period_id])
}

model sg_games {
  sg_game_id  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_id     Int
  url         String @unique
  game_name   String
  image       String
  category_id String
  merchant_id Int
  // merchant    sg_merchants @relation(fields: [merchant_id], references: [merchant_id])

  sort                 Int?
  page_code            String?
  mobile_page_code     String?
  rtp                  Float?
  coun_rest_id         Int?
  external_code        String?
  mobile_external_code String?
  table_id             String?
  has_demo             Boolean?
  freeround            Boolean?
  bonus_buy            Boolean?
  megaways             Boolean?
  freespins            Boolean?
  min_bet_default      Float?
  max_bet_default      Float?
  max_multiplier       Float?
  cdate                DateTime? @default(now())
  udate                DateTime? @updatedAt
  enabled              Boolean?  @default(true)
  // game_record_rounds   game_record_rounds[]
}

model sg_categories {
  sg_category_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id    Int
  category_name  String
  csort          Int
  cdate          DateTime @default(now())
  udate          DateTime @updatedAt
  enabled        Boolean  @default(true)
}

model fl_categories {
  fl_categories_id   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id        Int                  @unique
  category_name      String
  csort              Int
  rebate_priority    Int?
  cdate              DateTime             @default(now())
  udate              DateTime             @updatedAt
  enabled            Boolean              @default(true)
  game_record_rounds game_record_rounds[]
}

model categories_mappings {
  categories_mapping_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sg_category_id        Int
  fl_category_id        Int
  cdate                 DateTime @default(now())
  udate                 DateTime @updatedAt
  enabled               Boolean  @default(true)
}

model sg_merchants {
  sg_merchant_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  merchant_id    Int
  merchant_name  String
  merchant_alias String
  image          String
  cdate          DateTime @default(now())
  udate          DateTime @updatedAt
  enabled        Boolean  @default(true)
  // sg_games       sg_games[]
}

model sg_countries_restrictions {
  sg_coun_rest_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coun_rest_id    Int
  coun_rest_name  String
  merchant_id     Int
  countries       String
  cdate           DateTime @default(now())
  udate           DateTime @updatedAt
  enabled         Boolean  @default(true)
}

model sg_merchants_currencies {
  sg_merchants_currency_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  merchants_currency_id    Int
  merchant_id              Int
  currencies               String
  cdate                    DateTime @default(now())
  udate                    DateTime @updatedAt
  enabled                  Boolean  @default(true)
}

enum rebate_status {
  NOT_CALCULATED
  DISTRIBUTED
  COLLECTED
}

enum bank_method {
  FPS
  BANK
}

enum wallet_transaction_status {
  PENDING
  SUCCESS
  FAILED
}

enum real_currency {
  HKD
  USDT
}

enum game_currency {
  fHKD
}
