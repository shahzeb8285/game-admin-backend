datasource db {
  provider = "cockroachdb"

  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider           = "node node_modules/prisma-nestjs-graphql"
  output             = "../src/@generated"
  omitModelsCount    = true
  noAtomicOperations = true
  // combineScalarFilters                  = false
  // reExport                              = None
  // emitSingle                            = true
  // emitCompiled = true
  // purgeOutput                           = false
  // requireSingleFieldsInWhereUniqueInput = false
  // fields_Validator_from                 = "class-validator"
  // fields_Validator_input                = true
  // fields_Scalars_from                   = "graphql-scalars"
  // fields_Scalars_input                  = true
  // useInputType_WhereInput_ALL           = "WhereInput"
  // decorate_1_type                       = "Create@(One|Many)UserArgs"
  // decorate_1_field                      = data
  // decorate_1_name                       = ValidateNested
  // decorate_1_from                       = "class-validator"
  // decorate_1_arguments                  = "[]"
  // decorate_2_type                       = "Create@(One|Many)UserArgs"
  // decorate_2_field                      = data
  // decorate_2_from                       = "class-transformer"
  // decorate_2_arguments                  = "['() => {propertyType.0}']"
  // decorate_2_name                       = Type
  // decorate_2_namedImport                = true
  // decorate_3_type                       = "ProfileUncheckedCreateNestedOneWithoutUserInput"
  // decorate_3_field                      = "!(create)"
  // decorate_3_name                       = "HideField"
  // decorate_3_from                       = "@nestjs/graphql"
  // decorate_3_arguments                  = "[]"
}

model player_login_logs {
  player_login_log_id String   @id @default(cuid())
  player_id           String
  ip                  String
  login_time          DateTime
}

model admin_login_logs {
  admin_login_log_id String   @id @default(cuid())
  admins             admins   @relation(fields: [admin_id], references: [admin_id])
  admin_id           String
  ip                 String
  login_time         DateTime
}

model manual_adjustments {
  manual_adjustment_id String   @id @default(cuid())
  player_id            String
  reason               String
  amount               Float
  admins               admins   @relation(fields: [created_by], references: [admin_id])
  created_by           String
  cdate                DateTime
}

model players {
  player_id         String   @id @default(cuid())
  name              String
  tg_id             String
  tg_first_name     String
  tg_last_name      String
  tg_username       String
  tg_photo_url      String
  user_language     String
  registration_ip   String
  agent             agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id          String
  registration_date String
  password          String
  fundist_password  String
  cdate             DateTime
  udate             DateTime
  enabled           Boolean
}

model agents {
  agent_id             String                 @id @default(cuid())
  agent_name           String
  agent_password       String
  parent               agents?                @relation("children", fields: [parent_agent_id], references: [agent_id])
  parent_agent_id      String?                @map("agent_id_m")
  children             agents[]               @relation("children")
  created_by           String
  cdate                DateTime
  udate                DateTime
  enabled              Boolean
  players              players[]
  agent_rebate_rates   agent_rebate_rates[]
  agent_shares         agent_shares[]
  agent_records_by_day agent_records_by_day[]
}

model admins {
  admin_id           String               @id @default(cuid())
  admin_name         String
  admin_password     String
  admin_roles        admin_roles          @relation(fields: [admin_role_id], references: [admin_role_id])
  admin_role_id      String
  created_by         String
  cdate              DateTime
  udate              DateTime
  enabled            Boolean
  admin_login_logs   admin_login_logs[]
  manual_adjustments manual_adjustments[]
}

model admin_roles {
  admin_role_id       String                @id @default(cuid())
  admin_role_name     String
  created_by          String
  cdate               DateTime
  udate               DateTime
  enabled             Boolean
  admins              admins[]
  admin_role_accesses admin_role_accesses[]
}

model admin_accesses {
  admin_access_id     String                @id @default(cuid())
  access_name         String
  admin_role_accesses admin_role_accesses[]
}

model admin_role_accesses {
  admin_role_access_id String         @id @default(cuid())
  admin_roles          admin_roles    @relation(fields: [admin_role_id], references: [admin_role_id])
  admin_role_id        String
  admin_accesses       admin_accesses @relation(fields: [admin_access_id], references: [admin_access_id])
  admin_access_id      String
  created_by           String
  updated_by           String
  cdate                DateTime
  udate                DateTime
  enabled              Boolean
}

model exchange_rates {
  exchange_rate_id String        @id @default(cuid())
  real_currency    real_currency
  game_currency    game_currency
  game_per_real    Float
  enabled          Boolean
  cdate            DateTime
  udate            DateTime
}

model agent_rebate_rates {
  agent_rebate_rate_id String   @id @default(cuid())
  agents               agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id             String
  rebate_category_id   Int
  rebate               Float
  created_by           String
  cdate                DateTime
  is_active            Boolean
}

model player_rebate_rates {
  player_rebate_rate_id String   @id @default(cuid())
  player_id             String
  rebate_category_id    Int
  rebate                Float
  created_by            String
  cdate                 DateTime
  is_active             Boolean
}

model agent_shares {
  agent_share_id String   @id @default(cuid())
  agents         agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id       String
  shares         Float
  created_by     String
  cdate          DateTime
  is_active      Boolean
}

model game_records_by_period {
  game_records_by_period_id String        @id @default(cuid())
  game_date                 DateTime
  game_url                  String
  player_id                 String
  rebate_category_id        Int
  effective_bet_amount      Float
  pnl                       Float
  rebate_amount             Float
  rebate_status             rebate_status @default(NOT_CALCULATED)
}

model game_records_by_day {
  game_records_by_day_id String   @id @default(cuid())
  game_date              DateTime
  player_id              String
  rebate_category_id     Int
  effective_bet_amount   Float
  pnl                    Float
  rebate_amount          Float
  cdate                  DateTime
  udate                  DateTime
  is_active              Boolean
}

model agent_records_by_day {
  agent_records_by_day_id String   @id @default(cuid())
  game_records_by_day_id  String
  game_date               DateTime
  player_id               String
  rebate_category_id      Int
  agents                  agents   @relation(fields: [agent_id], references: [agent_id])
  agent_id                String
  child_agent_id          String
  effective_bet_amount    Float
  rebate_income           Float
  rebate_expense          Float
  game_pnl_income         Float
  game_pnl_expense        Float
  cdate                   DateTime
  udate                   DateTime
  is_active               Boolean
}

model admin_bank_accounts {
  admin_bank_account_id String                 @id @default(cuid())
  bank_name             String
  account_number        String
  holder_name           String
  method                bank_method
  enabled               Boolean
  cdate                 DateTime
  udate                 DateTime
  deposit_transactions  deposit_transactions[]
}

model player_bank_accounts {
  player_bank_account_id  String                    @id @default(cuid())
  player_id               String
  bank_name               String
  account_number          String
  holder_name             String
  method                  bank_method
  enabled                 Boolean
  cdate                   DateTime
  udate                   DateTime
  withdrawal_transactions withdrawal_transactions[]
}

model player_wallets {
  player_wallet_id String        @id @default(cuid())
  player_id        String
  currency         game_currency
  amount           Float
  frozen_amount    Float
  cdate            DateTime
  udate            DateTime
}

model deposit_transactions {
  deposit_transaction_id String                    @id @default(cuid())
  player_id              String
  transaction_currency   real_currency
  transaction_amount     Float
  game_currency          game_currency
  game_amount            Float
  admin_bank_account     admin_bank_accounts       @relation(fields: [admin_bank_account_id], references: [admin_bank_account_id])
  admin_bank_account_id  String
  transaction_date       String
  player_remarks         String
  comment                String
  processed_by           String
  process_time           DateTime
  status                 wallet_transaction_status
  cdate                  DateTime
  udate                  DateTime
}

model withdrawal_transactions {
  withdrawal_transaction_id String                    @id @default(cuid())
  player_id                 String
  transaction_currency      real_currency
  transaction_amount        Float
  game_currency             game_currency
  game_amount               Float
  player_bank_account       player_bank_accounts      @relation(fields: [player_bank_account_id], references: [player_bank_account_id])
  player_bank_account_id    String
  transaction_date          String
  player_remarks            String
  comment                   String
  processed_by              String
  process_time              DateTime
  status                    wallet_transaction_status
  cdate                     DateTime
  udate                     DateTime
}

model transfer_in_transactions {
  transfer_in_transaction_id String                    @id @default(cuid())
  player_id                  String
  transaction_currency       real_currency
  transaction_amount         Float
  game_currency              game_currency
  game_amount                Float
  counterpart_platform       String
  counterpart_username       String
  transaction_date           String
  player_remarks             String
  comment                    String
  processed_by               String
  process_time               DateTime
  status                     wallet_transaction_status
  cdate                      DateTime
  udate                      DateTime
}

model transfer_out_transactions {
  transfer_out_transaction_id String                    @id @default(cuid())
  player_id                   String
  transaction_currency        real_currency
  transaction_amount          Float
  game_currency               game_currency
  game_amount                 Float
  counterpart_platform        String
  counterpart_username        String
  transaction_date            String
  player_remarks              String
  comment                     String
  processed_by                String
  process_time                DateTime
  status                      wallet_transaction_status
  cdate                       DateTime
  udate                       DateTime
}

model all_ow_requests {
  all_ow_request_id String   @id @default(cuid())
  request           String
  cdate             DateTime
}

model wallet_requests {
  wallet_request_id     String   @id @default(cuid())
  tid                   String
  type                  String
  player_id             String
  currency              String
  amount                String
  i_game_id             String
  i_extparam            String
  i_rollback            String
  i_gamedesc            String
  i_action_id           String
  i_reference_action_id String
  round_start           Boolean
  round_ended           Boolean
  game_extra            String
  subtype               String
  jackpot_win           Int
  hmac                  String
  response              String
  cdate                 DateTime
}

model game_actions {
  game_action_id     String @id @default(cuid())
  actid              String
  type               String
  amount             String
  timestamp          String
  game_round_info_id String
}

model game_round_infos {
  game_round_info_id String   @id @default(cuid())
  game_id            String
  player_id          String
  i_gamedesc         String
  i_extparam         String
  game_extra         String
  cdate              DateTime
}

model unprocessed_game_round_infos {
  game_round_info_id String @id @default(cuid())
}

model game_record_rounds {
  game_round_info_id        String   @id @default(cuid())
  game_date                 DateTime
  game_url                  String
  player_id                 String
  rebate_category_id        Int
  bet_amount                Float
  payout                    Float
  effective_bet_amount      Float
  is_processed              Boolean
  game_records_by_period_id String
}

model sg_games {
  sg_game_id           String   @id @default(cuid())
  game_id              Int
  url                  String
  game_name            String
  image                String
  category_id          String
  merchant_id          Int
  sort                 Int
  page_code            String
  mobile_page_code     String
  rtp                  Float
  coun_rest_id         Int
  external_code        String
  mobile_external_code String
  table_id             String
  has_demo             Boolean
  freeround            Boolean
  bonus_buy            Boolean
  megaways             Boolean
  freespins            Boolean
  min_bet_default      Float
  max_bet_default      Float
  max_multiplier       Float
  enabled              Boolean
  cdate                DateTime
  udate                DateTime
}

model sg_categories {
  sg_category_id String   @id @default(cuid())
  category_id    Int
  category_name  String
  csort          Int
  enabled        Boolean
  cdate          DateTime
  udate          DateTime
}

model fl_categories {
  fl_categories_id String   @id @default(cuid())
  category_id      Int
  category_name    String
  csort            Int
  rebate_priority  Int
  enabled          Boolean
  cdate            DateTime
  udate            DateTime
}

model categories_mappings {
  categories_mapping_id String   @id @default(cuid())
  sg_category_id        Int
  fl_category_id        Int
  enabled               Boolean
  cdate                 DateTime
  udate                 DateTime
}

model sg_merchants {
  sg_merchant_id String   @id @default(cuid())
  merchant_id    Int
  merchant_name  String
  merchant_alias String
  image          String
  enabled        Boolean
  cdate          DateTime
  udate          DateTime
}

model sg_countries_restrictions {
  sg_coun_rest_id String   @id @default(cuid())
  coun_rest_id    Int
  coun_rest_name  String
  merchant_id     Int
  countries       String
  enabled         Boolean
  cdate           DateTime
  udate           DateTime
}

model sg_merchants_currencies {
  sg_merchants_currency_id String   @id @default(cuid())
  merchants_currency_id    Int
  merchant_id              Int
  currencies               String
  enabled                  Boolean
  cdate                    DateTime
  udate                    DateTime
}

enum rebate_status {
  NOT_CALCULATED
  DISTRIBUTED
  COLLECTED
}

enum bank_method {
  FPS
  BANK
}

enum wallet_transaction_status {
  PENDING
  SUCCESS
  FAILED
}

enum real_currency {
  HKD
  USDT
}

enum game_currency {
  fHKD
}
